-- MySQL dump 10.13  Distrib 8.0.33, for Win64 (x86_64)
--
-- Host: 103.178.248.62    Database: inventory_db
-- ------------------------------------------------------
-- Server version	8.0.34-0ubuntu0.22.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `actiontype`
--

DROP TABLE IF EXISTS `actiontype`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `actiontype` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `ActionType` varchar(64) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `actiontype`
--

LOCK TABLES `actiontype` WRITE;
/*!40000 ALTER TABLE `actiontype` DISABLE KEYS */;
INSERT INTO `actiontype` VALUES (1,'Purchase'),(2,'Added to Sales Order'),(3,'Dispatch'),(4,'Return'),(5,'Marked Damage before sale'),(6,'Return to Manufacturer '),(7,'Marked Damage after sale'),(8,'Returned as Inward'),(9,'Inward as damage'),(10,'Damage in Inventory'),(11,'DirectOut Sales Order'),(12,'DirectOut Return to Manufacturer');
/*!40000 ALTER TABLE `actiontype` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `activeprofile`
--

DROP TABLE IF EXISTS `activeprofile`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `activeprofile` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Status` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `activeprofile`
--

LOCK TABLES `activeprofile` WRITE;
/*!40000 ALTER TABLE `activeprofile` DISABLE KEYS */;
INSERT INTO `activeprofile` VALUES (1,'Active'),(2,'Inactive');
/*!40000 ALTER TABLE `activeprofile` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `barcodestatus`
--

DROP TABLE IF EXISTS `barcodestatus`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `barcodestatus` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `BarcodeStatus` varchar(32) NOT NULL,
  `IsDeleted` bit(1) NOT NULL DEFAULT b'0',
  `CreatedOn` datetime DEFAULT CURRENT_TIMESTAMP,
  `CreatedBy` int NOT NULL,
  `ModifiedOn` datetime DEFAULT NULL,
  `ModifiedBy` int DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `barcodestatus`
--

LOCK TABLES `barcodestatus` WRITE;
/*!40000 ALTER TABLE `barcodestatus` DISABLE KEYS */;
INSERT INTO `barcodestatus` VALUES (1,'Barcode Pending',_binary '\0','2023-05-29 10:57:17',3,NULL,NULL),(2,'Barcode Generated',_binary '\0','2023-05-29 10:57:17',3,NULL,NULL);
/*!40000 ALTER TABLE `barcodestatus` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `category`
--

DROP TABLE IF EXISTS `category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `category` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Name` varchar(64) DEFAULT NULL,
  `IsDeleted` bit(1) NOT NULL DEFAULT b'0',
  `CreatedOn` datetime DEFAULT NULL,
  `CreatedBy` int DEFAULT NULL,
  `ModifiedOn` datetime DEFAULT NULL,
  `ModifiedBy` int DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `category`
--

LOCK TABLES `category` WRITE;
/*!40000 ALTER TABLE `category` DISABLE KEYS */;
INSERT INTO `category` VALUES (1,'testingrefactor',_binary '\0',NULL,NULL,'2023-08-25 12:48:17',1),(2,'testProduct303',_binary '\0',NULL,NULL,NULL,NULL),(3,'testProduct303',_binary '\0','2023-08-24 17:36:18',2,NULL,NULL),(4,'testProduct303',_binary '\0','2023-08-24 17:41:20',2,NULL,NULL),(5,'testProduct303',_binary '\0','2023-08-24 17:42:49',2,NULL,NULL),(6,'TEST',_binary '\0','2023-08-24 17:54:24',1,NULL,NULL),(7,'testRefactor',_binary '','2023-08-25 12:47:33',1,'2023-08-25 13:58:19',1),(8,'test1 28Aug',_binary '\0','2023-08-28 12:37:04',1,NULL,NULL),(9,'test2 28 aug',_binary '','2023-08-28 12:40:53',1,'2023-08-28 12:44:54',1),(10,'testing',_binary '\0','2023-08-28 12:43:08',1,'2023-08-28 16:05:40',1);
/*!40000 ALTER TABLE `category` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `companytype`
--

DROP TABLE IF EXISTS `companytype`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `companytype` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `CompanyType` varchar(64) NOT NULL,
  `IsDeleted` bit(1) NOT NULL DEFAULT b'0',
  `CreatedOn` datetime DEFAULT NULL,
  `CreatedBy` int DEFAULT NULL,
  `ModifiedOn` datetime DEFAULT NULL,
  `ModifiedBy` int DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `companytype`
--

LOCK TABLES `companytype` WRITE;
/*!40000 ALTER TABLE `companytype` DISABLE KEYS */;
INSERT INTO `companytype` VALUES (1,'Private Ltd Company',_binary '\0','2023-08-23 11:29:45',1,NULL,NULL),(2,'Public Ltd Company',_binary '\0','2023-08-23 11:29:45',1,NULL,NULL),(3,'Unlimited Company',_binary '\0','2023-08-23 11:29:45',1,NULL,NULL),(4,'Hindu Family Joint Company',_binary '\0','2023-08-23 11:29:45',1,NULL,NULL),(5,'Governemnt Company',_binary '\0','2023-08-23 11:29:45',1,NULL,NULL),(6,'Hybrid Company',_binary '\0','2023-08-23 11:29:45',1,NULL,NULL);
/*!40000 ALTER TABLE `companytype` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `inventory`
--

DROP TABLE IF EXISTS `inventory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `inventory` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `WarehouseId` int NOT NULL,
  `ProductId` int NOT NULL,
  `ActionType` int NOT NULL,
  `ActionDate` datetime NOT NULL,
  `VendorId` int NOT NULL,
  `PurchaseSalesNumber` varchar(64) DEFAULT NULL,
  `ReceivedCount` int DEFAULT NULL,
  `SalesOrderPendingCount` int DEFAULT NULL,
  `SalesOrderDispatchCount` int DEFAULT NULL,
  `StockDamageCount` int DEFAULT NULL,
  `StockReturnCount` int DEFAULT NULL,
  `StockQuantity` int DEFAULT NULL,
  `StockValue` decimal(10,2) DEFAULT NULL,
  `CreatedBy` int DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `inventory`
--

LOCK TABLES `inventory` WRITE;
/*!40000 ALTER TABLE `inventory` DISABLE KEYS */;
INSERT INTO `inventory` VALUES (1,3,3,1,'2023-08-28 17:17:21',3,'YOLO',0,0,0,0,0,0,0.00,1,'2023-08-28 17:17:21'),(2,3,3,1,'2023-08-28 18:19:39',3,'WAR',1,0,0,0,0,1,1212.00,1,'2023-08-28 18:19:39'),(3,3,3,2,'2023-08-28 18:34:22',3,'WAR',0,1,0,0,0,-1,-1212.00,1,'2023-08-28 18:34:22'),(4,3,3,2,'2023-08-28 18:34:42',3,'WAR',0,1,0,0,0,-1,-1212.00,1,'2023-08-28 18:34:42');
/*!40000 ALTER TABLE `inventory` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `itemtype`
--

DROP TABLE IF EXISTS `itemtype`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `itemtype` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `ItemType` varchar(32) NOT NULL,
  `IsDeleted` bit(1) NOT NULL DEFAULT b'0',
  `CreatedOn` datetime DEFAULT CURRENT_TIMESTAMP,
  `CreatedBy` int NOT NULL,
  `ModifiedOn` datetime DEFAULT NULL,
  `ModifiedBy` int DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `itemtype`
--

LOCK TABLES `itemtype` WRITE;
/*!40000 ALTER TABLE `itemtype` DISABLE KEYS */;
INSERT INTO `itemtype` VALUES (1,'With Barcode',_binary '\0','2023-05-26 15:23:42',1,NULL,NULL),(2,'Without Barcode',_binary '\0','2023-05-26 15:23:42',1,NULL,NULL);
/*!40000 ALTER TABLE `itemtype` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `logindetail`
--

DROP TABLE IF EXISTS `logindetail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `logindetail` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `UserName` varchar(64) NOT NULL,
  `Password` varchar(256) NOT NULL,
  `UserId` int NOT NULL,
  `IsActive` int NOT NULL,
  `IsDeleted` tinyint(1) NOT NULL DEFAULT '0',
  `CreatedOn` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `CreatedBy` int NOT NULL,
  `ModifiedOn` datetime DEFAULT NULL,
  `ModifiedBy` int DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `UserId` (`UserId`),
  CONSTRAINT `logindetail_ibfk_1` FOREIGN KEY (`UserId`) REFERENCES `user` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `logindetail`
--

LOCK TABLES `logindetail` WRITE;
/*!40000 ALTER TABLE `logindetail` DISABLE KEYS */;
INSERT INTO `logindetail` VALUES (1,'Admin','e64b78fc3bc91bcbc7dc232ba8ec59e0',1,1,0,'2023-08-23 13:51:08',1,'2023-08-23 13:51:08',1),(2,'user9191','617c9e7d859ec86d1918d8a1e4a3d306',6,1,0,'2023-08-23 14:11:35',1,NULL,NULL),(3,'user8181','a578241e05c8caec4bab350cfd7587a6',7,1,0,'2023-08-23 14:18:58',1,NULL,NULL);
/*!40000 ALTER TABLE `logindetail` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `logs`
--

DROP TABLE IF EXISTS `logs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `logs` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `Message` varchar(500) DEFAULT NULL,
  `Level` varchar(10) DEFAULT NULL,
  `Exception` varchar(500) DEFAULT NULL,
  `StackTrace` varchar(500) DEFAULT NULL,
  `Logger` varchar(500) DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `logs`
--

LOCK TABLES `logs` WRITE;
/*!40000 ALTER TABLE `logs` DISABLE KEYS */;
INSERT INTO `logs` VALUES (2,'dcsd','dscsdc','sdcsdc',NULL,'csdc','2023-08-25 14:03:52');
/*!40000 ALTER TABLE `logs` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `manufacturer`
--

DROP TABLE IF EXISTS `manufacturer`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `manufacturer` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Name` varchar(64) DEFAULT NULL,
  `IsDeleted` bit(1) NOT NULL DEFAULT b'0',
  `CreatedOn` datetime DEFAULT NULL,
  `CreatedBy` int DEFAULT NULL,
  `ModifiedOn` datetime DEFAULT NULL,
  `ModifiedBy` int DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `manufacturer`
--

LOCK TABLES `manufacturer` WRITE;
/*!40000 ALTER TABLE `manufacturer` DISABLE KEYS */;
INSERT INTO `manufacturer` VALUES (3,'testM304',_binary '',NULL,NULL,'2023-08-25 14:06:54',1),(4,'testM305',_binary '\0',NULL,NULL,NULL,NULL),(5,'Damage',_binary '\0','2023-08-24 15:22:18',2,NULL,NULL),(6,'1',_binary '\0','2023-08-24 16:45:21',1,NULL,NULL),(7,'Damage',_binary '\0','2023-08-24 17:26:19',2,NULL,NULL),(8,'1',_binary '\0','2023-08-24 17:50:01',1,NULL,NULL),(9,'test',_binary '\0','2023-08-24 17:50:20',1,NULL,NULL),(10,'test',_binary '\0','2023-08-25 14:07:21',1,'2023-08-25 14:07:46',1),(11,'test',_binary '\0','2023-08-25 14:21:01',1,NULL,NULL),(12,'test 02 28aug',_binary '','2023-08-28 12:44:27',1,'2023-08-28 12:48:04',1);
/*!40000 ALTER TABLE `manufacturer` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `menu`
--

DROP TABLE IF EXISTS `menu`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `menu` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `MenuType` varchar(64) NOT NULL,
  `ControllerName` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `RouteName` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `MethodName` varchar(100) DEFAULT NULL,
  `Icon` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `DisplayName` varchar(100) NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `menu`
--

LOCK TABLES `menu` WRITE;
/*!40000 ALTER TABLE `menu` DISABLE KEYS */;
INSERT INTO `menu` VALUES (1,'Configuration','Configuration','configuration','Index','<svg viewBox=\"0 0 16 16\" width=\"18px\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <path class=\"fill-secondary\" d=\"M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492zM5.754 8a2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0z\">\r\n                            </path>\r\n                            <path d=\"M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52l-.094-.319zm-2.633.283c.246-.835 1.428-.835 1.674 0l.094.319a1.873 1.873 0 0 0 2.693 1.115l.291-.16c.764-.415 1.6.42 1.184 1.185l-.159.292a1.873 1.873 0 0 0 1.116 2.692l.318.094c.835.246.835 1.428 0 1.674l-.319.094a1.873 1.873 0 0 0-1.115 2.693l.16.291c.415.764-.42 1.6-1.185 1.184l-.291-.159a1.873 1.873 0 0 0-2.693 1.116l-.094.318c-.246.835-1.428.835-1.674 0l-.094-.319a1.873 1.873 0 0 0-2.692-1.115l-.292.16c-.764.415-1.6-.42-1.184-1.185l.159-.291A1.873 1.873 0 0 0 1.945 8.93l-.319-.094c-.835-.246-.835-1.428 0-1.674l.319-.094A1.873 1.873 0 0 0 3.06 4.377l-.16-.292c-.415-.764.42-1.6 1.185-1.184l.292.159a1.873 1.873 0 0 0 2.692-1.115l.094-.319z\">\r\n                            </path>\r\n                        </svg>','Configurations'),(2,'Master','Warehouse','warehouse','Index','<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" fill=\"currentColor\" viewBox=\"0 0 18 18\">\r\n                            <path class=\"fill-secondary\" d=\"M4.5 11.25C4.5 10.9516 4.61853 10.6655 4.82951 10.4545C5.04048 10.2435 5.32663 10.125 5.625 10.125C5.92337 10.125 6.20952 10.2435 6.42049 10.4545C6.63147 10.6655 6.75 10.9516 6.75 11.25V13.5C6.75 13.7984 6.63147 14.0845 6.42049 14.2955C6.20952 14.5065 5.92337 14.625 5.625 14.625C5.32663 14.625 5.04048 14.5065 4.82951 14.2955C4.61853 14.0845 4.5 13.7984 4.5 13.5V11.25ZM7.875 11.25C7.875 10.9516 7.99353 10.6655 8.20451 10.4545C8.41548 10.2435 8.70163 10.125 9 10.125C9.29837 10.125 9.58452 10.2435 9.79549 10.4545C10.0065 10.6655 10.125 10.9516 10.125 11.25V13.5C10.125 13.7984 10.0065 14.0845 9.79549 14.2955C9.58452 14.5065 9.29837 14.625 9 14.625C8.70163 14.625 8.41548 14.5065 8.20451 14.2955C7.99353 14.0845 7.875 13.7984 7.875 13.5V11.25ZM11.25 11.25C11.25 10.9516 11.3685 10.6655 11.5795 10.4545C11.7905 10.2435 12.0766 10.125 12.375 10.125C12.6734 10.125 12.9595 10.2435 13.1705 10.4545C13.3815 10.6655 13.5 10.9516 13.5 11.25V13.5C13.5 13.7984 13.3815 14.0845 13.1705 14.2955C12.9595 14.5065 12.6734 14.625 12.375 14.625C12.0766 14.625 11.7905 14.5065 11.5795 14.2955C11.3685 14.0845 11.25 13.7984 11.25 13.5V11.25Z\"></path>\r\n                            <path d=\"M6.47662 1.20489C6.54001 1.24285 6.5953 1.29293 6.63934 1.35226C6.68337 1.41159 6.71528 1.47901 6.73325 1.55068C6.75122 1.62235 6.75489 1.69685 6.74406 1.76994C6.73323 1.84303 6.70811 1.91327 6.67012 1.97664L3.80587 6.75002H14.1941L11.3287 1.97664C11.2521 1.84864 11.2294 1.69542 11.2657 1.55069C11.302 1.40596 11.3942 1.28157 11.5222 1.20489C11.6502 1.12821 11.8035 1.10552 11.9482 1.14181C12.0929 1.1781 12.2173 1.27039 12.294 1.39839L15.5059 6.75002H17.4375C17.5867 6.75002 17.7298 6.80928 17.8352 6.91477C17.9407 7.02026 18 7.16333 18 7.31252V8.43752C18 8.5867 17.9407 8.72978 17.8352 8.83527C17.7298 8.94075 17.5867 9.00002 17.4375 9.00002H16.7366L14.6621 16.263C14.6117 16.4395 14.5051 16.5947 14.3586 16.7051C14.212 16.8156 14.0334 16.8752 13.8499 16.875H4.15125C3.96772 16.8752 3.78913 16.8156 3.64256 16.7051C3.49598 16.5947 3.38941 16.4395 3.339 16.263L1.26338 9.00002H0.5625C0.413316 9.00002 0.270242 8.94075 0.164752 8.83527C0.0592632 8.72978 0 8.5867 0 8.43752V7.31252C0 7.16333 0.0592632 7.02026 0.164752 6.91477C0.270242 6.80928 0.413316 6.75002 0.5625 6.75002H2.49413L5.70375 1.39839C5.74171 1.335 5.79178 1.27971 5.85112 1.23568C5.91045 1.19165 5.97787 1.15974 6.04954 1.14177C6.12121 1.1238 6.19571 1.12012 6.2688 1.13095C6.34189 1.14179 6.41212 1.16691 6.4755 1.20489H6.47662ZM2.43338 9.00002L4.36163 15.75H13.6384L15.5666 9.00002H2.43338Z\"></path>\r\n                        </svg>','Warehouse'),(3,'Master','Vendor','vendor','Index','<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\r\n                            <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M2 1C1.46957 1 0.960859 1.21071 0.585786 1.58579C0.210714 1.96086 0 2.46957 0 3L0 13C0 13.5304 0.210714 14.0391 0.585786 14.4142C0.960859 14.7893 1.46957 15 2 15H14C14.5304 15 15.0391 14.7893 15.4142 14.4142C15.7893 14.0391 16 13.5304 16 13V3C16 2.46957 15.7893 1.96086 15.4142 1.58579C15.0391 1.21071 14.5304 1 14 1H2ZM1 3C1 2.73478 1.10536 2.48043 1.29289 2.29289C1.48043 2.10536 1.73478 2 2 2H14C14.2652 2 14.5196 2.10536 14.7071 2.29289C14.8946 2.48043 15 2.73478 15 3V13C15 13.2652 14.8946 13.5196 14.7071 13.7071C14.5196 13.8946 14.2652 14 14 14H2C1.73478 14 1.48043 13.8946 1.29289 13.7071C1.10536 13.5196 1 13.2652 1 13V3ZM2 5.5C2 5.36739 2.05268 5.24021 2.14645 5.14645C2.24021 5.05268 2.36739 5 2.5 5H6C6.13261 5 6.25979 5.05268 6.35355 5.14645C6.44732 5.24021 6.5 5.36739 6.5 5.5C6.5 5.63261 6.44732 5.75979 6.35355 5.85355C6.25979 5.94732 6.13261 6 6 6H2.5C2.36739 6 2.24021 5.94732 2.14645 5.85355C2.05268 5.75979 2 5.63261 2 5.5ZM2 8.5C2 8.36739 2.05268 8.24021 2.14645 8.14645C2.24021 8.05268 2.36739 8 2.5 8H6C6.13261 8 6.25979 8.05268 6.35355 8.14645C6.44732 8.24021 6.5 8.36739 6.5 8.5C6.5 8.63261 6.44732 8.75979 6.35355 8.85355C6.25979 8.94732 6.13261 9 6 9H2.5C2.36739 9 2.24021 8.94732 2.14645 8.85355C2.05268 8.75979 2 8.63261 2 8.5ZM2 10.5C2 10.3674 2.05268 10.2402 2.14645 10.1464C2.24021 10.0527 2.36739 10 2.5 10H6C6.13261 10 6.25979 10.0527 6.35355 10.1464C6.44732 10.2402 6.5 10.3674 6.5 10.5C6.5 10.6326 6.44732 10.7598 6.35355 10.8536C6.25979 10.9473 6.13261 11 6 11H2.5C2.36739 11 2.24021 10.9473 2.14645 10.8536C2.05268 10.7598 2 10.6326 2 10.5Z\"></path>\r\n                            <path class=\"fill-secondary\" d=\"M8.5 11C8.5 11 8 11 8 10.5C8 10 8.5 8.5 11 8.5C13.5 8.5 14 10 14 10.5C14 11 13.5 11 13.5 11H8.5ZM11 8C11.3978 8 11.7794 7.84196 12.0607 7.56066C12.342 7.27936 12.5 6.89782 12.5 6.5C12.5 6.10218 12.342 5.72064 12.0607 5.43934C11.7794 5.15804 11.3978 5 11 5C10.6022 5 10.2206 5.15804 9.93934 5.43934C9.65804 5.72064 9.5 6.10218 9.5 6.5C9.5 6.89782 9.65804 7.27936 9.93934 7.56066C10.2206 7.84196 10.6022 8 11 8V8Z\"></path>\r\n                        </svg>','Vendors'),(4,'Master','Product','product','Index','<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" fill=\"currentColor\" viewBox=\"0 0 18 18\">\r\n                            <path d=\"M3.31875 0.45C3.42354 0.310279 3.55942 0.196876 3.71563 0.118769C3.87185 0.0406632 4.0441 0 4.21875 0L13.7812 0C13.9559 0 14.1282 0.0406632 14.2844 0.118769C14.4406 0.196876 14.5765 0.310279 14.6813 0.45L17.8875 5.1C17.9605 5.19737 18 5.31579 18 5.4375V16.875C18 17.1734 17.8815 17.4595 17.6705 17.6705C17.4595 17.8815 17.1734 18 16.875 18H1.125C0.826631 18 0.540483 17.8815 0.329505 17.6705C0.118526 17.4595 0 17.1734 0 16.875V5.4375C0 5.31579 0.0394751 5.19737 0.1125 5.1L3.31875 0.45ZM8.4375 1.125H4.21875L1.6875 4.875H8.4375V1.125ZM9.5625 1.125V4.875H16.3125L13.7812 1.125H9.5625ZM16.875 6H1.125V16.875H16.875V6Z\"></path>\r\n                            <rect class=\"fill-secondary\" x=\"3\" y=\"8\" width=\"5\" height=\"7\"></rect>\r\n                            <path class=\"fill-secondary\" d=\"M10 8H15V15H10V8Z\"></path>\r\n                        </svg>','Products'),(5,'Master','User','user','Index','<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\r\n                            <path class=\"fill-secondary\" d=\"M15 14C15 14 16 14 16 13C16 12 15 9 11 9C7 9 6 12 6 13C6 14 7 14 7 14H15ZM7.022 13C7.01461 12.999 7.00727 12.9976 7 12.996C7.001 12.732 7.167 11.966 7.76 11.276C8.312 10.629 9.282 10 11 10C12.717 10 13.687 10.63 14.24 11.276C14.833 11.966 14.998 12.733 15 12.996L14.992 12.998C14.9874 12.9988 14.9827 12.9995 14.978 13H7.022ZM11 7C11.5304 7 12.0391 6.78929 12.4142 6.41421C12.7893 6.03914 13 5.53043 13 5C13 4.46957 12.7893 3.96086 12.4142 3.58579C12.0391 3.21071 11.5304 3 11 3C10.4696 3 9.96086 3.21071 9.58579 3.58579C9.21071 3.96086 9 4.46957 9 5C9 5.53043 9.21071 6.03914 9.58579 6.41421C9.96086 6.78929 10.4696 7 11 7ZM14 5C14 5.39397 13.9224 5.78407 13.7716 6.14805C13.6209 6.51203 13.3999 6.84274 13.1213 7.12132C12.8427 7.3999 12.512 7.62087 12.1481 7.77164C11.7841 7.9224 11.394 8 11 8C10.606 8 10.2159 7.9224 9.85195 7.77164C9.48797 7.62087 9.15725 7.3999 8.87868 7.12132C8.6001 6.84274 8.37913 6.51203 8.22836 6.14805C8.0776 5.78407 8 5.39397 8 5C8 4.20435 8.31607 3.44129 8.87868 2.87868C9.44129 2.31607 10.2044 2 11 2C11.7956 2 12.5587 2.31607 13.1213 2.87868C13.6839 3.44129 14 4.20435 14 5Z\"></path>\r\n                            <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M5.216 14C5.06776 13.6878 4.99382 13.3455 5 13C5 11.645 5.68 10.25 6.936 9.28C6.30909 9.08684 5.65595 8.99237 5 9C1 9 0 12 0 13C0 14 1 14 1 14H5.216Z\"></path>\r\n                            <path d=\"M4.5 8C5.16304 8 5.79893 7.73661 6.26777 7.26777C6.73661 6.79893 7 6.16304 7 5.5C7 4.83696 6.73661 4.20107 6.26777 3.73223C5.79893 3.26339 5.16304 3 4.5 3C3.83696 3 3.20107 3.26339 2.73223 3.73223C2.26339 4.20107 2 4.83696 2 5.5C2 6.16304 2.26339 6.79893 2.73223 7.26777C3.20107 7.73661 3.83696 8 4.5 8Z\"></path>\r\n                        </svg>','Users'),(6,'Main','StockInward','stockinward','Index','<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" fill=\"currentColor\" viewBox=\"0 0 18 18\">\r\n                            <path class=\"fill-secondary\" d=\"M12.7732 7.14823C12.8789 7.04261 12.9382 6.89935 12.9382 6.74998C12.9382 6.60061 12.8789 6.45735 12.7732 6.35173C12.6676 6.24611 12.5244 6.18677 12.375 6.18677C12.2256 6.18677 12.0824 6.24611 11.9767 6.35173L8.99998 9.3296L7.71073 8.03923C7.65843 7.98693 7.59634 7.94544 7.52801 7.91714C7.45968 7.88884 7.38644 7.87427 7.31248 7.87427C7.23852 7.87427 7.16528 7.88884 7.09695 7.91714C7.02861 7.94544 6.96653 7.98693 6.91423 8.03923C6.86193 8.09153 6.82044 8.15361 6.79214 8.22195C6.76384 8.29028 6.74927 8.36352 6.74927 8.43748C6.74927 8.51144 6.76384 8.58468 6.79214 8.65301C6.82044 8.72134 6.86193 8.78343 6.91423 8.83573L8.60173 10.5232C8.65398 10.5756 8.71605 10.6172 8.78439 10.6455C8.85273 10.6739 8.92599 10.6885 8.99998 10.6885C9.07397 10.6885 9.14723 10.6739 9.21557 10.6455C9.2839 10.6172 9.34598 10.5756 9.39823 10.5232L12.7732 7.14823V7.14823Z\"></path>\r\n                            <path d=\"M0.5625 1.125C0.413316 1.125 0.270242 1.18426 0.164752 1.28975C0.0592632 1.39524 0 1.53832 0 1.6875C0 1.83668 0.0592632 1.97976 0.164752 2.08525C0.270242 2.19074 0.413316 2.25 0.5625 2.25H1.81125L2.26237 4.05788L3.94763 13.041C3.97175 13.1699 4.04016 13.2863 4.14102 13.3701C4.24189 13.4539 4.36886 13.4999 4.5 13.5H5.625C5.02826 13.5 4.45597 13.7371 4.03401 14.159C3.61205 14.581 3.375 15.1533 3.375 15.75C3.375 16.3467 3.61205 16.919 4.03401 17.341C4.45597 17.7629 5.02826 18 5.625 18C6.22174 18 6.79403 17.7629 7.21599 17.341C7.63795 16.919 7.875 16.3467 7.875 15.75C7.875 15.1533 7.63795 14.581 7.21599 14.159C6.79403 13.7371 6.22174 13.5 5.625 13.5H13.5C12.9033 13.5 12.331 13.7371 11.909 14.159C11.4871 14.581 11.25 15.1533 11.25 15.75C11.25 16.3467 11.4871 16.919 11.909 17.341C12.331 17.7629 12.9033 18 13.5 18C14.0967 18 14.669 17.7629 15.091 17.341C15.5129 16.919 15.75 16.3467 15.75 15.75C15.75 15.1533 15.5129 14.581 15.091 14.159C14.669 13.7371 14.0967 13.5 13.5 13.5H14.625C14.7561 13.4999 14.8831 13.4539 14.984 13.3701C15.0848 13.2863 15.1532 13.1699 15.1774 13.041L16.8649 4.041C16.8801 3.95982 16.8772 3.87628 16.8565 3.79633C16.8357 3.71638 16.7977 3.64198 16.7449 3.5784C16.6922 3.51483 16.6261 3.46365 16.5514 3.42849C16.4767 3.39334 16.3951 3.37508 16.3125 3.375H3.25125L2.79562 1.55137C2.76526 1.42963 2.69506 1.32154 2.5962 1.24428C2.49733 1.16702 2.37547 1.12503 2.25 1.125H0.5625ZM4.96687 12.375L3.48975 4.5H15.6352L14.1581 12.375H4.96687V12.375ZM6.75 15.75C6.75 16.0484 6.63147 16.3345 6.42049 16.5455C6.20952 16.7565 5.92337 16.875 5.625 16.875C5.32663 16.875 5.04048 16.7565 4.82951 16.5455C4.61853 16.3345 4.5 16.0484 4.5 15.75C4.5 15.4516 4.61853 15.1655 4.82951 14.9545C5.04048 14.7435 5.32663 14.625 5.625 14.625C5.92337 14.625 6.20952 14.7435 6.42049 14.9545C6.63147 15.1655 6.75 15.4516 6.75 15.75V15.75ZM14.625 15.75C14.625 16.0484 14.5065 16.3345 14.2955 16.5455C14.0845 16.7565 13.7984 16.875 13.5 16.875C13.2016 16.875 12.9155 16.7565 12.7045 16.5455C12.4935 16.3345 12.375 16.0484 12.375 15.75C12.375 15.4516 12.4935 15.1655 12.7045 14.9545C12.9155 14.7435 13.2016 14.625 13.5 14.625C13.7984 14.625 14.0845 14.7435 14.2955 14.9545C14.5065 15.1655 14.625 15.4516 14.625 15.75V15.75Z\"></path>\r\n                        </svg>','Stock Inward'),(7,'Main','SalesOrder','salesorder','Index','<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\r\n                            <path class=\"fill-secondary\" d=\"M5 10.5a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5zm0-2a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm0-2a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm0-2a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5z\"></path>\r\n                            <path d=\"M3 0h10a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-1h1v1a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v1H1V2a2 2 0 0 1 2-2z\"></path>\r\n                            <path d=\"M1 5v-.5a.5.5 0 0 1 1 0V5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0V8h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0v.5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1z\"></path>\r\n                        </svg>','Sales Orders'),(8,'Main','Inventory','inventory','Index','<svg width=\"18\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <path class=\"fill-secondary\" d=\"M3 4.5C3 4.36739 3.05268 4.24021 3.14645 4.14645C3.24021 4.05268 3.36739 4 3.5 4H9.5C9.63261 4 9.75979 4.05268 9.85355 4.14645C9.94732 4.24021 10 4.36739 10 4.5C10 4.63261 9.94732 4.75979 9.85355 4.85355C9.75979 4.94732 9.63261 5 9.5 5H3.5C3.36739 5 3.24021 4.94732 3.14645 4.85355C3.05268 4.75979 3 4.63261 3 4.5ZM3 6.5C3 6.36739 3.05268 6.24021 3.14645 6.14645C3.24021 6.05268 3.36739 6 3.5 6H9.5C9.63261 6 9.75979 6.05268 9.85355 6.14645C9.94732 6.24021 10 6.36739 10 6.5C10 6.63261 9.94732 6.75979 9.85355 6.85355C9.75979 6.94732 9.63261 7 9.5 7H3.5C3.36739 7 3.24021 6.94732 3.14645 6.85355C3.05268 6.75979 3 6.63261 3 6.5ZM3 8.5C3 8.36739 3.05268 8.24021 3.14645 8.14645C3.24021 8.05268 3.36739 8 3.5 8H9.5C9.63261 8 9.75979 8.05268 9.85355 8.14645C9.94732 8.24021 10 8.36739 10 8.5C10 8.63261 9.94732 8.75979 9.85355 8.85355C9.75979 8.94732 9.63261 9 9.5 9H3.5C3.36739 9 3.24021 8.94732 3.14645 8.85355C3.05268 8.75979 3 8.63261 3 8.5ZM3 10.5C3 10.3674 3.05268 10.2402 3.14645 10.1464C3.24021 10.0527 3.36739 10 3.5 10H9.5C9.63261 10 9.75979 10.0527 9.85355 10.1464C9.94732 10.2402 10 10.3674 10 10.5C10 10.6326 9.94732 10.7598 9.85355 10.8536C9.75979 10.9473 9.63261 11 9.5 11H3.5C3.36739 11 3.24021 10.9473 3.14645 10.8536C3.05268 10.7598 3 10.6326 3 10.5ZM3 12.5C3 12.3674 3.05268 12.2402 3.14645 12.1464C3.24021 12.0527 3.36739 12 3.5 12H9.5C9.63261 12 9.75979 12.0527 9.85355 12.1464C9.94732 12.2402 10 12.3674 10 12.5C10 12.6326 9.94732 12.7598 9.85355 12.8536C9.75979 12.9473 9.63261 13 9.5 13H3.5C3.36739 13 3.24021 12.9473 3.14645 12.8536C3.05268 12.7598 3 12.6326 3 12.5ZM11.5 4C11.3674 4 11.2402 4.05268 11.1464 4.14645C11.0527 4.24021 11 4.36739 11 4.5C11 4.63261 11.0527 4.75979 11.1464 4.85355C11.2402 4.94732 11.3674 5 11.5 5H12.5C12.6326 5 12.7598 4.94732 12.8536 4.85355C12.9473 4.75979 13 4.63261 13 4.5C13 4.36739 12.9473 4.24021 12.8536 4.14645C12.7598 4.05268 12.6326 4 12.5 4H11.5ZM11.5 6C11.3674 6 11.2402 6.05268 11.1464 6.14645C11.0527 6.24021 11 6.36739 11 6.5C11 6.63261 11.0527 6.75979 11.1464 6.85355C11.2402 6.94732 11.3674 7 11.5 7H12.5C12.6326 7 12.7598 6.94732 12.8536 6.85355C12.9473 6.75979 13 6.63261 13 6.5C13 6.36739 12.9473 6.24021 12.8536 6.14645C12.7598 6.05268 12.6326 6 12.5 6H11.5ZM11.5 8C11.3674 8 11.2402 8.05268 11.1464 8.14645C11.0527 8.24021 11 8.36739 11 8.5C11 8.63261 11.0527 8.75979 11.1464 8.85355C11.2402 8.94732 11.3674 9 11.5 9H12.5C12.6326 9 12.7598 8.94732 12.8536 8.85355C12.9473 8.75979 13 8.63261 13 8.5C13 8.36739 12.9473 8.24021 12.8536 8.14645C12.7598 8.05268 12.6326 8 12.5 8H11.5ZM11.5 10C11.3674 10 11.2402 10.0527 11.1464 10.1464C11.0527 10.2402 11 10.3674 11 10.5C11 10.6326 11.0527 10.7598 11.1464 10.8536C11.2402 10.9473 11.3674 11 11.5 11H12.5C12.6326 11 12.7598 10.9473 12.8536 10.8536C12.9473 10.7598 13 10.6326 13 10.5C13 10.3674 12.9473 10.2402 12.8536 10.1464C12.7598 10.0527 12.6326 10 12.5 10H11.5ZM11.5 12C11.3674 12 11.2402 12.0527 11.1464 12.1464C11.0527 12.2402 11 12.3674 11 12.5C11 12.6326 11.0527 12.7598 11.1464 12.8536C11.2402 12.9473 11.3674 13 11.5 13H12.5C12.6326 13 12.7598 12.9473 12.8536 12.8536C12.9473 12.7598 13 12.6326 13 12.5C13 12.3674 12.9473 12.2402 12.8536 12.1464C12.7598 12.0527 12.6326 12 12.5 12H11.5Z\"></path>\r\n                            <path d=\"M2.354 0.645978C2.29798 0.589911 2.22943 0.547966 2.154 0.523602C2.07858 0.499238 1.99845 0.493154 1.92021 0.505852C1.84197 0.518549 1.76787 0.549665 1.70403 0.596631C1.64018 0.643598 1.58842 0.70507 1.553 0.775978L1.053 1.77598C1.01815 1.84551 1.00001 1.92221 1 1.99998V15H0.5C0.367392 15 0.240215 15.0527 0.146447 15.1464C0.0526784 15.2402 0 15.3674 0 15.5C0 15.6326 0.0526784 15.7598 0.146447 15.8535C0.240215 15.9473 0.367392 16 0.5 16H15.5C15.6326 16 15.7598 15.9473 15.8536 15.8535C15.9473 15.7598 16 15.6326 16 15.5C16 15.3674 15.9473 15.2402 15.8536 15.1464C15.7598 15.0527 15.6326 15 15.5 15H15V1.99998C15 1.92221 14.9818 1.84551 14.947 1.77598L14.447 0.775978C14.4115 0.705251 14.3598 0.643947 14.296 0.597106C14.2323 0.550265 14.1583 0.519224 14.0802 0.506534C14.0021 0.493843 13.9221 0.499867 13.8468 0.524108C13.7715 0.54835 13.703 0.590117 13.647 0.645978L13 1.29298L12.354 0.645978C12.3076 0.599415 12.2524 0.562472 12.1916 0.537266C12.1309 0.512059 12.0658 0.499084 12 0.499084C11.9342 0.499084 11.8691 0.512059 11.8084 0.537266C11.7476 0.562472 11.6924 0.599415 11.646 0.645978L11 1.29298L10.354 0.645978C10.3076 0.599415 10.2524 0.562472 10.1916 0.537266C10.1309 0.512059 10.0658 0.499084 10 0.499084C9.93423 0.499084 9.86911 0.512059 9.80837 0.537266C9.74762 0.562472 9.69245 0.599415 9.646 0.645978L9 1.29298L8.354 0.645978C8.30755 0.599415 8.25238 0.562472 8.19163 0.537266C8.13089 0.512059 8.06577 0.499084 8 0.499084C7.93423 0.499084 7.86911 0.512059 7.80837 0.537266C7.74762 0.562472 7.69245 0.599415 7.646 0.645978L7 1.29298L6.354 0.645978C6.30755 0.599415 6.25238 0.562472 6.19163 0.537266C6.13089 0.512059 6.06577 0.499084 6 0.499084C5.93423 0.499084 5.86911 0.512059 5.80837 0.537266C5.74762 0.562472 5.69245 0.599415 5.646 0.645978L5 1.29298L4.354 0.645978C4.30755 0.599415 4.25238 0.562472 4.19163 0.537266C4.13089 0.512059 4.06577 0.499084 4 0.499084C3.93423 0.499084 3.86911 0.512059 3.80837 0.537266C3.74762 0.562472 3.69245 0.599415 3.646 0.645978L3 1.29298L2.354 0.645978ZM2.137 1.84398L2.647 2.35398C2.74076 2.44771 2.86792 2.50037 3.0005 2.50037C3.13308 2.50037 3.26024 2.44771 3.354 2.35398L4 1.70698L4.646 2.35398C4.69245 2.40054 4.74762 2.43748 4.80837 2.46269C4.86911 2.4879 4.93423 2.50087 5 2.50087C5.06577 2.50087 5.13089 2.4879 5.19163 2.46269C5.25238 2.43748 5.30755 2.40054 5.354 2.35398L6 1.70698L6.646 2.35398C6.69245 2.40054 6.74762 2.43748 6.80837 2.46269C6.86911 2.4879 6.93423 2.50087 7 2.50087C7.06577 2.50087 7.13089 2.4879 7.19163 2.46269C7.25238 2.43748 7.30755 2.40054 7.354 2.35398L8 1.70698L8.646 2.35398C8.69245 2.40054 8.74762 2.43748 8.80837 2.46269C8.86911 2.4879 8.93423 2.50087 9 2.50087C9.06577 2.50087 9.13089 2.4879 9.19163 2.46269C9.25238 2.43748 9.30755 2.40054 9.354 2.35398L10 1.70698L10.646 2.35398C10.6924 2.40054 10.7476 2.43748 10.8084 2.46269C10.8691 2.4879 10.9342 2.50087 11 2.50087C11.0658 2.50087 11.1309 2.4879 11.1916 2.46269C11.2524 2.43748 11.3076 2.40054 11.354 2.35398L12 1.70698L12.646 2.35398C12.6924 2.40054 12.7476 2.43748 12.8084 2.46269C12.8691 2.4879 12.9342 2.50087 13 2.50087C13.0658 2.50087 13.1309 2.4879 13.1916 2.46269C13.2524 2.43748 13.3076 2.40054 13.354 2.35398L13.863 1.84398L14 2.11798V15H2V2.11798L2.137 1.84398Z\"></path>\r\n                        </svg>','Inventory'),(9,'Main','StockAudit','stockaudit','Index','<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\r\n                            <path fill-rule=\"evenodd\" d=\"m8 3.293 6 6V13.5a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 13.5V9.293l6-6zm5-.793V6l-2-2V2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5z\" />\r\n                            <path class=\"fill-secondary\" fill-rule=\"evenodd\" d=\"M7.293 1.5a1 1 0 0 1 1.414 0l6.647 6.646a.5.5 0 0 1-.708.708L8 2.207 1.354 8.854a.5.5 0 1 1-.708-.708L7.293 1.5z\" />\r\n                        </svg>','Stock Audit');
/*!40000 ALTER TABLE `menu` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `menuaccess`
--

DROP TABLE IF EXISTS `menuaccess`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `menuaccess` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `MenuId` int NOT NULL,
  `RoleId` int NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `MenuId` (`MenuId`),
  KEY `RoleId` (`RoleId`),
  CONSTRAINT `menuaccess_ibfk_1` FOREIGN KEY (`MenuId`) REFERENCES `menu` (`Id`),
  CONSTRAINT `menuaccess_ibfk_2` FOREIGN KEY (`RoleId`) REFERENCES `userrole` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `menuaccess`
--

LOCK TABLES `menuaccess` WRITE;
/*!40000 ALTER TABLE `menuaccess` DISABLE KEYS */;
INSERT INTO `menuaccess` VALUES (1,1,1),(2,2,1),(3,3,1),(4,4,1),(5,5,1),(6,6,1),(7,7,1),(8,8,1),(9,9,1),(10,1,3),(11,2,3),(12,3,3),(13,4,3),(14,5,3),(15,6,3),(16,7,3),(17,8,3),(18,9,3),(19,6,2),(20,7,2),(21,8,2),(22,9,2),(23,4,2);
/*!40000 ALTER TABLE `menuaccess` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `movementtype`
--

DROP TABLE IF EXISTS `movementtype`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `movementtype` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `MovementType` varchar(32) NOT NULL,
  `IsDeleted` bit(1) DEFAULT b'0',
  `CreatedOn` datetime NOT NULL,
  `CreatedBy` int NOT NULL,
  `ModifiedOn` datetime DEFAULT NULL,
  `ModifiedBy` int DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `movementtype`
--

LOCK TABLES `movementtype` WRITE;
/*!40000 ALTER TABLE `movementtype` DISABLE KEYS */;
INSERT INTO `movementtype` VALUES (1,'Purchase',_binary '\0','2023-05-26 15:25:20',2,NULL,NULL),(2,'Damage',_binary '\0','2023-05-26 15:25:20',1,NULL,NULL),(3,'Sale',_binary '\0','2023-05-26 15:25:20',1,NULL,NULL);
/*!40000 ALTER TABLE `movementtype` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `outtype`
--

DROP TABLE IF EXISTS `outtype`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `outtype` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `TYPE` varchar(64) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `outtype`
--

LOCK TABLES `outtype` WRITE;
/*!40000 ALTER TABLE `outtype` DISABLE KEYS */;
INSERT INTO `outtype` VALUES (1,'Direct Out'),(2,'Normal Out');
/*!40000 ALTER TABLE `outtype` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `product`
--

DROP TABLE IF EXISTS `product`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `product` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `ProductSKU` varchar(100) NOT NULL,
  `Name` varchar(500) DEFAULT NULL,
  `CategoryId` int DEFAULT NULL,
  `ManufacturerId` int DEFAULT NULL,
  `EANCode` varchar(64) DEFAULT NULL,
  `Price` double(10,2) DEFAULT NULL,
  `IsDeleted` bit(1) NOT NULL DEFAULT b'0',
  `IsActive` int NOT NULL DEFAULT '1',
  `CreatedOn` datetime DEFAULT CURRENT_TIMESTAMP,
  `CreatedBy` int DEFAULT NULL,
  `ModifiedOn` datetime DEFAULT NULL,
  `ModifiedBy` int DEFAULT NULL,
  PRIMARY KEY (`Id`),
  UNIQUE KEY `ProductSku` (`ProductSKU`),
  KEY `productsprofile_ibfk_1` (`CategoryId`),
  KEY `productsprofile_ibfk_2` (`ManufacturerId`),
  CONSTRAINT `productsprofile_ibfk_1` FOREIGN KEY (`CategoryId`) REFERENCES `category` (`Id`),
  CONSTRAINT `productsprofile_ibfk_2` FOREIGN KEY (`ManufacturerId`) REFERENCES `manufacturer` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `product`
--

LOCK TABLES `product` WRITE;
/*!40000 ALTER TABLE `product` DISABLE KEYS */;
INSERT INTO `product` VALUES (3,'test334','test334',1,3,'test334',1.00,_binary '',1,'2023-08-23 15:10:51',NULL,'2023-08-24 18:04:04',8),(4,'test310','test310',2,4,'test310',1.00,_binary '\0',1,'2023-08-23 15:10:51',NULL,NULL,NULL),(5,'<string>','test',2,4,NULL,NULL,_binary '\0',1,'2023-08-23 17:31:58',7,NULL,NULL),(8,'string','string',1,3,'string',0.00,_binary '\0',0,'2023-08-24 00:00:00',8,'2023-08-28 17:14:53',1),(10,'string2','string',3,3,'string',0.00,_binary '',0,'2023-08-25 16:07:31',7,'2023-08-28 17:16:21',8),(14,'1',NULL,NULL,NULL,NULL,NULL,_binary '\0',1,'2023-08-28 17:59:05',1,NULL,NULL);
/*!40000 ALTER TABLE `product` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `productserialnumber`
--

DROP TABLE IF EXISTS `productserialnumber`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `productserialnumber` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `StockInwardItemInformationId` int NOT NULL,
  `SerialNumber` varchar(16) NOT NULL,
  `IsScanned` tinyint(1) NOT NULL DEFAULT '0',
  `ScanDate` datetime DEFAULT NULL,
  `IsDamage` tinyint(1) DEFAULT '0',
  `DamageDate` datetime DEFAULT NULL,
  `CreatedOn` datetime DEFAULT CURRENT_TIMESTAMP,
  `CreatedBy` int DEFAULT NULL,
  `ModifiedOn` datetime DEFAULT NULL,
  `ModifiedBy` int DEFAULT NULL,
  PRIMARY KEY (`Id`),
  UNIQUE KEY `SerialNumber_UNIQUE` (`SerialNumber`),
  KEY `productserialnumber_ibfk_1_idx` (`StockInwardItemInformationId`),
  CONSTRAINT `productserialnumber_ibfk_1` FOREIGN KEY (`StockInwardItemInformationId`) REFERENCES `stockinwarditeminformation` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `productserialnumber`
--

LOCK TABLES `productserialnumber` WRITE;
/*!40000 ALTER TABLE `productserialnumber` DISABLE KEYS */;
INSERT INTO `productserialnumber` VALUES (4,5,'23456787',1,'2023-08-28 18:14:59',0,NULL,'2023-08-28 17:59:05',1,'2023-08-28 18:14:59',1);
/*!40000 ALTER TABLE `productserialnumber` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `productserialnumberhistory`
--

DROP TABLE IF EXISTS `productserialnumberhistory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `productserialnumberhistory` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `ProductSerialNumberId` int NOT NULL,
  `ActionTypeId` int DEFAULT NULL,
  `ActionDate` datetime DEFAULT NULL,
  `WarehouseId` int DEFAULT NULL,
  `StockInOutOrderNumber` varchar(32) DEFAULT NULL,
  `BuyerSellerId` int DEFAULT NULL,
  `CreatedBy` int DEFAULT NULL,
  `CreatedOn` datetime DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`Id`),
  KEY `ActionTypeId` (`ActionTypeId`),
  KEY `WarehouseId` (`WarehouseId`),
  KEY `ProductSerialNumberId` (`ProductSerialNumberId`),
  CONSTRAINT `productserialnumberhistory_ibfk_2` FOREIGN KEY (`ActionTypeId`) REFERENCES `actiontype` (`Id`),
  CONSTRAINT `productserialnumberhistory_ibfk_3` FOREIGN KEY (`WarehouseId`) REFERENCES `warehouse` (`Id`),
  CONSTRAINT `productserialnumberhistory_ibfk_4` FOREIGN KEY (`ProductSerialNumberId`) REFERENCES `productserialnumber` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `productserialnumberhistory`
--

LOCK TABLES `productserialnumberhistory` WRITE;
/*!40000 ALTER TABLE `productserialnumberhistory` DISABLE KEYS */;
INSERT INTO `productserialnumberhistory` VALUES (8,4,1,'2023-08-28 18:06:18',3,'INV213',3,1,'2023-08-28 18:06:18');
/*!40000 ALTER TABLE `productserialnumberhistory` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `roles`
--

DROP TABLE IF EXISTS `roles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `roles` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Role` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_cs_0900_ai_ci NOT NULL,
  `IsDeleted` bit(1) NOT NULL DEFAULT b'0',
  `CreatedOn` datetime DEFAULT NULL,
  `CreatedBy` int DEFAULT NULL,
  `ModifiedOn` datetime DEFAULT NULL,
  `ModifiedBy` int DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_cs_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `roles`
--

LOCK TABLES `roles` WRITE;
/*!40000 ALTER TABLE `roles` DISABLE KEYS */;
INSERT INTO `roles` VALUES (1,'Admin',_binary '\0',NULL,NULL,NULL,NULL),(2,'User',_binary '\0',NULL,NULL,NULL,NULL),(3,'Billing',_binary '\0',NULL,NULL,NULL,NULL),(4,'Dispatch',_binary '\0',NULL,NULL,NULL,NULL),(5,'Warehouse',_binary '\0',NULL,NULL,NULL,NULL),(6,'Online',_binary '\0',NULL,NULL,NULL,NULL);
/*!40000 ALTER TABLE `roles` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `saleorderdispatchserialnumber`
--

DROP TABLE IF EXISTS `saleorderdispatchserialnumber`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `saleorderdispatchserialnumber` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `SalesOrderItemInformationId` int DEFAULT NULL,
  `ProductSerialNumberId` int DEFAULT NULL,
  `IsDispatched` tinyint(1) DEFAULT '0',
  `IsDeleted` tinyint(1) DEFAULT '0',
  `IsReturn` tinyint(1) DEFAULT '0',
  `IsDamage` tinyint(1) DEFAULT '0',
  `IsReturnToManufacturer` tinyint(1) DEFAULT '0',
  `DispatchDate` datetime DEFAULT NULL,
  `ReturnDate` datetime DEFAULT NULL,
  `DamageDate` datetime DEFAULT NULL,
  `CreatedOn` datetime DEFAULT CURRENT_TIMESTAMP,
  `CreatedBy` int DEFAULT NULL,
  `ModifiedOn` datetime DEFAULT NULL,
  `ModifiedBy` int DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `SalesOrderItemInformationId` (`SalesOrderItemInformationId`),
  KEY `ProductSerialNumberId` (`ProductSerialNumberId`),
  CONSTRAINT `saleorderdispatchserialnumber_ibfk_1` FOREIGN KEY (`SalesOrderItemInformationId`) REFERENCES `salesorderitemsinformation` (`Id`),
  CONSTRAINT `saleorderdispatchserialnumber_ibfk_2` FOREIGN KEY (`ProductSerialNumberId`) REFERENCES `productserialnumber` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `saleorderdispatchserialnumber`
--

LOCK TABLES `saleorderdispatchserialnumber` WRITE;
/*!40000 ALTER TABLE `saleorderdispatchserialnumber` DISABLE KEYS */;
/*!40000 ALTER TABLE `saleorderdispatchserialnumber` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `saleorderstatus`
--

DROP TABLE IF EXISTS `saleorderstatus`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `saleorderstatus` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `StatusType` varchar(32) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `saleorderstatus`
--

LOCK TABLES `saleorderstatus` WRITE;
/*!40000 ALTER TABLE `saleorderstatus` DISABLE KEYS */;
INSERT INTO `saleorderstatus` VALUES (1,'Dispatched'),(2,'Pending'),(3,'InProgress');
/*!40000 ALTER TABLE `saleorderstatus` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `salesorderbasicinformation`
--

DROP TABLE IF EXISTS `salesorderbasicinformation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `salesorderbasicinformation` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `SalesOrderNumber` varchar(64) DEFAULT NULL,
  `DateofSale` datetime DEFAULT NULL,
  `VendorId` int DEFAULT NULL,
  `MovementTypeId` int DEFAULT NULL,
  `WarehouseId` int DEFAULT NULL,
  `SaleOrderStatusId` int DEFAULT NULL,
  `OutTypeId` int DEFAULT NULL,
  `IsDeleted` tinyint(1) DEFAULT '0',
  `CreatedBy` int DEFAULT NULL,
  `CreatedOn` datetime DEFAULT CURRENT_TIMESTAMP,
  `ModifiedBy` int DEFAULT NULL,
  `ModifiedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `WarehouseId` (`WarehouseId`),
  KEY `CustomerId` (`VendorId`),
  KEY `SaleOrderStatusId` (`SaleOrderStatusId`),
  KEY `salesorderbasicinformation_ibfk_1_idx` (`MovementTypeId`),
  KEY `OutType` (`OutTypeId`),
  CONSTRAINT `salesorderbasicinformation_ibfk_1` FOREIGN KEY (`MovementTypeId`) REFERENCES `salesordermovementtype` (`Id`),
  CONSTRAINT `salesorderbasicinformation_ibfk_4` FOREIGN KEY (`WarehouseId`) REFERENCES `warehouse` (`Id`),
  CONSTRAINT `salesorderbasicinformation_ibfk_5` FOREIGN KEY (`VendorId`) REFERENCES `vendor` (`Id`),
  CONSTRAINT `salesorderbasicinformation_ibfk_6` FOREIGN KEY (`SaleOrderStatusId`) REFERENCES `saleorderstatus` (`Id`),
  CONSTRAINT `salesorderbasicinformation_ibfk_7` FOREIGN KEY (`OutTypeId`) REFERENCES `outtype` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `salesorderbasicinformation`
--

LOCK TABLES `salesorderbasicinformation` WRITE;
/*!40000 ALTER TABLE `salesorderbasicinformation` DISABLE KEYS */;
/*!40000 ALTER TABLE `salesorderbasicinformation` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `salesorderitemsinformation`
--

DROP TABLE IF EXISTS `salesorderitemsinformation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `salesorderitemsinformation` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `ProductId` int DEFAULT NULL,
  `SalesOrderBasicInformationId` int DEFAULT NULL,
  `Quantity` int DEFAULT NULL,
  `IsDeleted` tinyint(1) DEFAULT '0',
  `CreatedBy` int DEFAULT NULL,
  `CreatedOn` datetime DEFAULT CURRENT_TIMESTAMP,
  `ModifiedBy` int DEFAULT NULL,
  `ModifiedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `SalesOrderBasicInformationId` (`SalesOrderBasicInformationId`),
  KEY `ProductId` (`ProductId`),
  CONSTRAINT `salesorderitemsinformation_ibfk_1` FOREIGN KEY (`ProductId`) REFERENCES `product` (`Id`),
  CONSTRAINT `salesorderitemsinformation_ibfk_3` FOREIGN KEY (`SalesOrderBasicInformationId`) REFERENCES `salesorderbasicinformation` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `salesorderitemsinformation`
--

LOCK TABLES `salesorderitemsinformation` WRITE;
/*!40000 ALTER TABLE `salesorderitemsinformation` DISABLE KEYS */;
/*!40000 ALTER TABLE `salesorderitemsinformation` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `salesordermovementtype`
--

DROP TABLE IF EXISTS `salesordermovementtype`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `salesordermovementtype` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `MovementType` varchar(64) DEFAULT NULL,
  `CreatedBy` int DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `ModifiedBy` int DEFAULT NULL,
  `ModifiedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `salesordermovementtype`
--

LOCK TABLES `salesordermovementtype` WRITE;
/*!40000 ALTER TABLE `salesordermovementtype` DISABLE KEYS */;
INSERT INTO `salesordermovementtype` VALUES (1,'Sale',2,NULL,NULL,NULL),(2,'Return to Manufacturer',2,NULL,NULL,NULL);
/*!40000 ALTER TABLE `salesordermovementtype` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `statusprofile`
--

DROP TABLE IF EXISTS `statusprofile`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `statusprofile` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Status` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `statusprofile`
--

LOCK TABLES `statusprofile` WRITE;
/*!40000 ALTER TABLE `statusprofile` DISABLE KEYS */;
INSERT INTO `statusprofile` VALUES (1,'Done'),(2,'Pending');
/*!40000 ALTER TABLE `statusprofile` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `stockauditinitiation`
--

DROP TABLE IF EXISTS `stockauditinitiation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `stockauditinitiation` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `WarehouseId` int NOT NULL,
  `AuditInitiatedOn` datetime DEFAULT NULL,
  `IsAuditPassed` tinyint(1) DEFAULT '0',
  `IsAuditDone` tinyint(1) DEFAULT '0',
  `CreatedOn` datetime DEFAULT NULL,
  `CreatedBy` int DEFAULT NULL,
  `ModifiedOn` datetime DEFAULT NULL,
  `ModifiedBy` int DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `WarehouseId` (`WarehouseId`),
  CONSTRAINT `stockauditinitiation_ibfk_1` FOREIGN KEY (`WarehouseId`) REFERENCES `warehouse` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `stockauditinitiation`
--

LOCK TABLES `stockauditinitiation` WRITE;
/*!40000 ALTER TABLE `stockauditinitiation` DISABLE KEYS */;
INSERT INTO `stockauditinitiation` VALUES (4,3,NULL,1,1,NULL,NULL,NULL,NULL),(5,3,'2023-06-23 00:00:00',1,1,'2023-08-23 17:19:40',7,'2023-08-24 14:23:37',1),(8,6,'2023-08-28 11:50:28',1,1,'2023-08-28 17:20:36',1,'2023-08-28 17:24:49',1);
/*!40000 ALTER TABLE `stockauditinitiation` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `stockaudititem`
--

DROP TABLE IF EXISTS `stockaudititem`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `stockaudititem` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `StockAuditInitiationId` int NOT NULL,
  `CategoryId` int NOT NULL,
  `ProductId` int NOT NULL,
  `ProductSerialNumberId` int NOT NULL,
  `IsAuditDone` tinyint(1) DEFAULT '0',
  `CreatedOn` datetime DEFAULT CURRENT_TIMESTAMP,
  `CreatedBy` int DEFAULT NULL,
  `ModifiedOn` datetime DEFAULT NULL,
  `ModifiedBy` int DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `StockAuditInitiationId` (`StockAuditInitiationId`),
  KEY `ProductSerialNumberId` (`ProductSerialNumberId`),
  KEY `CategoryId` (`CategoryId`),
  KEY `ProductId` (`ProductId`),
  CONSTRAINT `stockaudititem_ibfk_1` FOREIGN KEY (`StockAuditInitiationId`) REFERENCES `stockauditinitiation` (`Id`),
  CONSTRAINT `stockaudititem_ibfk_2` FOREIGN KEY (`ProductSerialNumberId`) REFERENCES `productserialnumber` (`Id`),
  CONSTRAINT `stockaudititem_ibfk_3` FOREIGN KEY (`CategoryId`) REFERENCES `category` (`Id`),
  CONSTRAINT `stockaudititem_ibfk_4` FOREIGN KEY (`ProductId`) REFERENCES `product` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `stockaudititem`
--

LOCK TABLES `stockaudititem` WRITE;
/*!40000 ALTER TABLE `stockaudititem` DISABLE KEYS */;
/*!40000 ALTER TABLE `stockaudititem` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `stockinwardbasicinformation`
--

DROP TABLE IF EXISTS `stockinwardbasicinformation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `stockinwardbasicinformation` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `InvoiceNumber` varchar(32) NOT NULL,
  `PurchaseOrderNumber` varchar(32) DEFAULT NULL,
  `DateOfPurchase` datetime NOT NULL,
  `VendorId` int NOT NULL,
  `MoveTypeId` int NOT NULL,
  `WarehouseId` int NOT NULL,
  `ItemTypeId` int NOT NULL,
  `CreatedBy` int NOT NULL,
  `CreatedOn` datetime DEFAULT CURRENT_TIMESTAMP,
  `Status` int NOT NULL DEFAULT '0',
  PRIMARY KEY (`Id`),
  KEY `MoveTypeId` (`MoveTypeId`),
  KEY `stockinwardbasicinformation_ibfk_1` (`VendorId`),
  KEY `idx_warehouse_location_id` (`WarehouseId`),
  KEY `ItemTypeId` (`ItemTypeId`),
  CONSTRAINT `stockinwardbasicinformation_ibfk_1` FOREIGN KEY (`VendorId`) REFERENCES `vendor` (`Id`),
  CONSTRAINT `stockinwardbasicinformation_ibfk_2` FOREIGN KEY (`MoveTypeId`) REFERENCES `movementtype` (`Id`),
  CONSTRAINT `stockinwardbasicinformation_ibfk_3` FOREIGN KEY (`WarehouseId`) REFERENCES `warehouse` (`Id`),
  CONSTRAINT `stockinwardbasicinformation_ibfk_4` FOREIGN KEY (`ItemTypeId`) REFERENCES `itemtype` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `stockinwardbasicinformation`
--

LOCK TABLES `stockinwardbasicinformation` WRITE;
/*!40000 ALTER TABLE `stockinwardbasicinformation` DISABLE KEYS */;
INSERT INTO `stockinwardbasicinformation` VALUES (3,'INV213','1','2023-08-26 00:00:00',3,1,3,1,1,'2023-08-28 16:33:03',0),(6,'INV28','1','2023-08-26 00:00:00',3,1,3,1,1,'2023-08-28 16:33:30',0),(7,'INV28-01','1','2023-08-23 00:00:00',3,1,3,1,1,'2023-08-28 17:11:10',0);
/*!40000 ALTER TABLE `stockinwardbasicinformation` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `stockinwarditeminformation`
--

DROP TABLE IF EXISTS `stockinwarditeminformation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `stockinwarditeminformation` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `StockInwardBasicInformationId` int NOT NULL,
  `ProductId` int NOT NULL,
  `Quantity` int NOT NULL,
  `BarcodeGenerated` bit(1) NOT NULL DEFAULT b'0',
  `Printed` int NOT NULL DEFAULT '0',
  `IsScanCompleted` tinyint(1) NOT NULL DEFAULT '0',
  `Price` decimal(10,2) DEFAULT '0.00',
  `CreatedOn` datetime DEFAULT CURRENT_TIMESTAMP,
  `CreatedBy` int NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `StockInwardBasicInformationId` (`StockInwardBasicInformationId`),
  KEY `ProductId` (`ProductId`),
  CONSTRAINT `stockinwarditeminformation_ibfk_1` FOREIGN KEY (`StockInwardBasicInformationId`) REFERENCES `stockinwardbasicinformation` (`Id`),
  CONSTRAINT `stockinwarditeminformation_ibfk_2` FOREIGN KEY (`ProductId`) REFERENCES `product` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `stockinwarditeminformation`
--

LOCK TABLES `stockinwarditeminformation` WRITE;
/*!40000 ALTER TABLE `stockinwarditeminformation` DISABLE KEYS */;
INSERT INTO `stockinwarditeminformation` VALUES (5,3,14,1,_binary '',1,0,108.32,'2023-08-28 17:59:05',1);
/*!40000 ALTER TABLE `stockinwarditeminformation` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user`
--

DROP TABLE IF EXISTS `user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `user` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Name` varchar(64) NOT NULL,
  `Email` varchar(64) DEFAULT NULL,
  `Mobile` varchar(10) DEFAULT NULL,
  `Status` int DEFAULT NULL,
  `UserRoleId` int DEFAULT NULL,
  `WarehouseId` int DEFAULT NULL,
  `IsDeleted` tinyint(1) DEFAULT '0',
  `CreatedBy` int DEFAULT NULL,
  `CreatedOn` datetime DEFAULT CURRENT_TIMESTAMP,
  `ModifiedBy` int DEFAULT NULL,
  `ModifiedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `UserRoleId` (`UserRoleId`),
  KEY `WarehouseId` (`WarehouseId`),
  CONSTRAINT `user_ibfk_1` FOREIGN KEY (`UserRoleId`) REFERENCES `userrole` (`Id`),
  CONSTRAINT `user_ibfk_2` FOREIGN KEY (`WarehouseId`) REFERENCES `warehouse` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user`
--

LOCK TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user` VALUES (1,'user12@gmail.com','user12','1231231231',1,2,NULL,0,NULL,'2023-08-23 13:55:09',NULL,NULL),(5,'user1','user1@gmail.com','9191991919',1,1,3,0,1,'2023-08-23 14:06:47',NULL,NULL),(6,'user1','user1@gmail.com','9191991919',1,1,3,0,1,'2023-08-23 14:11:35',NULL,NULL),(7,'user2','user2@gmail.com','8181818188',1,1,3,0,1,'2023-08-23 14:18:58',NULL,NULL);
/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `userrole`
--

DROP TABLE IF EXISTS `userrole`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `userrole` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Name` varchar(64) NOT NULL,
  `IsDeleted` tinyint(1) NOT NULL DEFAULT '0',
  `CreatedOn` datetime DEFAULT CURRENT_TIMESTAMP,
  `CreatedBy` int DEFAULT NULL,
  `ModifiedOn` datetime DEFAULT NULL,
  `ModifiedBy` int DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `userrole`
--

LOCK TABLES `userrole` WRITE;
/*!40000 ALTER TABLE `userrole` DISABLE KEYS */;
INSERT INTO `userrole` VALUES (1,'Admin',0,'2023-08-23 12:51:43',1,'2023-08-23 12:51:43',1),(2,'User',0,'2023-08-23 12:51:43',1,'2023-08-23 12:51:43',1),(3,'Manager',0,'2023-08-26 14:32:26',1,NULL,NULL);
/*!40000 ALTER TABLE `userrole` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vendor`
--

DROP TABLE IF EXISTS `vendor`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vendor` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `CompanyName` varchar(64) NOT NULL,
  `ContactName` varchar(64) DEFAULT NULL,
  `ContactMobile` varchar(16) DEFAULT NULL,
  `ContactEmail` varchar(64) DEFAULT NULL,
  `CompanyTypeId` int DEFAULT NULL,
  `VendorTypeId` int DEFAULT NULL,
  `Address` varchar(256) DEFAULT NULL,
  `GST` varchar(16) DEFAULT NULL,
  `IsActive` int DEFAULT NULL,
  `IsDeleted` bit(1) DEFAULT b'0',
  `CreatedOn` datetime DEFAULT CURRENT_TIMESTAMP,
  `CreatedBy` int DEFAULT NULL,
  `ModifiedOn` datetime DEFAULT NULL,
  `ModifiedBy` int DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `VendorTypeId` (`VendorTypeId`),
  KEY `CompanyTypeId` (`CompanyTypeId`),
  CONSTRAINT `vendor_ibfk_1` FOREIGN KEY (`VendorTypeId`) REFERENCES `vendortype` (`Id`),
  CONSTRAINT `vendor_ibfk_2` FOREIGN KEY (`CompanyTypeId`) REFERENCES `companytype` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vendor`
--

LOCK TABLES `vendor` WRITE;
/*!40000 ALTER TABLE `vendor` DISABLE KEYS */;
INSERT INTO `vendor` VALUES (3,'Sugar','string','string','string',2,1,'string','string',1,_binary '\0','2023-08-23 11:30:00',1,'2023-08-24 11:41:56',1),(4,'test','testname','testmobile','test@gmail.com',1,1,'testaddress','testgst',1,_binary '','2023-08-25 09:57:30',1,'2023-08-25 15:00:25',1),(5,'Onida','Test1','8181818181','test1@gmail.com',1,1,'Delhi','18',1,_binary '\0','2023-08-25 10:51:39',1,NULL,NULL),(6,'NewComapny','Test1','8181881818','8181@gmail.com',1,1,'NSP','10',1,_binary '\0','2023-08-25 12:58:50',1,NULL,NULL),(7,'NewComapny','Test1','8181881818','8181@gmail.com',1,1,'NSP','10',1,_binary '\0','2023-08-25 12:59:11',1,NULL,NULL),(8,'HarshThakur','A','381321312','a@gmail.com',1,1,'Palam','GST4268432',1,_binary '','2023-08-25 14:31:43',1,'2023-08-25 14:59:38',1),(9,'Harsh','A','381321312','a@gmail.com',1,1,'Palam','GST4268432',1,_binary '\0','2023-08-25 14:59:53',1,NULL,NULL),(11,'testing','testing name','9876543234','testing@gmail.com',1,2,'testing address','testing gst',1,_binary '','2023-08-28 16:37:34',1,'2023-08-28 16:40:02',1);
/*!40000 ALTER TABLE `vendor` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vendortype`
--

DROP TABLE IF EXISTS `vendortype`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vendortype` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `VendorType` varchar(64) NOT NULL,
  `IsDeleted` bit(1) NOT NULL DEFAULT b'0',
  `CreatedOn` datetime DEFAULT NULL,
  `CreatedBy` int DEFAULT NULL,
  `ModifiedOn` datetime DEFAULT NULL,
  `ModifiedBy` int DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `vendortype`
--

LOCK TABLES `vendortype` WRITE;
/*!40000 ALTER TABLE `vendortype` DISABLE KEYS */;
INSERT INTO `vendortype` VALUES (1,'Customer',_binary '\0','2023-08-23 11:23:38',1,NULL,NULL),(2,'Supplier',_binary '\0','2023-08-23 11:23:38',1,NULL,NULL);
/*!40000 ALTER TABLE `vendortype` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `warehouse`
--

DROP TABLE IF EXISTS `warehouse`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `warehouse` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `LocationName` varchar(64) DEFAULT NULL,
  `WarehouseTypeId` int DEFAULT NULL,
  `MaxCapacity` decimal(10,2) DEFAULT NULL,
  `Address` varchar(256) DEFAULT NULL,
  `Description` varchar(512) DEFAULT NULL,
  `IsActive` int DEFAULT NULL,
  `IsDeleted` bit(1) NOT NULL DEFAULT b'0',
  `CreatedOn` datetime DEFAULT NULL,
  `CreatedBy` int DEFAULT NULL,
  `ModifiedOn` datetime DEFAULT NULL,
  `ModifiedBy` int DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `warehouse_ibfk_1` (`WarehouseTypeId`),
  CONSTRAINT `warehouse_ibfk_1` FOREIGN KEY (`WarehouseTypeId`) REFERENCES `warehousetype` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `warehouse`
--

LOCK TABLES `warehouse` WRITE;
/*!40000 ALTER TABLE `warehouse` DISABLE KEYS */;
INSERT INTO `warehouse` VALUES (3,'Nasik',1,20.00,'Mumbai','Lorem Ipsum1',1,_binary '\0','2023-08-22 17:43:05',1,'2023-08-24 11:43:39',NULL),(4,'Saitama',1,432.23,'Saitama Prefecture, Japan','',1,_binary '\0','2023-08-23 11:18:11',1,NULL,NULL),(5,'1',1,25.00,'NSP','NSP',1,_binary '\0','2023-08-23 12:47:53',1,NULL,NULL),(6,'testdelhi',1,102.10,'nsp','test',1,_binary '','2023-08-28 14:21:17',1,'2023-08-28 14:47:48',1),(7,'test',1,2.00,'string','string',0,_binary '\0','2023-08-28 14:59:22',1,'2023-08-28 15:14:11',1),(8,'',2,109.00,'test','test',1,_binary '','2023-08-28 15:20:22',1,'2023-08-28 15:30:56',1);
/*!40000 ALTER TABLE `warehouse` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `warehousetype`
--

DROP TABLE IF EXISTS `warehousetype`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `warehousetype` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Type` varchar(64) DEFAULT NULL,
  `IsDeleted` bit(1) NOT NULL DEFAULT b'0',
  `CreatedOn` datetime DEFAULT NULL,
  `CreatedBy` int DEFAULT NULL,
  `ModifiedOn` datetime DEFAULT NULL,
  `ModifiedBy` int DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `warehousetype`
--

LOCK TABLES `warehousetype` WRITE;
/*!40000 ALTER TABLE `warehousetype` DISABLE KEYS */;
INSERT INTO `warehousetype` VALUES (1,'Invoice',_binary '\0','2023-08-22 17:42:58',1,'2023-08-22 17:42:58',1),(2,'test',_binary '\0','2023-08-22 17:42:58',1,NULL,NULL);
/*!40000 ALTER TABLE `warehousetype` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping events for database 'inventory_db'
--

--
-- Dumping routines for database 'inventory_db'
--
/*!50003 DROP FUNCTION IF EXISTS `CheckForSalesOrderedOrNot` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` FUNCTION `CheckForSalesOrderedOrNot`(
	_productSerialNumberId INT
) RETURNS int
BEGIN
	DECLARE _result INT;
	SET _result = 
		(
			SELECT !COUNT(1)>0 
			FROM saleorderdispatchserialnumber s 
			WHERE s.ProductSerialNumberId = _productSerialNumberId
		);
	RETURN _result;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `CheckSerialNoExistInWarehouse` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` FUNCTION `CheckSerialNoExistInWarehouse`(
	_serialNumber varchar(16),
	_location varchar(32)
) RETURNS int
BEGIN
	DECLARE serialId int;
	SET serialId = ( SELECT 
			ps.Id
		FROM 
			productserialnumber ps
		INNER JOIN 
			saleorderdispatchserialnumber sdn 
		ON 
			sdn.ProductSerialNumberId = ps.Id
		INNER JOIN 
			stockinwarditeminformation sii
		ON 
			ps.StockInwardItemInformationId = sii.Id
		INNER JOIN 
			stockinwardbasicinformation sib
		ON 
			sii.StockInwardBasicInformationId = sib.Id
		INNER JOIN 
			warehouse w
		ON 
			sib.WarehouseId = w.Id
		WHERE 
			w.LocationName = _location 
		AND 
			ps.IsScanned = 1 
		AND NOT EXISTS (
				SELECT 
					count(1) 
				FROM 
					saleorderdispatchserialnumber 
				WHERE 
					ProductSerialNumberId = (
							SELECT 
								id 
							FROM 
								productserialnumber 
							WHERE 
								SerialNumber = _serialNumber
							)
						)
		AND 
			ps.SerialNumber = _serialNumber);
			
	RETURN serialId ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `CheckSerialNumberIsDamage` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` FUNCTION `CheckSerialNumberIsDamage`(
	_id int,
	_endDate date
) RETURNS int
BEGIN
	RETURN (SELECT COALESCE(
			    (
			        SELECT 
						1
			        FROM
						productserialnumber
			        WHERE 
						Id = _id
			        AND (
						DamageDate 
						IS NULL OR 
						DamageDate <= _endDate)
			        LIMIT 1
			    ),
			    0
			));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `countIscannedZero` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` FUNCTION `countIscannedZero`(
	_id int
) RETURNS int
BEGIN
	DECLARE result int ;
	SET result = ( SELECT 
			COUNT(*) 
		FROM 
			productserialnumber 
		WHERE 
			IsScanned = 0 
		AND 
			id = _id);
	RETURN result;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `fn_function` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` FUNCTION `fn_function`(
	_pdId int
) RETURNS int
BEGIN
	DECLARE 
		_statusCount int;
	SELECT
		COUNT(0)
	INTO 
		_statusCount
	FROM 
		salesorderitemsinformation soii 
	INNER JOIN 
		salesorderbasicinformation sobi
	ON 
		soii.SalesOrderBasicInformationId = sobi.Id 
	WHERE
	CASE  
		sobi.SaleOrderStatusId = 3 
    WHEN 
		soii.ProductId = _pdId 
    THEN 
		sobi.SaleOrderStatusId  
    END;
	RETURN _statusCount;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetDataForJsonAdmin` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` FUNCTION `GetDataForJsonAdmin`(
	_warehouseId int,
	_manufacturerId int
) RETURNS mediumtext CHARSET utf8mb4
BEGIN
	DECLARE result MEDIUMTEXT;
	SET result=( SELECT 
		JSON_ARRAYAGG(JSON_OBJECT( 
        'Name',
        Name, 
        'TotalPrice',
        TotalPrice,
        'Price',
        Price,
        'Quantity',
        Quantity
        )
	) 
	FROM(
		SELECT 
			p.Name,
			p.Price,
			count(psn.Id)Quantity,
			sum(p.Price)TotalPrice,
			GetInventoryDetailByBrandForLocationFunction(_warehouseId)
		FROM 
			stockinwardbasicinformation sibi 
		INNER JOIN
			stockinwarditeminformation siii
		ON
			sibi.Id = siii.StockInwardBasicInformationId 
		INNER JOIN 	
			product p 
		ON
			siii.ProductId = p.Id 
		INNER JOIN 
			productserialnumber psn 
		ON
			siii.Id = psn.StockInwardItemInformationId 
		WHERE 
			sibi.WarehouseId = _warehouseId
		AND
			p.ManufacturerId = _manufacturerId
		AND
			psn.IsScanned = 1
		AND
			CheckForSalesOrderedOrNot(psn.Id)
		GROUP BY
			p.Id)tbl1
		);
	RETURN result;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetDataForJsonInventory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` FUNCTION `GetDataForJsonInventory`(
	_warehouseId int,
	_manufacturerId int
) RETURNS mediumtext CHARSET utf8mb4
BEGIN
	DECLARE result MEDIUMTEXT;
	SET result=( SELECT 
		JSON_ARRAYAGG(JSON_OBJECT(
		'Name',
		Name,
		'TotalPrice',
		TotalPrice,
		'Price',
		Price,
		'Quantity',
		Quantity
		)
    ) 
    FROM(
		SELECT 
			p.Name,
			p.Price,
			count(psn.Id)Quantity,
			sum(p.Price)TotalPrice
			-- GetInventoryDetailByBrandForLocationFunction(_warehouseId)
		FROM 
			stockinwardbasicinformation sibi 
		INNER JOIN
			stockinwarditeminformation siii 
		ON
			sibi.Id = siii.StockInwardBasicInformationId 
		INNER JOIN 	
			product p
		ON
			siii.ProductId = p.Id 
		INNER JOIN 
			productserialnumber psn
		ON
			siii.Id = psn.StockInwardItemInformationId 
		WHERE 
			sibi.WarehouseId = _warehouseId
		AND
			p.ManufacturerId = _manufacturerId
		AND
			psn.IsScanned = 1
		AND
			CheckForSalesOrderedOrNot(psn.Id)
		GROUP BY
			p.Id)tbl1
		);
	RETURN result;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetInventoryDetailByBrandForLocationFunction` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` FUNCTION `GetInventoryDetailByBrandForLocationFunction`(
	_warehouseId int
) RETURNS mediumtext CHARSET utf8mb4
BEGIN
	DECLARE result MEDIUMTEXT;
	SET result=( SELECT 
		JSON_ARRAYAGG(JSON_OBJECT(
        'Id', 
        Id,
        'Name',
        Name, 
        'TotalPrice',
        TotalPrice
        )
	) 
	FROM(
		SELECT 
			m.Id,
			m.Name,
			tbl.TotalPrice 
		FROM(
			SELECT 
				p.ManufacturerId,
				sum(p.Price) TotalPrice
			FROM 
				stockinwardbasicinformation sibi  
			INNER JOIN
				stockinwarditeminformation siii 
			ON
				sibi.Id = siii.StockInwardBasicInformationId 
			INNER JOIN 	
				product p 
			ON
				siii.ProductId = p.Id 
			INNER JOIN 
				productserialnumber psn 
			ON
				siii.Id = psn.StockInwardItemInformationId 
			WHERE 
				sibi.WarehouseId = _warehouseId
			AND
				psn.IsScanned = 1
			AND
				CheckForSalesOrderedOrNot(psn.Id)
			GROUP BY 
				p.ManufacturerId
			)tbl
			INNER JOIN 
				manufacturer m
			ON
				tbl.ManufacturerId = m.Id)tbl1
			);
	RETURN result;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetInventoryDetailByCategoryForLocationFunction` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` FUNCTION `GetInventoryDetailByCategoryForLocationFunction`(

	) RETURNS mediumtext CHARSET utf8mb4
BEGIN
	DECLARE result mediumtext;
	SET result=(
	SELECT 
		c.Id,
		c.Name,
		tbl.TotalPrice 
	FROM(
		SELECT 
			p.CategoryId,
			SUM(p.Price) TotalPrice
		FROM 
			stockinwardbasicinformation sibi  
		INNER JOIN
			stockinwarditeminformation siii 
		ON
			sibi.Id = siii.StockInwardBasicInformationId 
		INNER JOIN 	
			product p
		ON
			siii.ProductId = p.Id 
		INNER JOIN 
			productserialnumber psn  
		ON
			siii.Id = snp.ProductSkuProfileId 
		WHERE 
			sibi.WarehouseId = _warehouseId
		AND
			psn.IsScanned = 1
		AND
			CheckForSalesOrderedOrNot(psn.Id)
		GROUP BY 
			p.CategoryId
	)tbl
	INNER JOIN 
		category c
	ON
		tbl.CategoryId = c.Id);
RETURN 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetInventoryDetailByCategoryOnLocationFunction` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` FUNCTION `GetInventoryDetailByCategoryOnLocationFunction`(
	_warehouseId int,
	_categoryId int
) RETURNS mediumtext CHARSET utf8mb4
BEGIN
	DECLARE result mediumtext;
	SET result=( SELECT 
		JSON_ARRAYAGG( JSON_OBJECT(
        'Name',
        Name, 
        'Price',
        Price,
        'TotalPrice',
        TotalPrice,
        'Quantity',
		Quantity
        )
	) 
	FROM(
		SELECT      
			m.Name,
			p.Price Price,
			COUNT(psn.Id) Quantity,
			SUM(p.Price) TotalPrice
		FROM 
			stockinwardbasicinformation sibi 
		INNER JOIN
			stockinwarditeminformation siii 
		ON
			sibi.Id = siii.StockInwardBasicInformationId 
		INNER JOIN 	
			product p 
		ON
			siii.ProductId = p.Id 
		INNER JOIN 
			productserialnumber psn
		ON
			siii.Id = psn.StockInwardItemInformationId 
		INNER JOIN 
			manufacturer m 
		ON
			p.ManufacturerId = m.Id
		WHERE 
			sibi.WarehouseId = _warehouseId
		AND
			p.CategoryId = _categoryId
		AND
			psn.IsScanned = 1
		AND
			CheckForSalesOrderedOrNot(psn.Id)
		GROUP BY
			m.Id,
			p.Price
			)
			tbl
		);
	RETURN result;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetPendingScanCount` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` FUNCTION `GetPendingScanCount`(
	_stockInwardItemInformationId  int
) RETURNS int
BEGIN
	DECLARE _result int;
	SET _result = (	SELECT 
			COUNT(1)
		FROM 
			productserialnumber
		WHERE 
			StockInwardItemInformationId = _stockInwardItemInformationId 
		AND  
			IsScanned = 0);
	RETURN _result;	
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetPrice` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` FUNCTION `GetPrice`(
	_productId int
) RETURNS decimal(10,0)
BEGIN
	DECLARE _result decimal;
	SET _result = (	SELECT 
			sum(siii.price) Price
		FROM 
			product p 
		INNER JOIN 
			stockinwarditeminformation siii
		ON
			p.Id = siii.ProductId
		WHERE 
			p.IsActive = 1
		AND 	
			p.Id = _productId
		);
	RETURN _result;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetPriceForItemsAgainstSalesOrderNo` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` FUNCTION `GetPriceForItemsAgainstSalesOrderNo`( 
	_productId int,
	_startDate date,
	_endDate date,
	_locationId int
) RETURNS int
BEGIN
	DECLARE _result int;
	IF (_locationId <= 0) 
    THEN
	SET _result =(	SELECT 
			sum(siii.price)
		FROM 
			productserialnumber psn
		INNER JOIN 
			stockinwarditeminformation siii  
		ON 
			siii.Id = psn.StockInwardItemInformationId
		INNER JOIN 
			saleorderdispatchserialnumber sodsn
		ON
			sodsn.ProductSerialNumberId = psn.Id
		INNER JOIN 
			salesorderitemsinformation soii
		ON
			soii.Id = sodsn.SaleOrderItemInformationId
		INNER JOIN  
			salesorderbasicinformation sobi
		ON 
			sobi.Id = soii.SalesOrderBasicInformationId
		WHERE
			soii.ProductId = _productId
		AND 
		DATE
			(sodsn.DispatchDate) >= _startDate 
		AND 
		DATE(
			sodsn.DispatchDate) <= _endDate
		AND(
		CASE 
		WHEN 
			sodsn.DamageDate is null then 1 
		ELSE 
		DATE(
			sodsn.DamageDate) > _endDate
		END
		)
		AND(
		CASE 
		WHEN
			sodsn.ReturnDate is null then 1 
		ELSE 
		DATE(
			sodsn.ReturnDate) > _endDate
		END
		)
	);

  END IF;  
  	RETURN _result;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetPriceForItemsAtLocation` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`backup`@`%` FUNCTION `GetPriceForItemsAtLocation`(
	_productId INT,
	_startDate DATE,
	_endDate DATE,
    _locationId INT 
) RETURNS int
BEGIN
DECLARE _sum INT;

SELECT 
    COALESCE(SUM(p.Price) , 0 )
INTO _sum
FROM 
    productserialnumber s 
INNER JOIN
    stockinwarditeminformation p 
ON 
    s.StockInwardItemInformationId = p.Id 
INNER JOIN
    stockinwardbasicinformation i 
ON
    p.StockInwardBasicInformationId = i.Id 
LEFT JOIN 
    (
		SELECT Id, ProductSerialNumberId 
		FROM saleorderdispatchserialnumber 
		WHERE IsDeleted = 0
		AND DATE(DispatchDate) BETWEEN _startDate AND _endDate 
    )s2 
ON
    s.Id = s2.ProductSerialNumberId 
WHERE 
    s.IsScanned = 1
AND
    i.WarehouseId = _locationId
AND
    s2.Id IS NULL
AND
    p.ProductId  = CASE WHEN _productId=0 THEN p.ProductId ELSE _productId END;

RETURN _sum;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetProductCountByStatus` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` FUNCTION `GetProductCountByStatus`( 
	pid int, `status` int
) RETURNS int
BEGIN
	DECLARE 
		totalCount int ; 
	SELECT
		count(1) 
	INTO 
		totalCount
	FROM 
		salesorderitemsinformation AS soii
	INNER JOIN
		salesorderbasicinformation  AS sobi
	ON 
		soii.SalesOrderBasicInformationId = sobi.Id 
	INNER JOIN 
		product p  
    ON
		soii.ProductId = p.Id
	INNER JOIN 
		saleorderstatus ss
    ON
		sobi.SaleOrderStatusId = ss.Id
	WHERE 
		p.Id = pid 
    AND  
		ss.Id = `status` ;
	RETURN totalCount;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetReceivedInventoryCountForProductId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`backup`@`%` FUNCTION `GetReceivedInventoryCountForProductId`(
	_productId INT,
	_startDate DATE,
	_endDate DATE,
    _locationId INT
) RETURNS int
BEGIN
	DECLARE _result INT;
    
SELECT 
    COUNT(1)
INTO _result
FROM 
    productserialnumber s 
INNER JOIN
    stockinwarditeminformation p 
ON 
    s.StockInwardItemInformationId = p.Id 
INNER JOIN
    stockinwardbasicinformation i 
ON
    p.StockInwardBasicInformationId = i.Id 
WHERE 
    s.IsScanned = 1
AND
	DATE(s.ScanDate) BETWEEN _startDate AND _endDate
AND
    i.WarehouseId = _locationId
AND
    p.ProductId  = CASE WHEN _productId = 0 THEN p.ProductId ELSE _productId END;
RETURN _result;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetSalesDamageInventoryCountForProductId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`backup`@`%` FUNCTION `GetSalesDamageInventoryCountForProductId`(
	_productId INT,
	_startDate DATE,
	_endDate DATE,
	_locationId INT
) RETURNS int
BEGIN
	DECLARE _result INT;
    
SELECT 
    COUNT(1)
INTO _result
FROM 
    productserialnumber s 
INNER JOIN
    stockinwarditeminformation p 
ON 
    s.StockInwardItemInformationId = p.Id 
INNER JOIN
    stockinwardbasicinformation i 
ON
    p.StockInwardBasicInformationId = i.Id 
INNER JOIN 
    saleorderdispatchserialnumber s2 
ON
    s.Id = s2.ProductSerialNumberId 
WHERE 
    s2.IsDeleted = 1
AND
	s.IsDamage = 1
AND 
	DATE(s.DamageDate) BETWEEN _startDate AND _endDate
AND
    i.WarehouseId = _locationId
AND
    p.ProductId  = CASE WHEN _productId = 0 THEN p.ProductId ELSE _productId END;

RETURN _result;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetSalesDispatchAndPendingInventoryCountForProductId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` FUNCTION `GetSalesDispatchAndPendingInventoryCountForProductId`(
	_productId int,
	_dispatchMonth date
) RETURNS int
BEGIN
	DECLARE _result int;
	SET _result=( SELECT 
			COUNT(1) 
		FROM 
			salesorderitemsinformation soii 
		INNER JOIN
			saleorderdispatchserialnumber sodsn
		ON
			soii.Id = sodsn.SalesOrderItemInformationId 
		WHERE 
			soii.ProductId = _productId
		AND
			sodsn.IsDeleted = 0
		AND 
		DATE
			(sodsn.DispatchDate) <= _dispatchMonth);
	RETURN _result;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetSalesDispatchInventoryCountForProductId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`backup`@`%` FUNCTION `GetSalesDispatchInventoryCountForProductId`(
	_productId INT,
    _startDate DATE,
	_endDate DATE,
    _locationId INT
) RETURNS int
BEGIN
	DECLARE _result INT;
    
SELECT 
    COUNT(1)
INTO _result
FROM 
    productserialnumber s 
INNER JOIN
    stockinwarditeminformation p 
ON 
    s.StockInwardItemInformationId = p.Id 
INNER JOIN
    stockinwardbasicinformation i 
ON
    p.StockInwardBasicInformationId = i.Id 
INNER JOIN 
    saleorderdispatchserialnumber s2 
ON
    s.Id = s2.ProductSerialNumberId 
WHERE 
    s.IsScanned = 1
AND
    i.WarehouseId = _locationId
AND
    s2.IsDispatched = 1
AND
	DATE(s2.DispatchDate) BETWEEN _startDate AND _endDate
AND
    s2.IsDeleted = 0
AND
    p.ProductId  = CASE WHEN _productId = 0 THEN p.ProductId ELSE _productId END;

RETURN _result;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetSalesPendingInventoryCountForProductId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`backup`@`%` FUNCTION `GetSalesPendingInventoryCountForProductId`(
	_productId INT,
    _startDate DATE,
	_endDate DATE,
    _locationId INT
) RETURNS int
BEGIN
	DECLARE _result INT;
    
SELECT 
    COUNT(1)
INTO _result
FROM 
    productserialnumber s 
INNER JOIN
    stockinwarditeminformation p 
ON 
    s.StockInwardItemInformationId = p.Id 
INNER JOIN
    stockinwardbasicinformation i 
ON
    p.StockInwardBasicInformationId = i.Id 
INNER JOIN 
    saleorderdispatchserialnumber s2 
ON
    s.Id = s2.ProductSerialNumberId 
WHERE 
    s.IsScanned = 1
AND
    i.WarehouseId = _locationId
AND
    s2.IsDispatched = 0
AND
    s2.IsDeleted = 0
AND
    p.ProductId  = CASE WHEN _productId = 0 THEN p.ProductId ELSE _productId END;

RETURN _result;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetStockInHandInformationByProductId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` FUNCTION `GetStockInHandInformationByProductId`(
	_productId int
) RETURNS int
BEGIN
	DECLARE _result int default 0;
	SET _result = (	SELECT 
			count(psn.Id) 
		FROM 
			productserialnumber psn
		INNER JOIN
			stockinwarditeminformation siii 
		ON
			psn.StockInwardItemInformationId = siii.Id 
		LEFT JOIN
			saleorderdispatchserialnumber sodsn 
		ON
			psn.Id = sodsn.ProductSerialNumberId 
		WHERE 
			psn.IsScanned =1
		AND
			siii.ProductId = _productId
		AND(
			sodsn.IsDeleted = 1
		OR
			sodsn.Id IS NULL
		)
	);				  
	RETURN _result;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetStockQuantityByProductLocationId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`backup`@`%` FUNCTION `GetStockQuantityByProductLocationId`(
_productId INT,
_startDate DATE,
_endDate DATE,
_locationId INT
) RETURNS int
BEGIN
	DECLARE _result INT ;

SELECT 
    COUNT(1) 
INTO _result
FROM 
    productserialnumber s 
INNER JOIN
    stockinwarditeminformation p 
ON 
    s.StockInwardItemInformationId = p.Id 
INNER JOIN
    stockinwardbasicinformation i 
ON
    p.StockInwardBasicInformationId = i.Id 
LEFT JOIN 
    (
		SELECT Id, ProductSerialNumberId 
		FROM saleorderdispatchserialnumber 
		WHERE IsDeleted = 0
		AND DATE(DispatchDate) BETWEEN _startDate AND _endDate 
    )s2 
ON
    s.Id = s2.ProductSerialNumberId 
WHERE 
    s.IsScanned = 1
AND
    i.WarehouseId = _locationId
AND
    s2.Id IS NULL
AND
    p.ProductId  = CASE WHEN _productId=0 THEN p.ProductId ELSE _productId END;
    
RETURN _result;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `getTotalProductByWarehouseID` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` FUNCTION `getTotalProductByWarehouseID`(
	_wareHouseId int
) RETURNS int
BEGIN
DECLARE _Count int;
	SELECT 
		count(Id) 
	INTO
		_Count 
	FROM 
		productserialnumber 
	WHERE
		StockInwardItemInformationId
	IN (
	SELECT 
		siii.Id
	FROM 
		stockinwarditeminformation siii
	JOIN 
		stockinwardbasicinformation sibi
	ON 
		siii.StockInwardBasicInformationId = sibi.Id
	WHERE 
		sibi.WarehouseId 
	IN(
		_wareHouseId
	)
	);
	RETURN _Count;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `InventoryByVendorlocationFunction` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`backup`@`%` FUNCTION `InventoryByVendorlocationFunction`(
	 _warehouseId int,
     _vendorId int
) RETURNS mediumtext CHARSET utf8mb4
BEGIN
DECLARE result mediumtext;
SET result =(SELECT
				JSON_ARRAYAGG(
								JSON_OBJECT(
												'Name',`Name`,
                                                'TotalPrice',TotalPrice,
                                                'Price',Price,
                                                'Quantity',Quantity))
			FROM(
SELECT 
		c.`Name`,
        pp.Price Price,
		SUM(pp.Price)TotalPrice,
		count(s.Id)Quantity
	FROM 
		stockinwardbasicinformation inv 
	INNER JOIN
		stockinwarditeminformation psp 
	ON
		inv.Id = psp.StockInwardBasicInformationId 
	INNER JOIN 	
		product pp 
	ON
		psp.ProductId = pp.Id 
	INNER JOIN
		category c 
	ON
		c.Id = pp.CategoryId
	INNER JOIN 
		productserialnumber s 
	ON
		psp.Id = s.StockInwardItemInformationId 
	WHERE 
		inv.WarehouseId = _warehouseId
	AND
		inv.VendorId = _vendorId
	AND
		s.IsScanned = 1
	AND
		CheckForSalesOrderedOrNot(s.Id)
	GROUP BY c.Id,pp.Price)tbl);
RETURN result;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `InventoryDetailForMobile` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` FUNCTION `InventoryDetailForMobile`(
	_wareHouseId int
) RETURNS int
BEGIN
	DECLARE _Count int;
		SELECT 
			count(Id) 
		INTO 
			_Count 
		FROM 
			StockInwardItemInformationId 
		WHERE
			StockInwardItemInformationId 
		IN (
		SELECT 
			siii.ProductId
		FROM 
			stockinwarditeminformation siii
		JOIN
			stockinwardbasicinformation sibi 
		ON 
			siii.StockInwardBasicInformationId = sibi.Id     
		JOIN 
			product p
		ON 
			siii.StockInwardItemInformationId = p.Id
		JOIN 
			category c
		ON
			c.Id = pd.CategoryId
		WHERE 
			sibi.WarehouseId 
		IN (
			_wareHouseId)
		);
	RETURN _Count;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `IscannedZero` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` FUNCTION `IscannedZero`(
	_id int) RETURNS int
BEGIN
	DECLARE _result int ;
	SET _result = 
	(
	SELECT  
		count(1)
	FROM
		salesorderitemsinformation soii
	INNER JOIN
		saleorderdispatchserialnumber sodsn
	ON
		sodsn.SalesOrderItemInformationId= soii.Id
	INNER JOIN
		productserialnumber psn
	ON
		psn.Id = sodsn.ProductSerialNumberId
	WHERE
		soii.Id=_id
    AND 
		sodsn.IsDispatched=0
	); 
RETURN  _result;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `SerialCountByInvoiceId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` FUNCTION `SerialCountByInvoiceId`(
	_id int
) RETURNS int
BEGIN
	DECLARE result int ;
	SET result = ( SELECT 
			COUNT(1) As Quantity
		FROM
			productserialnumber snp
		INNER JOIN
			stockinwarditeminformation siii  
		ON 
			snp.StockInwardItemInformationId = siii.Id
		INNER JOIN
			stockinwardbasicinformation sibi 
		ON 
			sibi.Id = siii.StockInwardBasicInformationId
		WHERE
			sibi.Id = _id
		);
	RETURN result;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `aaaExcelGetInventoryAllDetail` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`backup`@`%` PROCEDURE `aaaExcelGetInventoryAllDetail`(
	in _startDate date,
	in _endDate date,
	 in _name varchar(255),
     in _locationId int
    )
BEGIN
	SELECT
		SUM(GetReceivedInventoryCountForProductId(p.Id, _startDate, _endDate, _locationId)) AS ReceivedInventory,
		SUM(GetSalesDispatchInventoryCountForProductId(p.Id, _startDate, _endDate, _locationId)) AS DispatchedInventory,
		SUM(GetSalesPendingInventoryCountForProductId(p.Id, _startDate, _endDate, _locationId)) AS PendingInventory,
		SUM(GetSalesDamageInventoryCountForProductId(p.Id,_startDate,  _endDate, _locationId)) AS DamageInventory,
		SUM(GetStockQuantityByProductLocationId(p.Id,_startDate,  _endDate, _locationId)) AS StockQuantity,
		SUM(GetPriceForItemsAtLocation(p.Id, _startDate, _endDate, _locationId)) AS TotalPrice
	FROM
		product p
	WHERE
		p.IsActive = 1;

    SET @qury = CONCAT(
        "SELECT
            p.Id,
            p.ProductSKU,
            p.Name,
            GetReceivedInventoryCountForProductId(p.Id,'", _startDate, "','", _endDate, "',", _locationId, ") AS ReceivedInventory,
            GetSalesDispatchInventoryCountForProductId(p.Id,'", _startDate, "','", _endDate, "',", _locationId, ") AS DispatchedInventory,
            GetSalesPendingInventoryCountForProductId(p.Id,'", _startDate, "','", _endDate, "',", _locationId, ") AS PendingInventory,
            GetSalesDamageInventoryCountForProductId(p.Id,'", _startDate, "','", _endDate, "',", _locationId, ") AS DamageInventory,
            GetStockQuantityByProductLocationId(p.Id,'", _startDate, "','", _endDate, "',", _locationId, ") AS StockQuantity ,
            GetPriceForItemsAtLocation(p.Id,'", _startDate, "','", _endDate, "',", _locationId, ")  AS TotalPrice
        FROM
            product p
        WHERE
            p.IsActive = 1
            "
    );
	-- select @qury;

	PREPARE stmt2 FROM @qury;
	EXECUTE stmt2;
    DEALLOCATE PREPARE stmt2;	
   
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AddInventory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`backup`@`%` PROCEDURE `AddInventory`(
	IN _warehouseId int,
	IN _productId int,
	IN _actionType int,
	IN _vendorId int,
	IN _purchaseSalesNumber varchar(64), 
	IN _userId int,
    IN _price decimal(10,2)
)
BEGIN
	DECLARE inventoryId int DEFAULT NULL;
	DECLARE tempReceivedCount int DEFAULT 0; 
	DECLARE tempSalesOrderPendingCount int DEFAULT 0;
	DECLARE tempSalesOrderDispatchCount int DEFAULT 0;
	DECLARE tempStockDamageCount int DEFAULT 0;
    DECLARE tempStockReturnCount int DEFAULT 0;
	DECLARE tempStockQuantity int DEFAULT 0;
	DECLARE tempStockValue decimal(10,2) DEFAULT 0.00;
	
	SET inventoryId  = 	IF(
							EXISTS	(
									SELECT
										Id 
									FROM 
										inventory 
									WHERE 
									WarehouseId = _warehouseId 
									AND 
									ProductId = _productId
									) , 1, 0
                        );
    
    IF(inventoryId IS NULL OR inventoryId = 0)THEN
		INSERT INTO inventory
			(WarehouseId, 
            ProductId, 
            ActionType, 
            ActionDate, 
            VendorId, 
            PurchaseSalesNumber,
            ReceivedCount, 
            SalesOrderPendingCount, 
            SalesOrderDispatchCount, 
            StockDamageCount, 
			StockReturnCount,
            StockQuantity, 
            StockValue, 
            CreatedBy, 
            CreatedOn)
        VALUES
			(_warehouseId,
            _productId,
            _actionType, 
            NOW(),
            _vendorId, 
            _purchaseSalesNumber,
            0,
            0,
            0,
            0,
			0,
            0,
            0.00,
            _userId,
            NOW());
            
		SELECT
			ReceivedCount, 
			SalesOrderPendingCount, 
			SalesOrderDispatchCount, 
			StockDamageCount,
			StockReturnCount, 
			StockQuantity, 
			StockValue
		INTO
			tempReceivedCount, 
			tempSalesOrderPendingCount, 
			tempSalesOrderDispatchCount, 
			tempStockDamageCount, 
			tempStockReturnCount,
			tempStockQuantity, 
			tempStockValue
		FROM
			inventory
		WHERE
			Id = inventoryId;
    END IF;
	

	IF _actionType = 1 OR _actionType = 8 OR _actionType = 9 THEN -- Purchase OR Returned as Inward OR Inward as damage
		SET 
			tempReceivedCount = tempReceivedCount + 1,
			tempStockQuantity = tempStockQuantity + 1,
			tempStockValue = tempStockValue + _price;

	ELSEIF _actionType = 2 OR _actionType = 6 THEN -- Added to SalesOrder OR Return to Manufacturer 
		SET	
			tempSalesOrderPendingCount = tempSalesOrderPendingCount + 1,
			tempStockQuantity = tempStockQuantity - 1,
			tempStockValue = tempStockValue - _price;
		
	ELSEIF _actionType = 3  THEN -- Dispatched
		SET
			tempSalesOrderPendingCount = tempSalesOrderPendingCount - 1,
			tempSalesOrderDispatchCount = tempSalesOrderDispatchCount + 1;
	
	ELSEIF _actionType = 4 THEN -- Return
		SET
			tempStockReturnCount = tempStockReturnCount + 1,
			tempStockValue = tempStockValue + _price,
			tempStockQuantity = tempStockQuantity + 1;

	ELSEIF _actionType = 5 THEN -- Marked Damage before sale
		SET
			tempStockValue = tempStockValue + _price,
			tempStockQuantity = tempStockQuantity + 1,	
			tempSalesOrderPendingCount = tempSalesOrderPendingCount - 1,
			tempStockDamageCount = tempStockDamageCount + 1;

	ELSEIF _actionType = 7 THEN -- Marked Damage after sale
		SET
			tempStockValue = tempStockValue + _price,
			tempStockQuantity = tempStockQuantity + 1,	
			tempSalesOrderDispatchCount = tempSalesOrderDispatchCount - 1,
			tempStockDamageCount = tempStockDamageCount + 1;

	ELSEIF _actionType = 10 THEN -- Damage in Inventory
		SET
			tempStockDamageCount = tempStockDamageCount + 1,
			tempReceivedCount = tempReceivedCount - 1;

	ELSEIF _actionType = 11 OR _actionType = 12 THEN -- DirectOut SalesOrder OR DirectOut Return to Manufacturer
		SET	
				-- _actionType = 3,
				tempSalesOrderDispatchCount = tempSalesOrderDispatchCount + 1,
				tempStockQuantity = tempStockQuantity - 1,
				tempStockValue = tempStockValue - _price;
	-- ELSE
	END IF;
	
	IF (inventoryId IS NULL OR inventoryId = 0)THEN
		SET inventoryId = LAST_INSERT_ID();
		UPDATE
			inventory
		SET
			ActionType =_actionType, 
			ActionDate =	NOW(), 
			ReceivedCount =	tempReceivedCount, 
			SalesOrderPendingCount =	tempSalesOrderPendingCount, 
			SalesOrderDispatchCount =	tempSalesOrderDispatchCount, 
			StockDamageCount =	tempStockDamageCount, 
			StockReturnCount =	tempStockReturnCount,
			StockQuantity =	tempStockQuantity, 
			StockValue =	tempStockValue, 
			CreatedBy =	userId, 
			CreatedOn =	NOW()	
		WHERE 
			Id = inventoryId;
	ELSE
		INSERT INTO
		inventory
		(
			WarehouseId, 
			ProductId, 
			ActionType, 
			ActionDate, 
			VendorId, 
			PurchaseSalesNumber,
			ReceivedCount, 
			SalesOrderPendingCount, 
			SalesOrderDispatchCount, 
			StockDamageCount, 
			StockReturnCount,
			StockQuantity, 
			StockValue, 
			CreatedBy, 
			CreatedOn
		)
		VALUES
		(
			_warehouseId,
			_productId,
			_actionType, 
			NOW(),
			_vendorId, 
			_purchaseSalesNumber,
			tempReceivedCount, 
			tempSalesOrderPendingCount, 
			tempSalesOrderDispatchCount, 
			tempStockDamageCount, 
			tempStockReturnCount,
			tempStockQuantity, 
			tempStockValue, 
			_userId,
			NOW()
		);
     END IF;
    END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AddInvoiceProfile` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `AddInvoiceProfile`(
	IN _invoiceNo varchar(32),
	IN _purchaseOrderNo varchar(32),
	IN _dateOfPurchase datetime,
	IN _vendorCompanyNameId int,
	IN _moveTypeId int,
	IN _warehouseLocationId int,
	IN _itemTypeId int,
	IN _statusId int,
    IN _userId int
)
BEGIN
	INSERT INTO 
		stockinwardbasicinformation (
			InvoiceNumber, 
			PurchaseOrderNumber, 
			DateOfPurchase, 
			VendorId, 
			MoveTypeId, 
			WarehouseId, 
			ItemTypeId, 
			`Status`,
            CreatedBy)
	VALUES (
		_InvoiceNo, 
		_PurchaseOrderNo, 
		_DateOfPurchase, 
		_VendorCompanyNameId, 
		_MoveTypeId, 
		_WarehouseLocationId, 
		_ItemTypeId, 
		0,
        _userId);
		
	SELECT 
		LAST_INSERT_ID() Id, 
		'Invoice Added Successfully' Message, 
		1 IsSuccess;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AddLog` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`backup`@`%` PROCEDURE `AddLog`(
	IN Message VARCHAR(500),
	IN Level VARCHAR(500),
	IN Exception VARCHAR(500),
	IN trace VARCHAR(500),
	IN Logger VARCHAR(500),
	IN CreatedOn DATETIME
)
BEGIN
	INSERT INTO Logs
	(Message, `Level`, `Exception`, StackTrace, Logger,CreatedOn)
	VALUES(Message, Level, Exception, StackTrace, Logger,CreatedOn);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AddLogs` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `AddLogs`(
	IN _message LONGTEXT,
	IN _method LONGTEXT,
	IN _path LONGTEXT,
	IN _source LONGTEXT,
	IN _stackTrace LONGTEXT
)
BEGIN
	INSERT INTO logs
	(
		`Path`,
		`Message`,
		`Source`,
		`Method`,
		`StackTrace`,
		`CreatedOn`
	)
	VALUES
	(
		_path,
		_message,
		_method,
		_source,
		_stackTrace,
		NOW()
	);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AddMultipleProductsInSalesOrderItemInformation` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `AddMultipleProductsInSalesOrderItemInformation`(
IN _userId int,
IN _data json
)
BEGIN
    
	INSERT INTO salesorderitemsinformation
			(SalesOrderBasicInformationId,ProductId,Quantity,IsDeleted,CreatedBy,CreatedOn)
	SELECT
        tbl.SalesOrderBasicInformationId,
		tbl.ProductId,
		tbl.Quantity,
        0,
		_userId,
		NOW()
	FROM 
		JSON_TABLE(_data,'$[*]' COLUMNS(
            SalesOrderBasicInformationId int PATH "$.SalesOrderBasicInformationId",
			ProductId int PATH "$.ProductId",
			Quantity int PATH "$.Quantity"
		)) AS tbl;
        	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AddMultipleSaveItems` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `AddMultipleSaveItems`(
IN _userId int,
IN _data json
)
BEGIN
    
	INSERT INTO salesorderitemsinformation
			(SalesOrderBasicInformationId,ProductId,Quantity,IsDeleted,CreatedBy,CreatedOn)
	SELECT
        tbl.SalesOrderBasicInformationId As SaleOrderId,
		tbl.ProductId As ProductSKU,
		tbl.Quantity As ItemQuantity,
        0,
		_userId,
		NOW()
	FROM 
		JSON_TABLE(_data,'$[*]' COLUMNS(
            SalesOrderBasicInformationId int PATH "$.SaleOrderId",
			ProductId int PATH "$.ProductSKU",
			Quantity int PATH "$.ItemQuantity"
		)) AS tbl;
        	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `Addnew` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `Addnew`(
IN _id int,
IN _serialNo varchar(16),
IN _userId int
)
BEGIN
INSERT INTO saleorderdispatchserialnumber(SalesOrderItemInformationId, ProductSerialNumberId, IsDispatched, DispatchDate, CreatedOn, CreatedBy)
SELECT 
	soi.Id as SalesOrderItemInformationId
    , sp.Id as ProductSerialNumberId
    ,1 as IsDispatched
    ,now() as DispatchDate
    ,now() as CreatedOn
    ,_userId as CreatedBy
FROM
	product p
INNER JOIN
	stockinwarditeminformation iii
on 
	iii.ProductId=p.Id
INNER JOIN
	productserialnumber ps
on 
	ps.StockInwardItemInformationId=iii.Id
inner join
	saleorderdispatchserialnumber sds
on
	sds.ProductSerialNumberId=ps.Id
inner join
	salesorderitemsinformation soi
on
	sds.SalesOrderItemInformationId=soi.Id
inner join
	salesorderbasicinformation sob
on
	soi.SalesOrderBasicInformationId=sob.Id
where 
	ps.SerialNumber=_serialNo and sob.Id=_id
;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AddNewSalesOrder` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `AddNewSalesOrder`(
IN _SalesOrderId INT,
IN _SerialNumber VARCHAR(16),
IN _UserId INT
)
BEGIN
INSERT INTO saleorderdispatchserialnumber(SalesOrderItemInformationId, ProductSerialNumberId, IsDispatched, DispatchDate, CreatedOn, CreatedBy)
SELECT 
	soi.Id as SalesOrderItemInformationId
    , sp.Id as ProductSerialNumberId
    ,1 as IsDispatched
    ,now() as DispatchDate
    ,now() as CreatedOn
    ,_userId as CreatedBy
FROM
	product p
INNER JOIN
	stockinwarditeminformation iii
on 
	iii.ProductId=p.Id
INNER JOIN
	productserialnumber ps
on 
	ps.StockInwardItemInformationId=iii.Id
inner join
	saleorderdispatchserialnumber sds
on
	sds.ProductSerialNumberId=ps.Id
inner join
	salesorderitemsinformation soi
on
	sds.SalesOrderItemInformationId=soi.Id
inner join
	salesorderbasicinformation sob
on
	soi.SalesOrderBasicInformationId=sob.Id
where 
	ps.SerialNumber=_SerialNumber and sob.Id=_SalesOrderId
;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AddProduct` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `AddProduct`(
	IN _productSKU varchar(64),
	IN _name VARCHAR(64),
	IN _categoryId INT,
	IN _manufacturerId INT,
	IN _eanCode VARCHAR(64),
	IN _price DECIMAL(12,2),
	IN _isActive INT ,
	IN _userId INT
)
BEGIN
	INSERT INTO product
		(ProductSKU,
        `Name` ,
        CategoryId,
        ManufacturerId,
        EANCode,
        Price,
        IsActive,
        CreatedOn,
        CreatedBy) 
	VALUES
		(_productSKU,
        _name,
        _categoryId,
        _manufacturerId,
        _eanCode,
        _price,
        _isActive,
        NOW(),
        _userId);
        SELECT 1 IsSuccess, "Product Saved Successfully" Message;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AddProductInInvoice` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `AddProductInInvoice`(
IN _UserId INT,
IN _Data JSON
)
BEGIN
	INSERT INTO stockinwarditeminformation
	(StockInwardBasicInformationId, ProductId, Quantity, Price, BarcodeGenerated, CreatedBy, CreatedOn)
	SELECT 
		tbl.StockInwardBasicInformationId,
		tbl.ProductId,
		tbl.Quantity,
        tbl.Price,
		0,
		_UserId,
		NOW()
	FROM 
		JSON_TABLE(_Data,'$[*]' COLUMNS(
			StockInwardBasicInformationId int PATH "$.InvoiceNoId",
			ProductId int PATH "$.ProductSkuId",
			Quantity int PATH "$.Quantity",
            Price decimal(10,2) PATH "$.Price"
		)) AS tbl;
	
    SELECT 
		1 IsSuccess,
        'Items added Successfully' Message;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AddProducts` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `AddProducts`(
IN _productSku varchar(64),
IN _name varchar(64),
IN _categoryId int,
IN _manufacturerId int,
IN _eanCode varchar(64),
IN _price int,
IN _isActive int ,
IN _userId int
)
BEGIN
	INSERT INTO product
		(ProductSKU, Name ,CategoryId, ManufacturerId, EANCode, Price, IsActive,CreatedOn,CreatedBy) 
	Values
		(_productSku, _name, _categoryId, _manufacturerId, _eanCode, _price, _isActive, curdate(), _userId);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AddProductsInSalesOrderItemInformation` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `AddProductsInSalesOrderItemInformation`(
IN _userId int,
IN _data json
)
BEGIN
    
	INSERT INTO salesorderitemsinformation
			(SalesOrderBasicInformationId,ProductId,Quantity,IsDeleted,CreatedBy,CreatedOn)
	SELECT
        tbl.SalesOrderBasicInformationId,
		tbl.ProductId,
		tbl.Quantity,
        0,
		_userId,
		NOW()
	FROM 
		JSON_TABLE(_data,'$[*]' COLUMNS(
            SalesOrderBasicInformationId int PATH "$.SalesOrderBasicInformationId",
			ProductId int PATH "$.ProductId",
			Quantity int PATH "$.Quantity"
		)) AS tbl;
        	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AddProductsInStockInwardItemInformation` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `AddProductsInStockInwardItemInformation`(
IN _userId INT,
IN _data JSON
)
BEGIN
	INSERT INTO stockinwarditeminformation
	(StockInwardBasicInformationId, ProductId, Quantity, Price, BarcodeGenerated, CreatedBy, CreatedOn)
	SELECT 
		tbl.StockInwardBasicInformationId,
		tbl.ProductId,
		tbl.Quantity,
        tbl.Price,
		0,
		_userId,
		NOW()
	FROM 
		JSON_TABLE(_Data,'$[*]' COLUMNS(
			StockInwardBasicInformationId int PATH "$.StockInwardBasicInformationId",
			ProductId int PATH "$.ProductId",
			Quantity int PATH "$.Quantity",
            Price decimal(12,2) PATH "$.Price"
		)) AS tbl;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AddStockInwardBasicInformation` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `AddStockInwardBasicInformation`(
IN _invoiceNumber VARCHAR(32),
IN _purchaseOrderNumber VARCHAR(32),
IN _dateOfPurchase DATETIME,
IN _vendorId INT,
IN _moveTypeId INT,
IN _warehouseId INT,
IN _itemTypeId INT
)
BEGIN
INSERT INTO stockinwardbasicinformation 
(InvoiceNumber, PurchaseOrderNumber, DateOfPurchase, VendorId, MoveTypeId, WarehouseId, ItemTypeId, Status)
VALUES (_invoiceNumber, _purchaseOrderNumber, _dateOfPurchase, _vendorId, _moveTypeId, _warehouseId, _itemTypeId, 0);
select last_insert_id() Id, 'Invoice Added Successfully' Message, 1 IsSuccess;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AddVendor` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`backup`@`%` PROCEDURE `AddVendor`(
	IN _companyName varchar(64),
	IN _companyTypeId int,
	IN _vendorTypeId int,
	IN _gst varchar(16),
	IN _isActive int,
	IN _address varchar(256),
	IN _contactName varchar(64),
	IN _contactMobile varchar(16),
	IN _contactEmail varchar(64),
	IN _userId int
)
BEGIN
	INSERT INTO 
		vendor
		(
			CompanyName, 
			ContactName, 
			ContactMobile, 
			ContactEmail, 
			CompanyTypeId, 
			VendorTypeId, 
			Address, 
			GST, 
			IsActive, 
			CreatedOn, 
			CreatedBy
		)
	VALUES
		(
			_companyName,
			_contactName,
			_contactMobile,
			_contactEmail,
			_companyTypeId,
			_vendorTypeId,
			_address,
			_gst,
			_isActive,
			NOW(),
			_userId
		);
        
        SELECT 
			1 IsSuccess,
            "Data Saved Successfully" Message;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AddWarehouse` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `AddWarehouse`(
	IN _locationName varchar(64),
	IN _warehouseTypeId int, 
	IN _maxCapacity decimal(10,2), 
	IN _address varchar(256), 
	IN _description varchar(512), 
	IN _isActive int,
	IN _userId int
)
BEGIN
	INSERT
    INTO 
		warehouse(
					LocationName,
                    WarehouseTypeId,
                    MaxCapacity,
                    Address,
                    Description,
                    IsActive,
                    CreatedOn,
                    CreatedBy)
	VALUES(
			_locationName ,
            _warehouseTypeId,
            _maxCapacity,
            _address,
            _description,
            _isActive, 
            NOW(), 
            _userId);
            
	SELECT
    1 IsSuccess,
    "Data Saved Successfully" Message;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AdminGetStockCountByWarehouse` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `AdminGetStockCountByWarehouse`()
BEGIN
	SELECT 
		w.Id,
		w.LocationName,
		count(ps.Id)TotalProduct
	FROM 
		stockinwardbasicinformation ibi
	INNER JOIN
		stockinwarditeminformation iii
	ON
		ibi.Id = iii.StockInwardBasicInformationId 
	INNER JOIN 
		productserialnumber ps 
	ON
		iii.Id = ps.StockInwardItemInformationId 
	INNER JOIN 
		warehouse w 
	ON
		w.Id = ibi.WarehouseId 
	WHERE 
		ps.IsScanned = 1
	AND
		w.IsDeleted = 0
	AND
		CheckForSalesOrderedOrNot(ps.Id)
	GROUP BY
		w.Id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `Category` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `Category`()
BEGIN
	SELECT * FROM category;
    SELECT count(*) FROM category;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CheckBarcodeExists` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `CheckBarcodeExists`(
IN _ProductSKUProfileId INT
)
BEGIN
SELECT
	BarcodeGenerated,Quantity
FROM 
	stockinwarditeminformation
WHERE
	Id=_ProductSKUProfileId;
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CheckBarcodeGenerated` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `CheckBarcodeGenerated`(
IN _productSkuProfileId int
)
BEGIN
SELECT
	BarcodeGenerated,Quantity
FROM 
	stockinwarditeminformation
WHERE
	Id=_productSkuProfileId;
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CheckBarcodeGeneratedFromStockInwardItemInformation` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `CheckBarcodeGeneratedFromStockInwardItemInformation`(
IN _stockInwardItemInformationId INT
)
BEGIN
	SELECT
		BarcodeGenerated, Quantity
	FROM 
		stockinwarditeminformation
	WHERE
		Id= _stockInwardItemInformationId ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CheckDuplicateInvoiceNumber` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `CheckDuplicateInvoiceNumber`(
	IN _invoiceNumber VARCHAR(32)
)
BEGIN
	DECLARE IsExists INT DEFAULT
		(
        SELECT
			COUNT(1) > 0 
		FROM 
			stockinwardbasicinformation 
		WHERE 
			InvoiceNumber = _invoiceNumber
		);
	SELECT IsExists;			
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CheckDuplicateSalesOrderNumber` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `CheckDuplicateSalesOrderNumber`(
	IN _salesOrderNumber VARCHAR(64)
)
BEGIN
	DECLARE IsExists INT DEFAULT
						(
                        SELECT 
							COUNT(1)>0 
                        FROM 
							salesorderbasicinformation 
                        WHERE 
							SalesOrderNumber = _salesOrderNumber
						);
	SELECT IsExists;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CheckGetInventoryDetail` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `CheckGetInventoryDetail`(
    IN _StartDate DATE,
    IN _EndDate DATE,
    IN _Name VARCHAR(255),
    IN _SortColumn VARCHAR(50),
    IN _SortOrder VARCHAR(5),
    IN _LocationId INT,
    IN _Limit INT,
    IN _Offset INT
)
BEGIN
    SELECT
        SUM(ReceivedInventory) AS ReceivedInventory,
        SUM(DispatchedInventory) AS DispatchedInventory,
        SUM(PendingInventory) AS PendingInventory,
        SUM(DamageInventory) AS DamageInventory,
        SUM(StockQuantity) AS StockQuantity,
        SUM(TotalPrice) AS TotalPrice
      
    FROM (
        SELECT
            ReceivedInventory,
            DispatchedInventory,
            PendingInventory,
            DamageInventory,
            (ReceivedInventory - (DispatchedInventory + PendingInventory)) AS StockQuantity,
             ((ReceivedInventory-(DispatchedInventory+PendingInventory))) * TotalPrice as TotalPrice
        FROM (
            SELECT
                GetReceivedInventoryCountForProductId(p.Id, _startDate, _EndDate, _LocationId) AS ReceivedInventory,
                GetSalesDispatchInventoryCountForProductId(p.Id, _startDate, _EndDate, _LocationId) AS DispatchedInventory,
                GetSalesPendingInventoryCountForProductId(p.Id, _startDate, _EndDate, _LocationId) AS PendingInventory,
                GetSalesDamageInventoryCountForProductId(p.Id, _EndDate, _LocationId) AS DamageInventory,
                GetPriceForItemsAtLocation(p.Id, _startDate, _EndDate, _LocationId) AS TotalPrice
            FROM
                product p
            WHERE
                p.IsActive = 1
                AND GetReceivedInventoryCountForProductId(p.Id, _startDate, _EndDate, _LocationId) > 0
        ) tbl
    ) tbl1;
    SET @qury = CONCAT(
        "SELECT
            p.Id,
            p.ProductSKU,
            p.Name,
            GetReceivedInventoryCountForProductId(p.Id,'", _startDate, "','", _EndDate, "',", _LocationId, ") AS ReceivedInventory,
            GetSalesDispatchInventoryCountForProductId(p.Id,'", _startDate, "','", _EndDate, "',", _LocationId, ") AS DispatchedInventory,
            GetSalesPendingInventoryCountForProductId(p.Id,'", _startDate, "','", _EndDate, "',", _LocationId, ") AS PendingInventory,
            GetSalesDamageInventoryCountForProductId(p.Id,'", _EndDate, "',", _LocationId, ") AS DamageInventory,
            GetPriceForItemsAtLocation(p.Id,'", _startDate, "','", _EndDate, "',", _LocationId, ") AS TotalPrice
        FROM
            product p
        WHERE
            p.IsActive = 1
            AND GetReceivedInventoryCountForProductId(p.Id,'", _StartDate, "','", _EndDate, "',", _LocationId, ") > 0"
    );
    IF !ISNULL(_name) AND _name <> '' THEN
        SET @qury = CONCAT(@qury, " AND p.Name LIKE '%", _Name, "%'");
    END IF;
    SET @qury2 = CONCAT('SELECT COUNT(1) AS TotalRecord FROM (', @qury, ' ) tbl');
    PREPARE stmt2 FROM @qury2;
    EXECUTE stmt2;
    DEALLOCATE PREPARE stmt2;
    SET @qury = CONCAT(@qury, " LIMIT ", _Limit, " OFFSET ", _Offset);
    SET @qury = CONCAT("SELECT * FROM (", @qury, ") tbl ORDER BY ");
    IF !ISNULL(_SortColumn) AND _SortColumn <> '' THEN
        SET @qury = CONCAT(@qury, _SortColumn);
    ELSE
        SET @qury = CONCAT(@qury, "Name");
    END IF;
    IF !ISNULL(_SortOrder) AND _SortOrder <> '' THEN
        SET @qury = CONCAT(@qury, " ", _SortOrder);
    ELSE
        SET @qury = CONCAT(@qury, " ASC");
    END IF;
    PREPARE stmt FROM @qury;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CheckInvoiceNo` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `CheckInvoiceNo`(
IN _id int
)
BEGIN
SELECT 
	COUNT(*) 
FROM 
	stockinwardbasicinformation
WHERE
	Id=_id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CheckInvoiceNumber` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `CheckInvoiceNumber`(
IN _Id INT
)
BEGIN
SELECT 
	COUNT(*) 
FROM 
	stockinwardbasicinformation
WHERE
	Id=_Id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CheckInvoiceNumberExists` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `CheckInvoiceNumberExists`(
	IN _InvoiceNumber VARCHAR(32)
)
BEGIN
	DECLARE IsExists INT DEFAULT
                          (SELECT 
                                 count(1)>0 
						   FROM 
								stockinwardbasicinformation 
						   WHERE 
								InvoiceNumber = _InvoiceNumber
						  );
	SELECT IsExists;			
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CheckSalesOrderNumberExists` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `CheckSalesOrderNumberExists`(
	IN _SalesOrderNumber VARCHAR(64)
)
begin
	declare IsExists int default(select count(1)>0 from salesorderbasicinformation where SalesOrderNumber = _SalesOrderNumber);
	select IsExists;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CheckSerialNumberAgainstSaleOrderItem` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `CheckSerialNumberAgainstSaleOrderItem`(
  IN _ProductskuId INT,
  IN _Quantity INT
)
BEGIN
  DECLARE done INT DEFAULT FALSE;
  DECLARE _itemquantity INT;
  DECLARE _id INT;
  DECLARE cur CURSOR FOR
  
  SELECT Quantity, Id FROM stockinwarditeminformation WHERE ProductId = _ProductskuId;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
  CREATE TEMPORARY TABLE IF NOT EXISTS temp_ids (id INT);
  OPEN cur;
  read_loop: LOOP
    FETCH cur INTO _itemquantity, _id;
    IF done THEN
      LEAVE read_loop;
    END IF;
    IF (_itemquantity >= _Quantity) THEN
      INSERT INTO temp_ids (id) VALUES (_id);
    END IF;
  END LOOP;
  CLOSE cur;
  SELECT SerialNumber FROM productserialnumber s
  WHERE FIND_IN_SET(id, (SELECT GROUP_CONCAT(id) FROM temp_ids));
  DROP TEMPORARY TABLE IF EXISTS temp_ids;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `DeleteCategory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `DeleteCategory`(
IN _id INT)
BEGIN
  DELETE FROM Category
  WHERE Id=_id;
  Select 1 IsSuccess, "Data Deleted Successfully" Message ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `DeleteCategorytype` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `DeleteCategorytype`(
	IN _id int,
    IN _userId int
)
BEGIN
	UPDATE 
		Category
	SET
		IsDeleted=1,
        ModifiedBy=_userId,
        ModifiedOn=NOW()
	WHERE 
		Id=_id;
        
	SELECT 
	1 IsSuccess,
    "Data Deleted Successfully" Message ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `DeleteManufacturer` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `DeleteManufacturer`(
_id int)
BEGIN
  DELETE FROM ManufacturerType
  WHERE Id=_id;
  Select 1 IsSuccess, "Data Deleted Successfully" Message ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `DeleteManufacturertype` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `DeleteManufacturertype`( 
	IN _id INT,
    IN _userId INT
)
BEGIN
  UPDATE 
		manufacturer
	SET
		IsDeleted=1,
		ModifiedOn=NOW(),
		ModifiedBy=_userId
	WHERE
		Id=_id;
        
	SELECT
		1 IsSuccess,
        'Data Deleted Successfully' Message;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `DeleteProduct` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `DeleteProduct`(
	IN _id INT,
    IN _userId INT
)
BEGIN
	 UPDATE 
		product
	 SET
		IsDeleted = 1,
        ModifiedBy = _userId,
        ModifiedOn = NOW()        
	 WHERE
		Id = _id;
        SELECT 1 IsSuccess, "Product Deleted Successfully" Message;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `DeleteSalesOrderItemInformation` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `DeleteSalesOrderItemInformation`(
	IN _id int,
	IN _userId int
)
BEGIN
	DECLARE `_rollBack` BOOL DEFAULT 0; 
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET `_rollBack` = 1;
	START
		transaction;
	UPDATE 
		salesorderitemsinformation 
	SET 
		IsDeleted = 1,
		ModifiedBy = _userId,
		ModifiedOn = NOW()
	WHERE
		Id = _id;
		
	IF 
		`_rollBack`
	THEN 
		SELECT
			'NOT DELETED' AS Message; 
	ROLLBACK; 
    
	ELSE
		SELECT
			'DELETED' AS Message; 
	COMMIT; 
	END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `DeleteUser` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `DeleteUser`(
	IN _id int,
    IN _userId int
)
BEGIN
	UPDATE 
		`user`
	SET
		IsDeleted = 1,
        ModifiedBy=_userId,
        ModifiedOn = NOW()
	WHERE 
		Id = _id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `DeleteVendor` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `DeleteVendor`(
IN _Id int,
IN _UserId int
)
BEGIN
	IF EXISTS(
				SELECT
					Id
				FROM
					vendor
				WHERE
					Id = _id
                    ) 
		THEN
		UPDATE
			vendor
		SET
			IsDeleted = 1,
			ModifiedOn=NOW(),
			ModifiedBy=_UserId
		WHERE
			Id = _Id;		 
		SELECT 
			1 IsSuccess,
            "Deleted Vendor successfully." Message;
	ELSE
		SELECT 
			0 IsSuccess,
			"Vendor not found." Message;
	END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `DeleteWarehouse` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `DeleteWarehouse`(
	IN _id int,
    IN _userId int
)
BEGIN
	 UPDATE 
		warehouse
	 SET
		IsDeleted = 1,
        ModifiedOn = Now(),
        ModifiedBy=_userId
	 WHERE
		Id = _id;	 
	 SELECT 
		1 IsSuccess,
        "Deleted Warehouse Successfully." Message;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `DirectUpdateSerialNumberSalesOrder` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `DirectUpdateSerialNumberSalesOrder`(
	IN _serialNumber varchar(16),
	IN _warehouseId int,
	IN _userId int,
	IN _salesOrderBasicInformationId int
)
BEGIN
	DECLARE tmpProductSerialNumberId int; 
	DECLARE tmpProductId int;
	DECLARE tmpSalesOrderItemInformationId int;
	DECLARE tmpVendorId int;
	SELECT 
		s.Id,
		p.ProductId
	INTO
		tmpProductSerialNumberId,
		tmpProductId
	FROM
		productserialnumber s 
	INNER JOIN
		stockinwarditeminformation p 
	ON
		s.StockInwardItemInformationId = p.Id 
	INNER JOIN 	
		stockinwardbasicinformation i 
	ON
		p.StockInwardBasicInformationId = i.Id 
	WHERE 
	s.SerialNumber = _serialNumber
AND
	s.IsScanned = 1
AND
	i.WarehouseId = _warehouseId;
    
SELECT 
	sob.VendorId 
INTO 
	tmpVendorId 
FROM 
	salesorderbasicinformation sob
WHERE 
sob.Id =_salesOrderBasicInformationId;
IF(tmpProductSerialNumberId IS NOT NULL)THEN
	IF EXISTS(SELECT Id FROM saleorderdispatchserialnumber WHERE ProductSerialNumberId = tmpProductSerialNumberId AND IsDeleted = 0)THEN
		SELECT 'Serial number is already added to sales order.' Message;
	ELSE 
		-- check for this product is already added with this salesorder or not
		SET tmpSalesOrderItemInformationId=(
								SELECT 
									Id 
								FROM 
									salesorderitemsinformation s 
								WHERE 
									SalesOrderBasicInformationId  = _salesOrderBasicInformationId 
								AND 
									ProductId = tmpProductId
							);
		IF(tmpSalesOrderItemInformationId IS NULL)THEN
			INSERT INTO salesorderitemsinformation
			(ProductId, SalesOrderBasicInformationId,Quantity, IsDeleted, CreatedBy, CreatedOn)
			VALUES(tmpProductId, _salesOrderBasicInformationId, 1, 0, _userId, NOW());
			SET tmpSalesOrderItemInformationId = last_insert_id(); 
		ELSE
			UPDATE 
				salesorderitemsinformation
			SET 
				Quantity=Quantity+1,
				ModifiedBy=_userId, 
				ModifiedOn=NOW()
			WHERE 
				Id=tmpSalesOrderItemInformationId;
		END IF;
		
		CALL SaveSerialNumberHistory(tmpProductSerialNumberId, 3, _warehouseId, _salesOrderBasicInformationId, tmpVendorId, _userId);
		INSERT INTO saleorderdispatchserialnumber
		(SalesOrderItemInformationId, ProductSerialNumberId, IsDispatched, IsDeleted, IsReturn, IsDamage, IsReturnToManufacturer, DispatchDate, ReturnDate, DamageDate, CreatedOn, CreatedBy)
		VALUES(tmpSalesOrderItemInformationId, tmpProductSerialNumberId,1, 0, 0, 0, 0, NOW(), NULL, NULL, NOW(), _userId);
		
	
        SELECT
			s.Id,
			p.ProductSKU ItemSKU, 
			m.Name Manufacturer, 
			c.Name Category, 
			p.Name Name, 
			sp.SerialNumber ,
           "Serial Number Scanned" Message
		FROM
			salesorderitemsinformation s
		INNER JOIN 
			product p
		ON p.Id = s.ProductId
		LEFT JOIN
			manufacturer m
		ON m.Id = p.ManufacturerId
		LEFT JOIN 
			category c
		ON c.Id = p.CategoryId
		INNER JOIN 
			salesorderbasicinformation sb
		ON s.SalesOrderBasicInformationId = sb.Id
		INNER JOIN
			saleorderdispatchserialnumber sdn
		ON 
			sdn.SalesOrderItemInformationId=s.Id
		INNER JOIN
			productserialnumber sp
		ON
			sdn.ProductSerialNumberId=sp.Id
		WHERE 
			s.IsDeleted=0 
		AND
			sb.Id=_salesOrderBasicInformationId
		ORDER BY sdn.Id DESC
		LIMIT 1;
	END IF;
ELSE
	SELECT 'Serial number does not exists on this location.' Message;
END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `DispatchedCountBySalesOrder` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `DispatchedCountBySalesOrder`(
	IN _salesOrderId int
)
BEGIN
	SELECT 
		COUNT(1) TotalCount,
        SUM(sods.IsDispatched) ScannedCount
	FROM
		saleorderdispatchserialnumber sods
		INNER JOIN
        salesorderitemsinformation soii 
		ON 
        sods.SalesOrderItemInformationId = soii.Id
	WHERE
		sods.IsDeleted = 0
	AND 
		soii.SalesOrderBasicInformationId = _salesOrderId;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `EditProduct` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `EditProduct`(
	IN _id int , 
	IN _productSku varchar(64),
	IN _name varchar(500),
	IN _categoryId int,
	IN _manufacturerId int,
	IN _eanCode varchar(64), 
	IN _price double,
	IN _isActive int ,
	IN _userId int
)
BEGIN
	IF EXISTS(SELECT * FROM product WHERE Id = _id) THEN
		UPDATE product
		  SET 
			ProductSKU = _productSku,
			Name = _name,
			CategoryId = _categoryId,
			ManufacturerId = _manufacturerId,
			EANCode = _eanCode,
			Price = _price,
			IsActive = _isActive,
			ModifiedOn = NOW(),
			ModifiedBy = _userId
		WHERE
			Id = _id ;
		SELECT 
			1 IsSuccess, 
            "Edited successfully!" Message;
	ELSE
		SELECT 
			0 IsSuccess, 
            "Id not found!" Message;
	END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `EditUserProfile` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `EditUserProfile`(
	IN _id int, 
    IN _email varchar(64), 
    IN _userName varchar(64), 
    IN _mobile varchar(64) 
)
BEGIN
	UPDATE 
		user u 
	JOIN 
		logindetail lp 
	ON 
		u.Id = lp.UserId
	SET  
		u.Email = _email, 
		u.Name = _userName,
        u.mobile = _mobile
	WHERE
		u.Id = _id; 
	
    Select 
		1 IsSuccess, 
        'Profile Update Succesfully' Message;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `EditVendor` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `EditVendor`(
	IN _id int,
	IN _companyName varchar(64),
	IN _companyTypeId int,
	IN _vendorTypeId int,
	IN _gst varchar(16),
	IN _isActive int,
	IN _address varchar(256),
	IN _contactName varchar(64),
	IN _contactMobile varchar(16),
	IN _contactEmail varchar(64),
	IN _userId int
)
BEGIN
	IF EXISTS(SELECT Id FROM vendor WHERE Id = _id) THEN
		UPDATE 
			vendor 
		SET 
			CompanyName = _companyName, 
			ContactName = _contactName, 
			ContactMobile = _contactMobile, 
			ContactEmail = _contactEmail, 
			CompanyTypeId = _companyTypeId, 
			VendorTypeId = _vendorTypeId, 
			Address = _address, 
			GST = _gst, 
			IsActive = _isActive, 
			ModifiedOn = NOW(), 
			ModifiedBy = _userId
		WHERE
			Id = _id;
		SELECT 
			1 IsSuccess, 
			"Vendor Edited Successfully!" Message;
	ELSE
		SELECT 0 IsSuccess, 
        "Vendor not found." Message;
	END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `EditWarehouse` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `EditWarehouse`(
	IN _id int,
	IN _locationName varchar(64),
	IN _warehouseTypeId  int, 
	IN _maxCapacity decimal(10,2), 
	IN _address varchar(256), 
	IN _description varchar(512), 
	IN _isActive int,
	IN _userId int
)
BEGIN
	IF EXISTS(SELECT * FROM warehouse WHERE Id = _id) THEN
		UPDATE warehouse
		SET 
			LocationName = _locationName,
			WarehouseTypeId = _warehouseTypeId,
			MaxCapacity = _maxCapacity,
			Address = _address,
			Description = _description,
			IsActive = _isActive,
			ModifiedOn = NOW(),
			ModifiedBy = _userId
		WHERE
			Id = _id;
        
		SELECT 
			1 IsSuccess, 
            "Edited successfully!" Message;
	ELSE
		SELECT 
        0 IsSuccess, 
        "Id not found!" Message;
	END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ExcelGetInventoryDetail` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `ExcelGetInventoryDetail`(
	IN _startDate date,
	IN _endDate date,
	IN _name varchar(255),
	IN _locationId int
    )
BEGIN
	
    SELECT
		SUM(ReceivedInventory)ReceivedInventory,
		SUM(DispatchedInventory)DispatchedInventory,
		SUM(PendingInventory)PendingInventory,
		SUM(StockQuantity)StockQuantity,
		SUM(TotalPrice)TotalPrice
	FROM 
	(SELECT 
		ReceivedInventory,
		DispatchedInventory,
		PendingInventory,
		(ReceivedInventory-(DispatchedInventory+PendingInventory))StockQuantity,
		((ReceivedInventory-(DispatchedInventory+PendingInventory)))*Price TotalPrice
	FROM 
	(
		SELECT 
		GetReceivedInventoryCountForProductId(p.Id,_startDate, _endDate, _locationId)ReceivedInventory,
			GetSalesDispatchInventoryCountForProductId(p.Id,_startDate, _endDate, _locationId)DispatchedInventory,
			GetSalesPendingInventoryCountForProductId(p.Id,_startDate, _endDate, _locationId)PendingInventory,
			p.Price 
		FROM 
			product p 
		WHERE 
			p.IsActive = 1
	)tbl)tbl1;
	SET @qury = CONCAT("SELECT 
							
							p.ProductSKU,
							p.Name,
							GetReceivedInventoryCountForProductId(p.Id,'",_startDate,"','", _endDate,"',",_locationId,")ReceivedInventory,
							GetSalesDispatchInventoryCountForProductId(p.Id,'",_startDate,"','", _endDate,"',",_locationId,")DispatchedInventory,
							GetSalesPendingInventoryCountForProductId(p.Id,'",_startDate,"','", _endDate,"',",_locationId,")PendingInventory,
							p.Price 
						FROM 
							product p 
						WHERE 
							p.IsActive = 1"
				);
	PREPARE stmt2 FROM @qury;
	EXECUTE stmt2;
    DEALLOCATE PREPARE stmt2;	
   
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetActionTypeDropdown` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetActionTypeDropdown`()
BEGIN
SELECT
     Id `Key`,
     ActionType `Value`
FROM 
     actiontype;    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetActiveDropdown` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetActiveDropdown`()
BEGIN
SELECT 
	a.Id `Key`,
    a.Status `Value`
FROM
	activeprofile a;
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetAuditItemCountAsPerWarehouseId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetAuditItemCountAsPerWarehouseId`(
	IN _Id int
)
BEGIN
	SELECT 
		tbl.AuditId,
		tbl.CategoryId,
		c.Name,
		tbl.TotalCount,
		tbl.TotalAuditDoneCount
	FROM (
		SELECT 
			s.Id AuditId,
			sai.CategoryId,
			count(sai.CategoryId)TotalCount,
			SUM(sai.IsAuditDone)TotalAuditDoneCount
		FROM 
			stockaudititem sai
		INNER JOIN
			stockauditinitiation s
		ON
			sai.StockAuditInitiationId = s.Id
		WHERE 
			s.WarehouseId = _Id
		AND
			s.IsAuditDone = 0
		GROUP BY s.Id,sai.CategoryId 
		ORDER BY 
			s.Id,sai.CategoryId
	)tbl
	INNER JOIN 
		category c 
	ON
		c.Id = tbl.CategoryId;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetByIdCategory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetByIdCategory`(
IN _id int
)
BEGIN
	SELECT 
		Categorytype
	FROM
		CategoryType
	WHERE
		Id=_id;
	SELECT 1 IsSuccess, "Data Fetched Successfully" Message ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetByIdCategoryType` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetByIdCategoryType`(
	IN _id int
)
BEGIN
	SELECT 
		`Name` As CategoryType
	FROM 
		Category
	WHERE 
		Id=_id
        And
        IsDeleted=0;
			SELECT
		1 IsSuccess,
		"Data Fetched Successfully" Message ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetByIdManufacturerType` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetByIdManufacturerType`(
IN _id int
)
BEGIN
	SELECT 
		`Name` AS ManufacturerType
	FROM 
		Manufacturer
	WHERE 
		Id=_id AND IsDeleted=0 ;
	SELECT 1 IsSuccess, "Data Fetched Successfully" Message ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetByIdVendor` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetByIdVendor`(
IN _id int
)
BEGIN
	SELECT 
		vp.Id,
		vp.CompanyName,
        vp.ContactName,
        vp.ContactMobile,
        vp.ContactEmail,
        vp.Address,
        vp.GST,
		vp.CompanyTypeId,
		vp.VendorTypeId,
		vp.IsActive
	FROM 
		vendor vp
	WHERE 
		vp.IsDeleted=0 AND vp.Id=_id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetByIdWarehouse` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetByIdWarehouse`(IN _id int)
BEGIN
		SELECT 
			w.LocationName as LocationName,
			t.Id as `Type` , 
			w.Id,
			w.MaxCapacity as MaxCapacity, 
			a.Id  as IsActive,
			w.Address as Address,
			w.Description as Description
        FROM 
			warehouse w 
		LEFT JOIN 
			warehousetype t 
		ON 
			w.WarehouseTypeId = t.Id
		LEFT JOIN 
			activeprofile a
		ON 
			w.IsActive = a.Id 
		WHERE 
			w.Id = _id ; 
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCategory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetCategory`()
BEGIN
	SELECT 
		Id `Key`, Categorytype `Value` 
	FROM 
		categorytype;
	SELECT 1 IsSuccess, "Data Fetched Successfully" Message ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCategoryDropdown` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetCategoryDropdown`()
BEGIN
	SELECT 
		c.Id `Key`,
		c.Name `Value`
	FROM
		category c;
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCategoryType` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetCategoryType`()
BEGIN
	SELECT 
		Id `Key`, Name `Value` 
	FROM 
		Category where IsDeleted=0;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompanyTypeDropdown` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetCompanyTypeDropdown`()
BEGIN
	SELECT 
		c.Id `Key`,
		c.CompanyType `Value`
	FROM
		companytype c;
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCustomerDropdown` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetCustomerDropdown`()
BEGIN
	SELECT 
		v.Id `Key`,
		v.CompanyName `Value`
	FROM
		vendor v;    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDepartmentDropdown` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetDepartmentDropdown`()
BEGIN
	SELECT 
		r.Id `Key`,
		r.Name `Value`
	FROM
		userrole r;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDetailsofSalesOrder` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetDetailsofSalesOrder`(
IN _offset int,
IN _limit int,
IN _orderNumber varchar(32),
IN _customerId int,
IN _movementTypeId int,
IN _warehouseId int,
IN _outType int,
IN _fromDate varchar(16),
IN _toDate varchar(16),
IN _statusId int
)
BEGIN
	DECLARE totalCount int;
	DECLARE iteration int;
	DECLARE pageNum int DEFAULT(_offset);
	SET _offset=((_offset-1)*_limit);
    
	SET @qury = 
	CONCAT('
		SELECT 
			s.`Id` Id,
			s.`SalesOrderNumber` OrderNo,
            v.`CompanyName` Customer,
			m.`MovementType` MovementType, 
			wp.`LocationName` SourceLocation,
			s.`DateofSale` As DateTime,
            so.StatusType Status,
            ot.TYPE OutType
		FROM 
			SalesOrderBasicInformation s
		INNER JOIN 
            outtype ot 
		ON 
			s.OutTypeId = ot.Id 
		INNER JOIN 
            vendor v
		ON
            v.Id=s.VendorId
		INNER JOIN
            salesordermovementtype m
		ON
            m.Id = s.MovementTypeId
		INNER JOIN
			warehouse wp
		ON
			wp.Id=s.WarehouseId
		INNER JOIN
            saleorderstatus so
		ON
            so.Id = s.SaleOrderStatusId
		WHERE 
            s.IsDeleted=0 ');    
           -- AND s.StatusId=2 
           
	IF _orderNumber <> '' AND _orderNumber IS NOT NULL
    THEN
		SET  @qury = concat(@qury," AND (s.SalesOrderNumber like '%",_orderNumber,"%') ");
	END IF;
    
    IF _customerId <> 0 AND _customerId IS NOT NULL
    THEN
		SET @qury = CONCAT(@qury, " AND  s.VendorId=", _customerId);
	END IF;
    
    IF _movementTypeId <> 0 AND _movementTypeId IS NOT NULL
    THEN
		SET @qury = CONCAT(@qury, " AND s.MovementTypeId=", _movementTypeId);
	END IF;
     
    IF _warehouseId <> 0 AND _warehouseId IS NOT NULL
    THEN
		SET @qury = CONCAT(@qury, " AND s.WarehouseId=", _warehouseId);
	END IF; 
    
	IF _outType <> 0 AND _outType IS NOT NULL
    THEN
		SET @qury = CONCAT(@qury, " AND s.OutTypeId=", _outType);
	END IF; 
    
	IF _fromDate IS NOT NULL AND !ISNULL(_toDate) 
	THEN
		SET @qury = CONCAT(@qury, ' AND s.DateofSale BETWEEN ''', _fromDate, ''' AND ''', _toDate, '''');
	END IF;
    
	IF _statusId <> 0 AND _statusId IS NOT NULL
    THEN
		SET @qury = CONCAT(@qury, " AND s.SaleOrderStatusId= ", _statusId);
	END IF; 
   
    SET @qury = CONCAT(@qury, " ORDER BY s.Id DESC LIMIT ", _limit, " OFFSET ", _offset);
	PREPARE stmt FROM @qury;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;
    
    SET @qury2 = CONCAT('SELECT COUNT(1) AS TotalRecord, ',_limit,' PageSize, ', pageNum ,' PageNum FROM (', @qury,' ) counts');
	PREPARE stmt2 FROM @qury2;
	EXECUTE stmt2;
    DEALLOCATE PREPARE stmt2;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDirectOutward` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetDirectOutward`(
IN _pageNum int, 
IN _pageSize int
)
BEGIN 
	DECLARE totalCount int;
	DECLARE iteration int;
	DECLARE _offset int; 
	DECLARE pageNum int DEFAULT(_offset);
    SET _offset = (_pageNum - 1) * _pageSize; 
    SET @query = CONCAT('
    SELECT
		sob.Id,
		vp.CompanyName Company,
		sob.SalesOrderNumber,
		wp.LocationName Location,
		mt.MovementType,
		date_format(sob.DateofSale, "%d %b %Y %h:%i %p") SalesDate,
		ot.TYPE OutType
	FROM
		salesorderbasicinformation sob
	LEFT JOIN
		warehouse wp 
	ON 
		wp.Id = sob.WarehouseId
	LEFT JOIN
		movementtype mt 
	ON 
		mt.Id = sob.MovementTypeId
	LEFT JOIN
		vendor vp 
	ON 	
		vp.Id = sob.VendorId
	LEFT JOIN
		outtype ot 
	ON 
		ot.Id = sob.OutTypeId 
	Where 
		sob.OutTypeId = 1 '
     ); 
    
    SET @query = CONCAT(@query, ' ORDER BY  sob.Id LIMIT ', _offset, ', ', _pageSize); 
	
    PREPARE stmt FROM @query; 
    EXECUTE stmt; 
    DEALLOCATE PREPARE stmt; 
        SET @qury2 = CONCAT('SELECT COUNT(*) AS TotalRecord, ',_pageSize,' PageSize, ', _pageNum ,' PageNum FROM (', @query,' ) counts');
	PREPARE stmt2 FROM @qury2;
	EXECUTE stmt2;
    DEALLOCATE PREPARE stmt2;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDispatchedGoodsDetailsByMonthByLocationId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetDispatchedGoodsDetailsByMonthByLocationId`(
	IN _filterMonth date,
    IN _locationId int
)
BEGIN
	
    DROP TEMPORARY TABLE IF EXISTS MtdValueView;
	CREATE TEMPORARY TABLE MtdValueView AS (
    SELECT
		ps.ProductId, 
		(pp.Price * SUM(ps.quantity)) MtdValue
    FROM 
		stockinwarditeminformation ps
	INNER JOIN
		productserialnumber snp 
	ON
		ps.Id = snp.StockInwardItemInformationId 
	RIGHT JOIN 
		saleorderdispatchserialnumber sod
	ON
		sod.ProductSerialNumberId = snp.Id
	INNER JOIN 
		salesorderitemsinformation soii
    ON 
		soii.Id = sod.SalesOrderItemInformationId
	INNER JOIN
		salesorderbasicinformation sobi
	ON		
		soii.SalesOrderBasicInformationId = sobi.Id
	INNER JOIN 
		product pp 
	ON 
		ps.ProductId = pp.Id 
	WHERE 
		sobi.WarehouseId = _locationId
	AND 
		sod.IsDispatched = 1
	AND 
		pp.IsDeleted = 0 
	AND
		DATE(snp.ScanDate) < _filterMonth
	GROUP BY 
		ps.ProductId );
 DROP TEMPORARY TABLE IF EXISTS ProductSkuDetailsView;
  CREATE TEMPORARY TABLE ProductSkuDetailsView AS (
	SELECT
		ps.ProductId, 
		pp.Name ProductSkuName, 
		SUM(ps.quantity) StockQuantity, 
		(pp.Price * SUM(ps.quantity)) StockValue
    FROM 
		stockinwarditeminformation ps
	INNER JOIN
		productserialnumber snp 
	ON
		ps.Id = snp.StockInwardItemInformationId 
	RIGHT JOIN 
		saleorderdispatchserialnumber sod
	ON
		sod.ProductSerialNumberId = snp.Id
	INNER JOIN 
		salesorderitemsinformation soii
    ON 
		soii.Id = sod.SalesOrderItemInformationId
	INNER JOIN
		salesorderbasicinformation sobi
	ON		
		soii.SalesOrderBasicInformationId = sobi.Id
	INNER JOIN 
		product pp 
	ON 
		ps.ProductId = pp.Id 
	WHERE 
		sobi.WarehouseId = _locationId
	AND 
		sod.IsDispatched = 1
	AND
		pp.IsDeleted = 0 
	AND
		DATE(snp.ScanDate) BETWEEN DATE_FORMAT(_filterMonth, '%Y-%m-01') AND _filterMonth
	GROUP BY 
		ps.ProductId);
        
	SELECT 	
		mv.ProductId, 
		ProductSkuName, 
		StockQuantity, 
		StockValue,
        mv.MtdValue
    FROM     
		ProductSkuDetailsView ps
	INNER JOIN 
		MtdValueView mv
	ON mv.ProductId = ps.ProductId;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetExcelForInventoryAllExport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`backup`@`%` PROCEDURE `GetExcelForInventoryAllExport`(
	in _startDate date,
	in _endDate date,
	 in _name varchar(255),
     in _locationId int
    )
BEGIN
	SELECT
		SUM(GetReceivedInventoryCountForProductId(p.Id, _startDate, _endDate, _locationId)) AS ReceivedInventory,
		SUM(GetSalesDispatchInventoryCountForProductId(p.Id, _startDate, _endDate, _locationId)) AS DispatchedInventory,
		SUM(GetSalesPendingInventoryCountForProductId(p.Id, _startDate, _endDate, _locationId)) AS PendingInventory,
		SUM(GetSalesDamageInventoryCountForProductId(p.Id,_startDate,  _endDate, _locationId)) AS DamageInventory,
		SUM(GetStockQuantityByProductLocationId(p.Id,_startDate,  _endDate, _locationId)) AS StockQuantity,
		SUM(GetPriceForItemsAtLocation(p.Id, _startDate, _endDate, _locationId)) AS TotalPrice
	FROM
		product p
	WHERE
		p.IsActive = 1;

    SET @qury = CONCAT(
        "SELECT
            p.Id,
            p.ProductSKU,
            p.Name,
            GetReceivedInventoryCountForProductId(p.Id,'", _startDate, "','", _endDate, "',", _locationId, ") AS ReceivedInventory,
            GetSalesDispatchInventoryCountForProductId(p.Id,'", _startDate, "','", _endDate, "',", _locationId, ") AS DispatchedInventory,
            GetSalesPendingInventoryCountForProductId(p.Id,'", _startDate, "','", _endDate, "',", _locationId, ") AS PendingInventory,
            GetSalesDamageInventoryCountForProductId(p.Id,'", _startDate, "','", _endDate, "',", _locationId, ") AS DamageInventory,
            GetStockQuantityByProductLocationId(p.Id,'", _startDate, "','", _endDate, "',", _locationId, ") AS StockQuantity ,
            GetPriceForItemsAtLocation(p.Id,'", _startDate, "','", _endDate, "',", _locationId, ")  AS TotalPrice
        FROM
            product p
        WHERE
            p.IsActive = 1
            "
    );
	-- select @qury;

	PREPARE stmt2 FROM @qury;
	EXECUTE stmt2;
    DEALLOCATE PREPARE stmt2;	
   
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetExcelForInventoryExport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`backup`@`%` PROCEDURE `GetExcelForInventoryExport`(
	in _startDate date,
	in _endDate date,
	 in _name varchar(255),
     in _locationId int
    )
BEGIN
	SELECT
		SUM(GetReceivedInventoryCountForProductId(p.Id, _startDate, _endDate, _locationId)) AS ReceivedInventory,
		SUM(GetSalesDispatchInventoryCountForProductId(p.Id, _startDate, _endDate, _locationId)) AS DispatchedInventory,
		SUM(GetSalesPendingInventoryCountForProductId(p.Id, _startDate, _endDate, _locationId)) AS PendingInventory,
		SUM(GetSalesDamageInventoryCountForProductId(p.Id,_startDate,  _endDate, _locationId)) AS DamageInventory,
		SUM(GetStockQuantityByProductLocationId(p.Id,_startDate,  _endDate, _locationId)) AS StockQuantity,
		SUM(GetPriceForItemsAtLocation(p.Id, _startDate, _endDate, _locationId)) AS TotalPrice
	FROM
		product p
	WHERE
		p.IsActive = 1
        AND
        GetReceivedInventoryCountForProductId(p.Id, _startDate, _endDate, _locationId) > 0
        ;

    SET @qury = CONCAT(
        "SELECT
            p.Id,
            p.ProductSKU,
            p.Name,
            GetReceivedInventoryCountForProductId(p.Id,'", _startDate, "','", _endDate, "',", _locationId, ") AS ReceivedInventory,
            GetSalesDispatchInventoryCountForProductId(p.Id,'", _startDate, "','", _endDate, "',", _locationId, ") AS DispatchedInventory,
            GetSalesPendingInventoryCountForProductId(p.Id,'", _startDate, "','", _endDate, "',", _locationId, ") AS PendingInventory,
            GetSalesDamageInventoryCountForProductId(p.Id,'", _startDate, "','", _endDate, "',", _locationId, ") AS DamageInventory,
            GetStockQuantityByProductLocationId(p.Id,'", _startDate, "','", _endDate, "',", _locationId, ") AS StockQuantity ,
            GetPriceForItemsAtLocation(p.Id,'", _startDate, "','", _endDate, "',", _locationId, ")  AS TotalPrice
        FROM
            product p
        WHERE
            p.IsActive = 1
            AND
             GetReceivedInventoryCountForProductId(p.Id,'", _startDate, "','", _endDate, "',", _locationId, ")
            > 0 
            "
    );
	-- select @qury;

	PREPARE stmt2 FROM @qury;
	EXECUTE stmt2;
    DEALLOCATE PREPARE stmt2;	
   
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetInfoForBarcodePage` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetInfoForBarcodePage`(
IN _productSkuProfileId int
)
BEGIN
	SELECT 
		inv.InvoiceNumber,
		inv.DateOfPurchase,
		vp.CompanyName,
		inv.PurchaseOrderNumber,
		mt.MovementType
	FROM 
		stockinwardbasicinformation inv
	INNER JOIN
		stockinwarditeminformation psp
	ON
		psp.StockInwardBasicInformationId = inv.Id 
	INNER JOIN
		vendor vp
	ON
		inv.VendorId=vp.Id
	INNER JOIN 
		movementtype mt
	ON
		inv.MoveTypeId=mt.Id
	WHERE 
		psp.Id = _productSkuProfileId;
	SELECT 
		psp.Id,
		pp.ProductSKU,
		m.Name Manufacturer,
		c.Name Category,
		pp.Name ProductName,
		psp.Quantity,
		GetPendingScanCount(psp.Id)NotScanedCount,
		psp.IsScanCompleted,
		psp.Printed,
	   CASE 
			WHEN psp.BarcodeGenerated = 1 THEN 'Barcode Generated'
			ELSE 'Barcode Pending'
			END AS `Status`
	FROM 
		stockinwarditeminformation psp
	INNER JOIN
		product pp 
	ON
		psp.ProductId = pp.Id 
	LEFT JOIN 
		manufacturer m
	ON
		m.Id = pp.ManufacturerId 
	LEFT JOIN 
		category c
	ON
		pp.CategoryId = c.Id
		
	WHERE psp.Id = _productSkuProfileId;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetInventoryDetail` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`backup`@`%` PROCEDURE `GetInventoryDetail`(
    IN _startDate DATE,
    IN _endDate DATE,
    IN _name VARCHAR(255),
    IN _sortColumn VARCHAR(50),
    IN _sortOrder VARCHAR(5),
    IN _locationId INT,
    IN _limit INT,
    IN _offset INT 
)
BEGIN
    SELECT
        SUM(ReceivedInventory) AS ReceivedInventory,
        SUM(DispatchedInventory) AS DispatchedInventory,
        SUM(PendingInventory) AS PendingInventory,
        SUM(DamageInventory) AS DamageInventory,
        SUM(StockQuantity) AS StockQuantity,
        SUM(TotalPrice) AS TotalPrice
      
    FROM (
            SELECT
                GetReceivedInventoryCountForProductId(p.Id, _startDate, _endDate, _locationId) AS ReceivedInventory,
                GetSalesDispatchInventoryCountForProductId(p.Id, _startDate, _endDate, _locationId) AS DispatchedInventory,
                GetSalesPendingInventoryCountForProductId(p.Id, _startDate, _endDate, _locationId) AS PendingInventory,
                GetSalesDamageInventoryCountForProductId(p.Id,_startDate,  _endDate, _locationId) AS DamageInventory,
                GetStockQuantityByProductLocationId(p.Id,_startDate,  _endDate, _locationId) AS StockQuantity,
                GetPriceForItemsAtLocation(p.Id, _startDate, _endDate, _locationId) AS TotalPrice
            FROM
                product p
            WHERE
                p.IsActive = 1
			AND
				GetReceivedInventoryCountForProductId(p.Id, _startDate, _endDate, _locationId) > 0 
        ) tbl;

    SET @qury = CONCAT(
        "SELECT
            p.Id,
            p.ProductSKU,
            p.Name,
			GetReceivedInventoryCountForProductId(p.Id,'", _startDate, "','", _endDate, "',", _locationId, ") AS ReceivedInventory,
			GetSalesDispatchInventoryCountForProductId(p.Id,'", _startDate, "','", _endDate, "',", _locationId, ") AS DispatchedInventory,
			GetSalesPendingInventoryCountForProductId(p.Id,'", _startDate, "','", _endDate, "',", _locationId, ") AS PendingInventory,
			GetSalesDamageInventoryCountForProductId(p.Id,'", _startDate, "','", _endDate, "',", _locationId, ") AS DamageInventory,
			GetStockQuantityByProductLocationId(p.Id,'", _startDate, "','", _endDate, "',", _locationId, ") AS StockQuantity,
			GetPriceForItemsAtLocation(p.Id,'", _startDate, "','", _endDate, "',", _locationId, ") AS TotalPrice
        FROM
            product p
        WHERE
            p.IsActive = 1
			AND
            GetReceivedInventoryCountForProductId(p.Id,'", _startDate, "','", _endDate, "',", _locationId, ") > 0
            "
    );

    IF !ISNULL(_name) AND _name <> '' THEN
        SET @qury = CONCAT(@qury, " AND p.Name LIKE '%", _name, "%'");
    END IF;

    SET @qury2 = CONCAT('SELECT COUNT(1) AS TotalRecord FROM (', @qury, ' ) tbl');
    PREPARE stmt2 FROM @qury2;
    EXECUTE stmt2;
    DEALLOCATE PREPARE stmt2;

    SET @qury = CONCAT(@qury, " LIMIT ", _limit, " OFFSET ", _offset);

    SET @qury = CONCAT("SELECT * FROM (", @qury, ") tbl ORDER BY ");

    IF !ISNULL(_sortColumn) AND _sortColumn <> '' THEN
        SET @qury = CONCAT(@qury, _sortColumn);
    ELSE
        SET @qury = CONCAT(@qury, "Name");
    END IF;

    IF !ISNULL(_sortOrder) AND _sortOrder <> '' THEN
        SET @qury = CONCAT(@qury, " ", _sortOrder);
    ELSE
        SET @qury = CONCAT(@qury, " ASC");
    END IF;

    PREPARE stmt FROM @qury;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetInventoryDetailAtLocation` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetInventoryDetailAtLocation`(
	IN _warehouseId int
)
BEGIN
	DECLARE brandCount int DEFAULT 0;
	DECLARE categoryCount int DEFAULT 0;
	DECLARE supplierCount int DEFAULT 0;

	SELECT 
		SUM(1) TotalStockInHand,
		SUM(pp.Price)TotalPrice
	FROM 
		stockinwardbasicinformation inv 
	INNER JOIN
		stockinwarditeminformation psp 
	ON
		inv.Id = psp.StockInwardBasicInformationId 
	INNER JOIN 	
		product pp 
	ON
		psp.ProductId = pp.Id 
	INNER JOIN 
		productserialnumber s 
	ON
		psp.Id = s.StockInwardItemInformationId 
	WHERE 
		inv.WarehouseId = _warehouseId
	AND
		s.IsScanned = 1
	AND
		CheckForSalesOrderedOrNot(s.Id);
	
	SET brandCount=(
			SELECT 
				COUNT(DISTINCT 
				pp.ManufacturerId)
			FROM 
				stockinwardbasicinformation inv 
			INNER JOIN
				stockinwarditeminformation psp 
			ON
				inv.Id = psp.StockInwardBasicInformationId 
			INNER JOIN 	
				product pp 
			ON
				psp.ProductId = pp.Id 
			INNER JOIN
				productserialnumber s 
			ON
				psp.Id = s.StockInwardItemInformationId 
			WHERE 
				inv.WarehouseId = _warehouseId
			AND
				s.IsScanned = 1
			AND
				CheckForSalesOrderedOrNot(s.Id)
			);
		
	SET categoryCount=(
		SELECT 
			COUNT(DISTINCT 
			pp.CategoryId)
		FROM 
			stockinwardbasicinformation inv 
		INNER JOIN
			stockinwarditeminformation psp 
		ON
			inv.Id = psp.StockInwardBasicInformationId 
		INNER JOIN 	
			product pp 
		ON
			psp.ProductId = pp.Id 
		INNER JOIN 
			productserialnumber s 
		ON
			psp.Id = s.StockInwardItemInformationId 
		WHERE 
			inv.WarehouseId = _warehouseId
		AND
			s.IsScanned = 1
		AND
			CheckForSalesOrderedOrNot(s.Id)
		);
	
	SET supplierCount=(
		SELECT 
			COUNT(DISTINCT 
			inv.VendorId)
		FROM 
			stockinwardbasicinformation inv 
		INNER JOIN
			stockinwarditeminformation psp 
		ON
			inv.Id = psp.StockInwardBasicInformationId 
		INNER JOIN	
			product pp 
		ON
			psp.ProductId = pp.Id 
		INNER JOIN 
			productserialnumber s 
		ON
			psp.Id = s.StockInwardItemInformationId 
		WHERE 
			inv.WarehouseId = _warehouseId
		AND
			s.IsScanned = 1
		AND
			CheckForSalesOrderedOrNot(s.Id)
		);
	
	SELECT brandCount BrandCount, categoryCount CategoryCount, supplierCount SupplierCount;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetInventoryDetailByBrandForLocation` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetInventoryDetailByBrandForLocation`(
	IN _warehouseId int
)
BEGIN
	/*select 
		m.Id,
		m.Name,
		tbl.TotalPrice,
        GetDataForJsonInventory(_warehouseId,tbl.ManufacturerId) AS JsonList
	from(
		select 
			pp.ManufacturerId,
			sum(pp.Price) TotalPrice
		from 
			invoiceprofile inv 
		inner join
			productskuprofile psp 
		on
			inv.Id = psp.InvoiceNoId 
		inner join 	
			productsprofile pp 
		on
			psp.ProductSkuId = pp.Id 
		inner join 
			serialnumberprofile s 
		on
			psp.Id = s.ProductSkuProfileId 
		where 
			inv.WarehouseLocationId = _warehouseId
		and
			s.IsScanned = 1
		and
			CheckForSalesOrderedOrNot(s.Id)
		group by 
			pp.ManufacturerId
	)tbl
    
	inner join 
		manufacturer m
	on
		tbl.ManufacturerId = m.Id;*/
	SELECT 
		tbl.ManufacturerId Id,
		tbl.Manufacturer Name,
		JSON_ARRAYAGG(tbl.Products)JsonList,
		SUM(tbl.Price) TotalPrice
	FROM 
	(SELECT 
		tbl.ManufacturerId,
		tbl.Manufacturer,
		JSON_OBJECT("Name",tbl.ProductName,"TotalPrice",SUM(tbl.Price),"Quantity",SUM(tbl.Quantity))Products,
		SUM(tbl.Price)Price
	FROM 
	(
		SELECT 
			pp.ManufacturerId,
			m.Name Manufacturer,
			pp.Id ProductId,
			pp.Name ProductName,
			SUM(psp.Price)Price,
			COUNT(s.Id)Quantity
		FROM 
			stockinwardbasicinformation inv 
		INNER JOIN
			stockinwarditeminformation psp 
		ON
			inv.Id = psp.StockInwardBasicInformationId 
		INNER JOIN 	
			product pp 
		ON
			psp.ProductId = pp.Id 
		INNER JOIN 
			productserialnumber s 
		ON
			psp.Id = s.StockInwardItemInformationId 
		INNER JOIN 
			manufacturer m
		ON
			m.Id = pp.ManufacturerId 
		INNER JOIN
			(SELECT ProductSerialNumberId FROM saleorderdispatchserialnumber s WHERE IsDeleted = 0) sdn 
		ON
			sdn.ProductSerialNumberId = s.Id 
		WHERE 
			inv.WarehouseId = _warehouseId
		AND
			s.IsScanned = 1
		AND
			sdn.ProductSerialNumberId IS NULL
		GROUP BY psp.Id
	)tbl GROUP BY tbl.ManufacturerId,tbl.ProductName)tbl GROUP BY tbl.Manufacturer ORDER BY tbl.ManufacturerId;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetInventoryDetailByCategoryForLocation` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetInventoryDetailByCategoryForLocation`(
	IN _warehouseId int
)
BEGIN
	SELECT 
		c.Id,
		c.Name,
		tbl.TotalPrice,
        GetInventoryDetailByCategoryOnLocationFunction(_warehouseId,tbl.CategoryId) As JsonList
	FROM(
		SELECT 
			pp.CategoryId,
			SUM(pp.Price) TotalPrice
		FROM 
			stockinwardbasicinformation inv 
		INNER JOIN
			stockinwarditeminformation psp 
		ON
			inv.Id = psp.StockInwardBasicInformationId 
		INNER JOIN 	
			product pp 
		ON
			psp.ProductId = pp.Id 
		INNER JOIN 
			productserialnumber s 
		ON
			psp.Id = s.StockInwardItemInformationId 
		WHERE 
			inv.WarehouseId = _warehouseId
		AND
			s.IsScanned = 1
		AND
			CheckForSalesOrderedOrNot(s.Id)
		GROUP BY 
			pp.CategoryId
	)tbl
	INNER JOIN 
		category c
	ON
		tbl.CategoryId = c.Id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetInventoryDetailByVendorForLocation` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetInventoryDetailByVendorForLocation`(
	IN _warehouseId int
)
BEGIN

	SELECT 
		v.Id,
		v.CompanyName Name,
		tbl.TotalPrice,
        InventoryByVendorlocationFunction(_warehouseId, tbl.VendorId) As JsonList
	FROM(
		SELECT 
			sibi.VendorId,
			sum(p.Price) TotalPrice
		FROM 
			stockinwardbasicinformation sibi 
		INNER JOIN
			stockinwarditeminformation siii 
		ON
			sibi.Id = siii.StockInwardBasicInformationId 
		INNER JOIN 	
			product p
		ON
			siii.ProductId = p.Id 
		INNER JOIN 
			productserialnumber psn
		ON
			siii.Id = psn.StockInwardItemInformationId 
		WHERE 
			sibi.WarehouseId = _warehouseId
		AND
			psn.IsScanned = 1
		AND
			CheckForSalesOrderedOrNot(psn.Id)
		GROUP BY 
			sibi.VendorId
	)tbl
	INNER JOIN 
		vendor v 
	ON
		tbl.VendorId = v.Id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetInventoryDetailForBrandOnLocation` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetInventoryDetailForBrandOnLocation`(
	in _warehouseId int,
	in _manufacturerId int
)
begin
	select 
		p.Name,
		p.Price,
		count(psn.Id)Quantity,
		sum(p.Price)TotalPrice
	from 
		stockinwardbasicinformation sibi
	inner join
		stockinwarditeminformation siii 
	on
		sibi.Id = siii.StockInwardBasicInformationId
	inner join 	
		product p
	on
		siii.ProductId = p.Id 
	inner join 
		productserialnumber psn 
	on
		siii.Id = psn.StockInwardItemInformationId 
	where 
		sibi.WarehouseId = _warehouseId
	and
		p.ManufacturerId = _manufacturerId
	and
		psn.IsScanned = 1
	and
		CheckForSalesOrderedOrNot(psn.Id)
	group by
		p.Id;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetInventoryDetailForCategoryOnLocation` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetInventoryDetailForCategoryOnLocation`(
	in _warehouseId int,
	in _categoryId int
)
begin
	select 
		m.Name,
		count(psn.Id) Quantity,
		sum(p.Price) TotalPrice
	from 
		 stockinwardbasicinformation sibi 
	inner join
		stockinwarditeminformation siii
	on
		sibi.Id = siii.StockInwardBasicInformationId
	inner join 	
		product p 
	on
		siii.ProductId = p.Id 
	inner join 
		productserialnumber psn 
	on
		siii.Id = psn.StockInwardItemInformationId 
	inner join 
		manufacturer m 
	on
		p.ManufacturerId = m.Id
	where 
		sibi.WarehouseId = _warehouseId
	and
		p.CategoryId = _categoryId
	and
		psn.IsScanned = 1
	and
		CheckForSalesOrderedOrNot(psn.Id)
	group by
		m.Id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetInventoryDetailForVendorOnLocation` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetInventoryDetailForVendorOnLocation`(
	in _warehouseId int,
	in _vendorId int
)
begin
	select 
		c.Name,
		SUM(p.Price)TotalPrice,
		count(psn.Id)Quantity
	from 
		stockinwardbasicinformation sibi
	inner join
		stockinwarditeminformation siii
	on
		sibi.Id = siii.StockInwardBasicInformationId 
	inner join 	
		product p 
	on
		siii.ProductId = p.Id 
	inner join
		category c 
	on
		c.Id = p.CategoryId
	inner join 
		productserialnumber psn 
	on
		siii.Id = psn.StockInwardItemInformationId 
	where 
		sibi.WarehouseId = _warehouseId
	and
		sibi.VendorId = _vendorId
	and
		psn.IsScanned = 1
	and
		CheckForSalesOrderedOrNot(psn.Id)
	group by c.Id;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetInvoiceDetailsById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetInvoiceDetailsById`(
IN _id int
)
BEGIN
SELECT
	Id,
	InvoiceNumber,
	PurchaseOrderNumber,
	DateOfPurchase,
	VendorId,
	MoveTypeId,
	WarehouseId,
	ItemTypeId
FROM 
	stockinwardbasicinformation
WHERE 
	Id=_id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetManufacturersDropdown` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetManufacturersDropdown`()
BEGIN
SELECT 
	m.Id `Key`,
    m.Name `Value`
FROM
	manufacturer m;    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetManufacturerType` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetManufacturerType`()
BEGIN
SELECT 
     Id `Key`, 
     `Name` `Value` 
FROM 
     manufacturer 
WHERE
     Isdeleted=0;
SELECT 
       1 IsSuccess, 
       "Data Fetched Successfully" Message ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetManufacturerTypeNew` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetManufacturerTypeNew`()
BEGIN
SELECT 
     Id `Key`, 
     Name `Value` 
FROM 
     Manufacturer;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetMenu` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetMenu`(
	in _roleId int
)
begin
	SELECT 
		MenuType, 
		ControllerName, 
		RouteName,
		MethodName,
		Icon, 
		DisplayName 
	FROM 
		menu m
	INNER JOIN
		menuaccess access
	ON
		access.MenuId = m.Id  
	WHERE 
		m.MenuType = 'Master'
	AND 
		access.RoleId = _roleId;

	SELECT 
		MenuType, 
		ControllerName, 
		RouteName,
		MethodName,
		Icon, 
		DisplayName 
	FROM 
		menu m
	INNER JOIN
		menuaccess access
	ON
		access.MenuId = m.Id  
	WHERE 
		m.MenuType = 'Main'
	AND 
		access.RoleId = _roleId;
	
	SELECT 
		MenuType, 
		ControllerName, 
		RouteName,
		MethodName,
		Icon, 
		DisplayName 
	FROM 
		menu m
	INNER JOIN
		menuaccess access
	ON
		access.MenuId = m.Id
	WHERE 
		m.MenuType = 'Configuration'
	AND 
		access.RoleId = _roleId;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetMovementCustomDropdownForStockInward` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetMovementCustomDropdownForStockInward`()
BEGIN
SELECT 
	m.Id `Key`,
	m.MovementType `Value`
FROM
	MovementType m
WHERE
	m.Id>=1 and m.Id<=3;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetMovementDropdown` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetMovementDropdown`()
BEGIN
SELECT 
	 m.Id `Key`,
	 m.MovementType `Value`
FROM
	movementtype m; 
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetOutType` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetOutType`()
BEGIN
SELECT 
      Id `Key`, 
      `Type` Value
FROM 
     OutType;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetPageAccessForRole` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetPageAccessForRole`(
	in _roleId int,
	in _controllerName varchar(100),
	in _routeName varchar(100)
)
begin
	select 
		count(1) IsAccess 
	from 
		menuaccess ma
	inner join
		menu m
	on
		ma.MenuId = m.Id 
	where 
		m.ControllerName = _controllerName
	and 
		m.RouteName = _routeName
	and 
		ma.RoleId = _roleId;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetPendingInvoiceList` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetPendingInvoiceList`()
BEGIN
	SELECT 
		sibi.Id,
		sibi.InvoiceNumber, 
		v.CompanyName, 
		mt.MovementType, 
		w.LocationName, 
		it.ItemType, 
        date_format(sibi.DateOfPurchase, "%d %b %Y %h:%i %p") as  DateOfPurchase,
		sp.Status 
	FROM 
          stockinwardbasicinformation sibi 
	INNER JOIN 
		  vendor v 
	ON 
	      sibi.VendorId = v.Id 
	INNER JOIN 
		  movementtype mt 
	ON 
	      sibi.MoveTypeId = mt.Id 
	INNER JOIN 
          warehouse w
    ON 
	      sibi.WarehouseId = w.Id 
	INNER JOIN 
		  itemtype it 
	ON 
	      sibi.ItemTypeId = it.Id 
	INNER JOIN 
              statusprofile sp 
    ON 
      sibi.`Status` = sp.Id 
	WHERE
		sibi.`Status` = 2
	AND
	   sibi.ItemTypeId = 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetPendingSerialNumberForScanning` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetPendingSerialNumberForScanning`(
	IN _invoiceNumberId INT
)
begin
	SELECT 
		psn.Id,
		p.ProductSKU,
		p.`Name`,
		psn.SerialNumber,
        psn.IsScanned IsScanCompleted
	FROM 
		stockinwarditeminformation siii
	INNER JOIN
		product p 
	ON
		siii.ProductId = p.Id 
	INNER JOIN 
		productserialnumber psn
	ON
		siii.Id = psn.StockInwardItemInformationId 
	WHERE
		siii.StockInwardBasicInformationId = _invoiceNumberId
    AND
       psn.IsDamage=0
	ORDER BY 
	   psn.IsScanned;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetPriceByProductSKU` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetPriceByProductSKU`(
IN _productSku varchar(64)
)
BEGIN
	SELECT 
		Price
	FROM
		product
	WHERE
		ProductSKU = _productSku;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetProductById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetProductById`(
IN _id int
)
BEGIN
	SELECT
		p.ProductSKU, 
		p.Name, 
		p.CategoryId, 
		p.ManufacturerId, 
		p.EANCode, 
        p.IsActive,
		p.Price		
	FROM 
		product p
	WHERE
		p.Id=_id AND p.IsDeleted=0;
        
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetProductInfoBySkuForAutofill` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetProductInfoBySkuForAutofill`(
IN _id int
)
BEGIN
SELECT
    p.Id As Id,
	m.Name AS Manufacturer,
    c.Name AS Category,
    p.Name AS ProductName
FROM 
	product p
INNER JOIN
	manufacturer m
ON
	p.ManufacturerId=m.Id
INNER JOIN
	category c
ON 
	p.CategoryId=c.Id
WHERE
	p.Id=_id
;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetProductList` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetProductList`(
	IN _productSku varchar(64), 
    IN _productName varchar(500),  
    IN _categoryId int, 
    IN _manufacturerId int,
    IN _eancode varchar(64),  
    IN _limit int, 
    IN _offset int
)
BEGIN
	
    DECLARE totalCount int;
	DECLARE iteration int;
	DECLARE pageNum int DEFAULT(_offset);
	SET _offset=((_offset-1)*_limit);
	
	SET @qury = concat("SELECT 
		p.Id,
		p.ProductSku,
		p.Name,
		pc.Name AS CategoryName,
		mn.Name AS ManufactrerName,
		p.EanCode,
		p.Price,
		a.Status AS IsActive
	FROM
		product p
			Left JOIN
		category pc ON p.CategoryId = pc.Id
			LEFT JOIN
		manufacturer mn ON p.ManufacturerId = mn.Id
			INNER JOIN
		activeprofile a ON p.IsActive = a.Id
	WHERE
		p.IsDeleted = 0 ");
    
	IF !ISNULL(_productSku) AND _productSku <> '' THEN 
		SET @qury = CONCAT(@qury, " AND p.ProductSku LIKE '%", _productSku, "%' "); 
    END IF; 
    IF !ISNULL(_productName) AND _productName <> '' THEN 
		SET @qury = CONCAT(@qury, " AND p.Name Like '%", _productName, "%' ") ; 
    END IF ; 
    IF (_categoryId != 0) AND _categoryId is not null THEN 
		SET @qury = CONCAT(@qury, "AND pc.Id =" , _categoryId) ; 
	END IF ; 
    IF (_manufacturerId != 0) AND _manufacturerId is not null THEN 
		SET @qury = CONCAT(@qury, " AND mn.Id =" , _manufacturerId) ; 
    END IF ; 
    IF !ISNULL(_eancode) AND _eancode <> '' THEN 
		SET @qury = CONCAT(@qury, " AND p.EANCode LIKE '%", _eancode, "%' "); 
    END IF;   
    
	SET @limits = CONCAT(@qury, " LIMIT ", _limit, " OFFSET ", _offset);
	PREPARE stmt FROM @limits;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;
    
	SET @qury2 = CONCAT('SELECT COUNT(1) AS TotalRecord, ',_limit,' PageSize, ', pageNum ,' PageNum FROM (', @qury,' ) counts');
	PREPARE stmt2 FROM @qury2;
	EXECUTE stmt2;
    DEALLOCATE PREPARE stmt2;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetProductSKUDropdown` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetProductSKUDropdown`()
BEGIN
SELECT
	p.Id `Key`,
	p.ProductSKU 'Value'
FROM
    product p;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetProductsOfDirectOutwardById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetProductsOfDirectOutwardById`(
IN _id int
)
BEGIN
SELECT
	soi.Id,
    p.Name,
    p.ProductSKU,
    p.EANCode,
    c.Name as Category,
    m.Name as Manufacturer,
    soi.Quantity,
    sdn.IsDispatched,
    sdn.IsReturnToManufacturer
FROM
	salesorderitemsinformation soi
LEFT JOIN
	product p
ON
	p.Id=soi.ProductId
LEFT JOIN
	category c
ON
	p.CategoryId=c.Id
LEFT JOIN
	manufacturer m
ON
	p.ManufacturerId=m.Id
LEFT JOIN
	saleorderdispatchserialnumber sdn
ON
	sdn.SalesOrderItemInformationId=soi.Id
WHERE 
	soi.SalesOrderBasicInformationId=_id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetProductsOfInvoice` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetProductsOfInvoice`(
IN _id int
)
BEGIN
SELECT
	siii.Id AS StockInwardItemInformationId,
    siii.StockInwardBasicInformationId,
    siii.ProductId,
    p.ProductSKU,
	c.Name AS Category,
    m.Name AS Manufacturer,
    p.Name AS ProductName,
    siii.Quantity,
    siii.Price,
    GetPendingScanCount(siii.Id)PendingCount,
    siii.BarcodeGenerated
FROM
	stockinwarditeminformation siii 
INNER JOIN
	product p
ON 
	siii.ProductId=p.Id
LEFT JOIN 
	category c
ON
	p.CategoryId=c.Id
LEFT JOIN
	manufacturer m
ON 
	p.ManufacturerId=m.Id
WHERE 
	siii.StockInwardBasicInformationId=_id ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetProductStatusCount` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetProductStatusCount`()
BEGIN
DECLARE _active INT;
DECLARE _inactive INT;
DECLARE _total INT;
 SELECT 
      Count(1) 
 INTO 
    _active 
 FROM 
     product 
 WHERE 
     IsActive=1 
 AND
	 IsDeleted=0;
 SELECT 
      Count(1) 
  INTO 
      _total 
  FROM 
      product
  WHERE 
      IsDeleted=0;
      
 SET _inactive = _total - _active;
 
 SELECT _total Total,_active `Active`,_inactive `InActive`; 
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetReceivedGoodsDetailsByMonthByLocationId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetReceivedGoodsDetailsByMonthByLocationId`(
	IN _filterMonth date,
	IN _locationId int
)
BEGIN
        
DROP TEMPORARY TABLE IF EXISTS MtdValueView;
CREATE TEMPORARY TABLE MtdValueView AS (
	SELECT
		siii.ProductId, 
		(p.Price * SUM(siii.quantity)) MtdValue 
    FROM 
		stockinwarditeminformation siii
	INNER JOIN
		productserialnumber psn
	ON
		siii.Id = psn.StockInwardItemInformationId 
	INNER JOIN 
		stockinwardbasicinformation sibi
    ON 
		sibi.Id = siii.StockInwardBasicInformationId
	INNER JOIN 
		product p 
	ON 
		siii.ProductId = p.Id 
	WHERE 
		sibi.WarehouseId = _locationId
	AND 
		p.IsDeleted = 0 
	AND
		DATE(psn.ScanDate) <= _filterMonth
	GROUP BY 
		siii.ProductId
)	;
    DROP TEMPORARY TABLE IF EXISTS ProductSkuDetailsView;
  CREATE TEMPORARY TABLE ProductSkuDetailsView AS (
	SELECT
		siii.ProductId, 
		p.Name ProductSkuName, 
		SUM(siii.quantity) StockQuantity, 
		(p.Price * SUM(siii.quantity)) StockValue
   FROM 
		stockinwarditeminformation siii
	INNER JOIN
		productserialnumber psn
	ON
		siii.Id = psn.StockInwardItemInformationId
   INNER JOIN 
		stockinwardbasicinformation sibi
    ON 
		sibi.Id = siii.StockInwardBasicInformationId
	INNER JOIN 
		product p 
	ON 
		siii.ProductId = p.Id 
	WHERE 
		sibi.WarehouseId = _locationId
	AND 
		p.IsDeleted = 0 
	AND
		DATE(psn.ScanDate)BETWEEN DATE_FORMAT(_filterMonth, '%Y-%m-01') AND _filterMonth
	GROUP BY 
		siii.ProductId);
        
	SELECT 	
		mv.ProductId, 
		ProductSkuName, 
		StockQuantity, 
		StockValue,
        mv.MtdValue
    FROM     
		ProductSkuDetailsView ps
	INNER JOIN 
		MtdValueView mv
	ON mv.ProductId = ps.ProductId;
        
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetRolesDropDown` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetRolesDropDown`()
BEGIN
SELECT  
	Id `key`,
	Role`value`
FROM 
    Roles;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSaleItemsInformationById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetSaleItemsInformationById`(
IN _id INT)
BEGIN
	  
	SELECT
		soii.Id,
		p.ProductSKU ItemSKU, 
		m.`Name` Manufacturer, 
		c.`Name` Category, 
		p.`Name` `Name`, 
		soii.Quantity Quantity,
		GetStockInHandInformationByProductId(soii.ProductId) StockInHand , 
		IscannedZero(soii.Id) NotScannedCount,
        sobi.SaleOrderStatusId
	FROM
		salesorderitemsinformation soii
	INNER JOIN 
		product p
	ON p.Id = soii.ProductId
	LEFT JOIN
		manufacturer m
	ON m.Id = p.ManufacturerId
	LEFT JOIN
		category c
	ON c.Id = p.CategoryId
	INNER JOIN 
		salesorderbasicinformation sobi
	ON soii.SalesOrderBasicInformationId = sobi.Id
	Where 
		soii.IsDeleted=0 
	AND
		sobi.Id=_id;
     
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSaleOrderMovementType` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetSaleOrderMovementType`()
BEGIN
SELECT 
     Id `Key`, 
	 MovementType `Value` 
FROM 
     salesordermovementtype;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSaleOrderStatusDropdown` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetSaleOrderStatusDropdown`()
BEGIN
SELECT 
	s.Id `Key`,
	s.StatusType `Value`
FROM
	saleorderstatus s; 
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSalesBasicInformationById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetSalesBasicInformationById`(
IN _id INT)
BEGIN
SELECT 
    Id,
    SalesOrderNumber,
    DateofSale,
    VendorId,
    MovementTypeId,
    WarehouseId,
    OutTypeId
FROM
    SalesOrderBasicInformation
WHERE
    Id = _id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSalesDirectOutwardDetailsById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetSalesDirectOutwardDetailsById`(
	IN _soiId INT,
    IN _sobId INT
)
BEGIN
	SELECT
		sobi.Id,
		v.CompanyName Company,
		sobi.SalesOrderNumber SalesOrderNumber,
		w.LocationName Location,
		mt.MovementType MovementType,
		sobi.DateofSale SalesDate
	FROM
		salesorderbasicinformation sobi
	LEFT JOIN
		warehouse w
	ON 
        w.Id = sobi.WarehouseId
	LEFT JOIN
		movementtype mt 
	ON 
		mt.Id = sobi.MovementTypeId
	LEFT JOIN
		vendor v 
	ON 
		v.Id = sobi.VendorId
	WHERE
		sobi.Id = _sobId;
        
SELECT 
		psn.SerialNumber,
        p.Name,
        p.ProductSKU,
        sodn.IsDispatched,
        p.EANCode,
        sodn.IsReturnToManufacturer
	FROM
		saleorderdispatchserialnumber sodn
	INNER JOIN
		productserialnumber psn
	ON
		sodn.ProductSerialNumberId=psn.Id
	LEFT JOIN
		salesorderitemsinformation soii
	ON
		sodn.SalesOrderItemInformationId=soii.Id
	LEFT JOIN
		product p
	ON
		soii.ProductId=p.Id
	WHERE
		sodn.IsDispatched=1
	AND
		sodn.SalesOrderItemInformationId=_soiId;
        
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSalesOrderItemsInformation` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetSalesOrderItemsInformation`(
IN _offset int,
IN _limit int
)
BEGIN
DECLARE totalCount int;
DECLARE iteration int;
DECLARE pageNum int DEFAULT(_offset);
SET _offset=((_offset-1)*_limit);
    
     SET @qury = 
     CONCAT( '
         SELECT
				soii.Id Id,
				p.ProductSKU ItemSKU, 
				m.`Name` Manufacturer, 
				c.`Name` Category, 
				p.`Name` `Name`, 
				soii.Quantity Quantity
				FROM
				salesorderitemsinformation soii
				INNER JOIN
				manufacturer m
				INNER JOIN 
				category c
				INNER JOIN 
				product p
				ON p.Id = soii.ProductId
				Where soii.IsDeleted=0 ');
                
	SET @qury = CONCAT(@qury, " LIMIT ", _limit, " OFFSET ", _offset);
	PREPARE stmt FROM @qury;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;
    
    SET @qury2 = CONCAT('SELECT COUNT(1) AS TotalRecord, ',_limit,' PageSize, ', pageNum ,' PageNum FROM (', @qury,' ) counts');
	PREPARE stmt2 FROM @qury2;
	EXECUTE stmt2;
    DEALLOCATE PREPARE stmt2;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSalesOrderProductList` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetSalesOrderProductList`()
BEGIN
SELECT 
     Id,
     ProductSKU 
FROM 
     Product;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSalesOutwardDetailsById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetSalesOutwardDetailsById`(
    IN _id int
)
BEGIN
	SELECT 
		sob.Id,
		vp.CompanyName Company,
		sob.SalesOrderNumber ,
		wp.LocationName Location,
		mt.MovementType MovementType,
		sob.DateofSale SalesDate,
		ot.TYPE OutType
	FROM
		salesorderbasicinformation sob
		LEFT JOIN
		warehouse wp
        ON
        wp.Id = sob.WarehouseId
		LEFT JOIN
		movementtype mt
        ON 
        mt.Id = sob.MovementTypeId
		LEFT JOIN
		vendor vp 
        ON
        vp.Id = sob.VendorId
		LEFT JOIN 
		outtype ot
        ON 
        sob.OutTypeId = ot.Id
	WHERE
		sob.Id = _id;
        
	SELECT 
		sod.Id,
		sod.IsDispatched,
		snp.SerialNumber,
		pp.ProductSKU,
		pp.Name,
		sod.IsReturnToManufacturer
	FROM
		saleorderdispatchserialnumber sod
		INNER JOIN
		salesorderitemsinformation soii
        ON 
        sod.SalesOrderItemInformationId = soii.Id
		INNER JOIN
		productserialnumber snp
        ON 
        sod.ProductSerialNumberId = snp.Id
		INNER JOIN
		stockinwarditeminformation psp
        ON 
        psp.Id = snp.StockInwardItemInformationId
		INNER JOIN
		product pp
        ON 
        pp.Id = psp.StockInwardBasicInformationId
	WHERE
		soii.SalesOrderBasicInformationId = _id
	ORDER BY 
		sod.IsDispatched;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetScannedItems` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetScannedItems`()
BEGIN
Declare Total int;
Declare Scanned int;
Declare Pending int;
  Select Count(*) into Scanned from serialnumberprofile  where Isscanned=1;
  Select Count(*) into Pending from serialnumberprofile where Isscanned=0;
  Set Total = Scanned + Pending;
 Select Total,Scanned,Pending;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSerialPriceStockQuantityInventory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetSerialPriceStockQuantityInventory`(
	IN _endDate date,
	IN _startDate date,
	IN _locationId int,
	IN _productId int
)
BEGIN
	SELECT
		pp.ProductSKU,
        c.Name Category,
        m.Name Manufacturer,
        pp.Name 
	FROM 
        product pp
		INNER JOIN
        manufacturer m
		ON
        pp.ManufacturerId = m.Id
		INNER JOIN 
        category c
		ON
		pp.CategoryId = c.Id
		WHERE
        pp.Id = _productId;
        
		SELECT 
		tb1.SerialNumber,
        tb1.Price
		FROM
		(SELECT 
			snp.SerialNumber,
            psp.Price,
            pp.Name,
            pp.ProductSKU,
            c.Name Category,
            m.Name Manufacturer
		 FROM
			stockinwarditeminformation psp
			INNER JOIN 
			productserialnumber snp
			ON
			psp.Id = snp.Id
			INNER JOIN
			stockinwardbasicinformation ip
			ON
			ip.Id = psp.StockInwardBasicInformationId
			INNER JOIN 
			product pp 
			ON
			psp.ProductId = pp.Id
			INNER JOIN 
			category c 
			ON 
			c.Id = pp.CategoryId
			INNER JOIN
			manufacturer m
			ON
			m.Id = pp.ManufacturerId
			WHERE
				pp.Id = _productId AND snp.IsScanned = 1
				AND date(snp.ScanDate) >= _startDate
				AND date(snp.ScanDate) <= _endDate
				AND ip.WarehouseId = _locationId) tb1
			WHERE
				tb1.SerialNumber NOT IN (SELECT 
				sp.SerialNumber
			FROM
				salesorderitemsinformation soii
				INNER JOIN
				saleorderdispatchserialnumber sodsn
                ON 
                soii.Id = sodsn.SalesOrderItemInformationId
				INNER JOIN
				salesorderbasicinformation sobi
                ON 
                soii.SalesOrderBasicInformationId = sobi.Id
				INNER JOIN
				productserialnumber sp
                ON 
                sp.Id = sodsn.ProductSerialNumberId
			WHERE
				soii.ProductId = _productId
					AND sodsn.IsDeleted = 0
					AND sobi.WarehouseId = _locationId
					AND 
				(CASE
					WHEN sodsn.DamageDate IS NULL THEN 1
					ELSE DATE(sodsn.DamageDate) > _endDate
				END)
					AND 
				(CASE
					WHEN sodsn.ReturnDate IS NULL THEN 1
					ELSE DATE(sodsn.ReturnDate) > _endDate
				END)
					AND (sodsn.IsDispatched = 0
					OR (sodsn.IsDispatched = 1
					AND DATE(sodsn.DispatchDate) >= _startDate
					AND DATE(sodsn.DispatchDate) <= _endDate)));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStockAuditByLocation` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetStockAuditByLocation`(
IN _offset INT,
IN _limit INT,
IN _ProductSKU INT,
IN _ManufacturerName INT,
IN _CategoryName INT,
IN _Quantity INT,
IN _Status INT
)
BEGIN
   DECLARE totalCount int;
	DECLARE iteration int;
	DECLARE pageNum int DEFAULT(_offset);
	SET _offset=((_offset-1)*_limit);
    
     SET @qury = 
     CONCAT("select 
    tbl.ProductId,
    p.ProductSKU,
    p.Name ProductName,
    m.Name ManufacturerName,
    c.Name CategoryName,
    tbl.Quantity,
    tbl.Scan
from(
    select 
        s.ProductId,
        count(s.ProductId)Quantity,
        sum(s.IsAuditDone)Scan  
    from 
        stockaudititem s 
    where 
        s.StockAuditInitiationId =1
    group by s.ProductId
)tbl    
inner join 
    productsprofile p
on
    tbl.ProductId = p.Id 
inner join  
    category c 
on 
    p.CategoryId = c.Id 
inner join
    manufacturer m
on
    p.ManufacturerId = m.Id
			");    
           
     IF _Quantity <> 0 AND !ISNULL(_Quantity)
     THEN
		SET @qury = CONCAT(@qury, " AND Quantity<=",_Quantity);
	END IF;
	IF _ProductSKU <> 0 AND !ISNULL(_ProductSKU) 
    THEN
		SET @qury = CONCAT(@qury, " AND  p.Id= ", _ProductSKU);
	END IF;
    
	IF _ManufacturerName <> 0 AND !ISNULL(_ManufacturerName)
    THEN
		SET @qury = CONCAT(@qury, " AND  m.Id= ", _ManufacturerName);
	END IF;
    IF _CategoryName <> 0 AND !ISNULL(_CategoryName)
    THEN
		SET @qury = CONCAT(@qury, " AND  c.Id= ", _CategoryName);
	END IF;
    
    SET @limits = CONCAT(@qury, " LIMIT ", _limit, " OFFSET ", _offset);
	PREPARE stmt FROM @limits;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;
    
    SET @qury2 = CONCAT('SELECT COUNT(1) AS TotalRecord, ',_limit,' PageSize, ', pageNum ,' PageNum FROM (', @qury,' ) counts');
	PREPARE stmt2 FROM @qury2;
	EXECUTE stmt2;
    DEALLOCATE PREPARE stmt2;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStockAuditDetails` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetStockAuditDetails`(
	IN _id int,
	IN _offset int,
	IN _limit int,
	IN _ProductSKU varchar(64),
	IN _ManufacturerName int,
	IN _CategoryName int
)
BEGIN
	DECLARE totalCount int;
	DECLARE iteration int;
	DECLARE pageNum int DEFAULT(_offset);
	SET _offset=((_offset-1)*_limit);
    
   SET @qury = 
    CONCAT("SELECT 
        tbl.ProductId,
        p.ProductSKU,
        p.Name AS ProductName,
        m.Name AS ManufacturerName,
        c.Name AS CategoryName,
        tbl.Quantity,
        tbl.Scan
    FROM (
        SELECT 
            s.ProductId,
            COUNT(s.ProductId) AS Quantity,
            SUM(s.IsAuditDone) AS Scan,
			s.StockAuditInitiationId 
        FROM 
            stockaudititem s
        WHERE 
            s.StockAuditInitiationId = ",_id,"
        GROUP BY s.ProductId, s.StockAuditInitiationId
    ) tbl
    INNER JOIN stockauditinitiation sai ON sai.Id = tbl.StockAuditInitiationId
    INNER JOIN product p ON tbl.ProductId = p.Id 
    INNER JOIN category c ON p.CategoryId = c.Id 
    INNER JOIN manufacturer m ON p.ManufacturerId = m.Id 
    WHERE  sai.Id =" ,_id);
    
    IF _ProductSKU <> '' AND _ProductSKU is not null
    THEN
		SET  @qury = concat(@qury," AND (p.ProductSKU like '%",_ProductSKU,"%') ");
	END IF;
    
      IF _ManufacturerName <> '' AND _ManufacturerName is not null
    THEN
		SET  @qury = concat(@qury," AND (m.Id = ",_ManufacturerName,") ");
	END IF;
    
      IF _CategoryName <> 0 AND _CategoryName is not null
    THEN
		SET @qury = CONCAT(@qury, " AND  c.Id=", _CategoryName);
	END IF;	
    
    SET @limits = CONCAT(@qury, " LIMIT ", _limit, " OFFSET ", _offset);
	PREPARE stmt FROM @limits;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;
    
    SET @qury2 = CONCAT('SELECT COUNT(1) AS TotalRecord, ',_limit,' PageSize, ', pageNum ,' PageNum FROM (', @qury,' ) counts');
	PREPARE stmt2 FROM @qury2;
	EXECUTE stmt2;
    DEALLOCATE PREPARE stmt2;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStockAuditDetailsById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetStockAuditDetailsById`(
	IN _id int
)
BEGIN
	SELECT 
		tbl.ProductId,
        p.ProductSKU,
        p.Name AS ProductName,
        m.Name AS ManufacturerName,
        c.Name AS CategoryName,
        tbl.Quantity,
        tbl.Scan
    FROM (
        SELECT 
            s.ProductId,
            COUNT(s.ProductId) AS Quantity,
            SUM(s.IsAuditDone) AS Scan,
            s.StockAuditInitiationId 
        FROM 
            stockaudititem s
        WHERE 
            s.StockAuditInitiationId = _id
        GROUP BY s.ProductId, s.StockAuditInitiationId
    ) tbl
    INNER JOIN
    stockauditinitiation sai
    ON 
    sai.Id = tbl.StockAuditInitiationId
    INNER JOIN
    product p
    ON
    tbl.ProductId = p.Id 
    INNER JOIN
    category c 
    ON 
    p.CategoryId = c.Id 
    INNER JOIN 
    manufacturer m 
    ON 
    p.ManufacturerId = m.Id 
    Where 
    sai.Id = _id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStockAuditList` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetStockAuditList`(
	IN _offset int,
	IN _limit int,
	IN _warehouseId int,
	IN _fromDate varchar(16),
	IN _toDate varchar(16),
	IN _userId int,
	IN _status int
)
BEGIN
    DECLARE totalCount int;
	DECLARE iteration int;
	DECLARE pageNum int DEFAULT(_offset);
	SET _offset=((_offset-1)*_limit);
    
     SET @qury = 
     CONCAT("SELECT 
				s.Id,
				w.LocationName WarehouseName,
				u.Name UserName,
				s.AuditInitiatedOn,
				CASE
					WHEN s.IsAuditDone = 1
                    AND s.IsAuditPassed = 1 
                    THEN 'Pass'
					WHEN s.IsAuditDone = 1 
                    AND s.IsAuditPassed = 0
                    THEN 'Fail'
					WHEN s.IsAuditDone = 0 
                    AND
                    s.IsAuditPassed = 0
                    THEN 'In Progress'
				END AuditStatus
			FROM 
				stockauditinitiation s 
			INNER JOIN
				warehouse w 
			ON
				s.WarehouseId = w.Id 
			INNER JOIN 
				user u 
			ON
				s.CreatedBy = u.Id 
			WHERE 
				1=1 
			");    
           
           
	IF _warehouseId <> 0 AND !ISNULL(_warehouseId) 
    THEN
		SET @qury = CONCAT(@qury, " AND  w.Id= ", _warehouseId);
	END IF;
    
    IF !ISNULL(_fromDate) AND !ISNULL(_toDate) AND _fromDate <> '' AND _toDate <> '' THEN
    SET @qury = CONCAT(@qury, " AND s.AuditInitiatedOn BETWEEN '", _fromDate, "' AND '", _toDate, "'");
	END IF;
    
	IF _userId <> 0 AND !ISNULL(_userId)
    THEN
		SET @qury = CONCAT(@qury, " AND  u.Id= ", _userId);
	END IF;
    
    IF _status <> 0 AND !ISNULL(_status)
    THEN
		CASE
        WHEN _status = 1 #PASS
			THEN
			SET  @qury = CONCAT(@qury, " AND s.IsAuditDone = 1 AND s.IsAuditPassed = 1 ");
		
        WHEN _status = 2  #INPROGRESS
			THEN
            SET  @qury = CONCAT(@qury, " AND s.IsAuditDone = 0 AND s.IsAuditPassed = 0 ");
        
        WHEN _status = 3  #FAIL
			THEN
            SET  @qury = CONCAT(@qury, " AND s.IsAuditDone = 1 AND s.IsAuditPassed = 0  ");
        
        END CASE;
	END IF;
   
    SET @limits = CONCAT(@qury, " LIMIT ", _limit, " OFFSET ", _offset);
	PREPARE stmt FROM @limits;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;
    
    SET @qury2 = CONCAT('SELECT COUNT(1) AS TotalRecord, ',_limit,' PageSize, ', pageNum ,' PageNum FROM (', @qury,' ) counts');
	PREPARE stmt2 FROM @qury2;
	EXECUTE stmt2;
    DEALLOCATE PREPARE stmt2;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStockAuditLocation` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetStockAuditLocation`(
	IN _offset int,
	IN _limit int,
	IN _warehouseId int,
	IN _fromDate datetime,
	IN _toDate datetime,
	IN _userId int,
	IN _status int
)
BEGIN
	DECLARE totalCount int;
	DECLARE iteration int;
	DECLARE pageNum int DEFAULT(_offset);
	SET _offset=((_offset-1)*_limit);
    
     SET @qury = 
     CONCAT("SELECT 
				s.Id,
				w.LocationName WarehouseName,
				u.Name UserName,
				s.AuditInitiatedOn,
				CASE
					WHEN s.IsAuditDone = 1 AND s.IsAuditPassed = 1 THEN 'Pass'
					WHEN s.IsAuditDone = 1 AND s.IsAuditPassed = 0 THEN 'Fail'
					WHEN s.IsAuditDone = 0 AND s.IsAuditPassed = 0 THEN 'In Progress'
				END AuditStatus
			FROM 
				stockauditinitiation s 
			INNER JOIN
				warehouse w 
			ON
				s.WarehouseId = w.Id 
			INNER JOIN 
				user u 
			ON
				s.CreatedBy = u.Id 
			WHERE 
				1=1 
			");    
           
           
	IF _warehouseId <> 0 AND !ISNULL(_warehouseId) 
    THEN
		SET @qury = CONCAT(@qury, " AND  w.Id= ", _warehouseId);
	END IF;
    
    IF !ISNULL(_fromDate) AND !ISNULL(_toDate)  THEN
    SET @qury = CONCAT(@qury, " AND s.AuditInitiatedOn BETWEEN '", _fromDate, "' AND '", _toDate, "'");
END IF;
    
	IF _userId <> 0 AND !ISNULL(_userId)
    THEN
		SET @qury = CONCAT(@qury, " AND  u.Id= ", _userId);
	END IF;
    
    IF _status <> 0 AND !ISNULL(_status)
    THEN
		CASE
        WHEN _status = 1 #PASS
			THEN
			SET  @qury = CONCAT(@qury, " AND s.IsAuditDone = 1 AND s.IsAuditPassed = 1 ");
		
        WHEN _status = 2  #INPROGRESS
			THEN
            SET  @qury = CONCAT(@qury, " AND s.IsAuditDone = 0 AND s.IsAuditPassed = 0 ");
        
        WHEN _status = 3  #FAIL
			THEN
            SET  @qury = CONCAT(@qury, " AND s.IsAuditDone = 1 AND s.IsAuditPassed = 0  ");
        
        END CASE;
	END IF;
   
    SET @qury = CONCAT(@qury, " LIMIT ", _limit, " OFFSET ", _offset);
	PREPARE stmt FROM @qury;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;
    
    SET @qury2 = CONCAT('SELECT COUNT(1) AS TotalRecord, ',_limit,' PageSize, ', pageNum ,' PageNum FROM (', @qury,' ) counts');
	PREPARE stmt2 FROM @qury2;
	EXECUTE stmt2;
    DEALLOCATE PREPARE stmt2;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStockAuditLocationById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetStockAuditLocationById`(
	IN _id int
)
BEGIN
	SELECT
			s.Id,
			w.LocationName WarehouseName,
			u.Name UserName,
			s.AuditInitiatedOn,
			CASE
				WHEN
				s.IsAuditDone = 1 
				AND 
				s.IsAuditPassed = 1 
				THEN 'Pass'
				WHEN 
				s.IsAuditDone = 1
				AND
				s.IsAuditPassed = 0 
				THEN 'Fail'
				WHEN 
				s.IsAuditDone = 0 
				AND
				s.IsAuditPassed = 0
				THEN
				'In Progress'
			END AuditStatus
		FROM 
			stockauditinitiation s 
		INNER JOIN
			warehouse w 
		ON
			s.WarehouseId = w.Id 
		INNER JOIN 
			user u 
		ON
			s.CreatedBy = u.Id 
		WHERE 
			1=1 AND s.Id=_id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStockAuditScannedCount` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetStockAuditScannedCount`()
BEGIN
DECLARE _total INT;
DECLARE _scanned INT;
SELECT COUNT(1) INTO _total from serialnumberprofile;
SELECT COUNT(1) INTO _scanned from stockaudititem sai left join serialnumberprofile snp on snp.Id = sai.SerialNumberId;
SELECT _total Total, _scanned Scanned;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStockInwardList` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetStockInwardList`(
	IN _pageNum INT, 
    IN _pageSize INT, 
    IN _invoiceNo VARCHAR(32), 
    IN _vendorCompanyNameId INT, 
    IN _moveTypeId int, 
    IN _warehouseLocationId int, 
    IN _fromDate DATETIME,
    IN _toDate DATETIME 
)
BEGIN 
	DECLARE totalCount int;
	DECLARE iteration int;
	DECLARE _offset INT; 
	DECLARE pageNum int DEFAULT(_offset);
    SET _offset = (_pageNum - 1) * _pageSize; 
    SET @query = CONCAT('SELECT 
								ip.Id,
                                ip.InvoiceNumber,
                                vp.CompanyName,
                                mt.MovementType,
                                wp.LocationName,
                                ip.DateOfPurchase,
                                it.ItemType,
                               ip.status ', 
						'FROM
							stockinwardbasicinformation ip ', 
                        'INNER JOIN
							vendor vp
								ON
							ip.VendorId = vp.Id ', 
                        'INNER JOIN
							movementtype mt
								ON 	
							ip.MoveTypeId = mt.Id ', 
                        'INNER JOIN
							warehouse wp
								ON
                            ip.WarehouseId = wp.Id ', 
                        'INNER JOIN 
							itemtype it
								ON
                            ip.ItemTypeId = it.Id ', 
                        'WHERE 1 = 1 '); 
    IF _invoiceNo IS NOT NULL AND _invoiceNo != '' THEN 
        SET @query = CONCAT(@query, ' AND ip.InvoiceNumber LIKE "%', _invoiceNo, '%"'); 
    END IF; 
    IF _vendorCompanyNameId > 0 THEN 
        SET @query = CONCAT(@query, ' AND ip.VendorCompanyNameId = ', _vendorCompanyNameId); 
    END IF; 
    IF _moveTypeId > 0 THEN 
        SET @query = CONCAT(@query, ' AND ip.MoveTypeId = ', _moveTypeId); 
    END IF; 
    IF _warehouseLocationId > 0 THEN 
        SET @query = CONCAT(@query, ' AND ip.WarehouseLocationId = ', _warehouseLocationId); 
    END IF; 
    IF _fromDate IS NOT NULL AND _fromDate != '0001-01-01 00:00:00' THEN 
        SET @query = CONCAT(@query, ' AND (DATE(ip.DateOfPurchase) BETWEEN DATE("',_fromDate,'") AND DATE("',_toDate,'")) '); 
    END IF; 
    SET @limits = CONCAT(@query, ' ORDER BY ip.Id DESC LIMIT ', _offset, ', ', _pageSize); 
	
    PREPARE stmt FROM @limits; 
    EXECUTE stmt; 
    DEALLOCATE PREPARE stmt; 
        SET @qury2 = CONCAT('SELECT COUNT(*) AS TotalRecord, ',_pageSize,' PageSize, ', _pageNum ,' PageNum FROM (', @query,' ) counts');
	PREPARE stmt2 FROM @qury2;
	EXECUTE stmt2;
    DEALLOCATE PREPARE stmt2;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStockInwardListVerify` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetStockInwardListVerify`(
    IN _pageNum INT, 
    IN _pageSize INT, 
    IN _invoiceNo VARCHAR(32), 
    IN _vendorCompanyNameId INT, 
    IN _moveTypeId INT, 
    IN _warehouseLocationId INT, 
    IN _fromDate DATETIME,
    IN _toDate DATETIME 
)
BEGIN 
    DECLARE totalCount INT;
    DECLARE iteration INT;
    DECLARE _offset INT; 
    DECLARE pageNum INT DEFAULT(_offset);
    SET _offset = (_pageNum - 1) * _pageSize; 
    SET @query = CONCAT('SELECT ip.Id,ip.InvoiceNo, vp.CompanyName, mt.MovementType, wp.LocationName, ip.DateOfPurchase, it.ItemType, sp.status ', 
                        'FROM invoiceprofile ip ', 
                        'INNER JOIN vendorprofile vp ON ip.VendorCompanyNameId = vp.Id ', 
                        'INNER JOIN movementtype mt ON ip.MoveTypeId = mt.Id ', 
                        'INNER JOIN warehouseprofile wp ON ip.WarehouseLocationId = wp.Id ', 
                        'INNER JOIN itemtype it ON ip.ItemTypeId = it.Id ', 
                        'INNER JOIN statusprofile sp ON ip.StatusId = sp.Id ', 
                        'WHERE 1 = 1');
    IF _invoiceNo IS NOT NULL AND _invoiceNo != '' THEN 
        SET @query = CONCAT(@query, ' AND ip.InvoiceNo LIKE "%', _invoiceNo, '%"'); 
    END IF; 
    IF _vendorCompanyNameId > 0 THEN 
        SET @query = CONCAT(@query, ' AND ip.VendorCompanyNameId = ', _vendorCompanyNameId); 
    END IF; 
    IF _moveTypeId > 0 THEN 
        SET @query = CONCAT(@query, ' AND ip.MoveTypeId = ', _moveTypeId); 
    END IF; 
    IF _warehouseLocationId > 0 THEN 
        SET @query = CONCAT(@query, ' AND ip.WarehouseLocationId = ', _warehouseLocationId); 
    END IF; 
    IF _fromDate IS NOT NULL AND _fromDate != '0001-01-01 00:00:00' THEN 
        SET @query = CONCAT(@query, ' AND (DATE(ip.DateOfPurchase) BETWEEN DATE("',_fromDate,'") AND DATE("',_toDate,'")) '); 
    END IF; 
    SET @query = CONCAT(@query, ' ORDER BY ip.Id DESC LIMIT ', _offset, ', ', _pageSize); 
	
    PREPARE stmt FROM @query; 
    EXECUTE stmt; 
    DEALLOCATE PREPARE stmt; 
    SET @qury2 = CONCAT('SELECT COUNT(*) AS TotalRecord, ',_pageSize,' PageSize, ', _pageNum ,' PageNum FROM (', @query,' ) counts');
    PREPARE stmt2 FROM @qury2;
    EXECUTE stmt2;
    DEALLOCATE PREPARE stmt2;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetStockOutwardList` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetStockOutwardList`(
	IN _pageNum int, 
	IN _pageSize int
)
BEGIN 
	DECLARE totalCount int;	
	DECLARE iteration int;
	DECLARE _offset INT; 
	DECLARE pageNum int DEFAULT(_offset);
    SET _offset = (_pageNum - 1) * _pageSize; 
    SET @query = CONCAT(
					'SELECT
						sob.Id,
						vp.CompanyName Company,
						sob.SalesOrderNumber,
						wp.LocationName Location,
						mt.MovementType,
						date_format(sob.DateofSale, "%d %b %Y %h:%i %p") SalesDate,
						ot.TYPE OutType
					FROM
						salesorderbasicinformation sob
						LEFT JOIN
						warehouse wp
						ON 
						wp.Id = sob.WarehouseId
						LEFT JOIN
						movementtype mt ON mt.Id = sob.MovementTypeId
						LEFT JOIN
						vendor vp ON vp.Id = sob.VendorId 
						LEFT JOIN 
						outtype ot 
                        ON
                        sob.OutTypeId = ot.Id
						Where 1 = 1 
                        AND 
                        sob.SaleOrderStatusId != 1 ' ); 
                        
    SET @limits = CONCAT(@query, ' ORDER BY  sob.Id LIMIT ', _offset, ', ', _pageSize); 
	
    PREPARE stmt FROM @limits; 
    EXECUTE stmt; 
    DEALLOCATE PREPARE stmt; 
    
	SET @qury2 = CONCAT('SELECT COUNT(*) AS TotalRecord, ',_pageSize,' PageSize, ', _pageNum ,' PageNum FROM (', @query,' ) counts');
	
    PREPARE stmt2 FROM @qury2;
	EXECUTE stmt2;
    DEALLOCATE PREPARE stmt2;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetTotalCountForSalesOrderDetails` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetTotalCountForSalesOrderDetails`()
BEGIN
	DECLARE Total int;
	DECLARE Scanned int;
	DECLARE Pending int;
	SELECT
		COUNT(*) INTO Total
	FROM 
		productserialnumber;
        
	SELECT
		COUNT(*) INTO Scanned 
	FROM 
		productserialnumber
	WHERE
		IsScanned=1;
        
	SELECT 
		COUNT(*) INTO Pending
	FROM
		productserialnumber
	WHERE
		IsScanned=0;
        
	SELECT 
		Total,
		Scanned,
        Pending;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetTotalCountForSalesOrderDetais` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetTotalCountForSalesOrderDetais`()
BEGIN
	DECLARE Total int;
	DECLARE Scanned int;
	DECLARE Pending int;
	SELECT
		COUNT(*) INTO Total
	FROM 
		productserialnumber;
        
	SELECT
		COUNT(*) INTO Scanned 
	FROM 
		productserialnumber
	WHERE
		IsScanned=1;
        
	SELECT 
		COUNT(*) INTO Pending
	FROM
		productserialnumber
	WHERE
		IsScanned=0;
        
	SELECT Total,Scanned,Pending;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetUNamePassById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetUNamePassById`(
_id int)
BEGIN
	SELECT 
    Id,
	Username,
	Password
	FROM
    loginprofile
    WHERE
    Id=_id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetUnscannedSerialNumberByInvoiceId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`backup`@`%` PROCEDURE `GetUnscannedSerialNumberByInvoiceId`(
	IN _id int
)
BEGIN
	SELECT 
		pp.ProductSKU,
		sp.SerialNumber
	FROM
		productserialnumber sp
	INNER JOIN 
		stockinwarditeminformation psp
	ON 	
		sp.StockInwardItemInformationId=psp.Id
	INNER JOIN
		product pp
	ON 
		psp.ProductId=pp.Id
	INNER JOIN
		stockinwardbasicinformation ip
	ON
		psp.StockInwardBasicInformationId=ip.Id
	WHERE
		ip.Id=_id 
		AND 
		sp.IsScanned=0;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetUser` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetUser`()
BEGIN
	SELECT 
		Id `key` ,
		Name `Value` 
	FROM
		user;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetUserById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetUserById`(
	IN _id int
)
BEGIN
	SELECT 
		up.`Name`,
		up.`Mobile`,
        up.`Email`,
		rp.`Id`As role,
		wp.`Id` As LocationName,
		lp.`UserName`,
        lp.`IsActive` as `Status`
	FROM 
		logindetail lp
    INNER JOIN
    	user up
    ON
		lp.userId= up.Id
    INNER JOIN
    	userrole rp
    ON
    	up.UserRoleId=rp.Id
    INNER JOIN
    	Warehouse wp
    ON
    	up.WarehouseId=wp.Id
    WHERE 
		up.Id =_id ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetUserByIdBackup` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetUserByIdBackup`(
	IN _id int
)
BEGIN
	SELECT 
		lp.UserName,
        lp.Password,
        up.Email,
		up.Mobile,
		up.Status,
		up.UserRoleId,
		up.WarehouseId
	FROM 
	User up
    INNER JOIN
    LoginDetail lp
    ON
    up.Id = lp.Id
    WHERE 
    up.Id=_id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetUserList` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetUserList`(
	IN _limit int,
    IN _offset int,
    IN _name varchar(64),
    IN _departmentId int,
    IN _warehouseId int,
    IN _mobile varchar(64),
    IN _status int
)
BEGIN
	DECLARE totalCount int;
	DECLARE iteration int;
	DECLARE pageNum int DEFAULT(_offset);
	SET _offset=(_offset-1)*_limit;
    
    SET @qury = 
     CONCAT('
			SELECT
				up.Id,
				up.Name,
				rp.Name As Role,
				wp.LocationName,
				up.Mobile,
				up.Status 		
			FROM 
				user up
				INNER JOIN           
				Warehouse wp
					ON 
				up.WarehouseId=wp.Id
				INNER JOIN
				userrole rp
					ON
				up.UserRoleId=rp.Id		
			WHERE 
				up.IsDeleted=0 ');
            
	 IF !ISNULL(_name) AND  _name<>''
     THEN
     SET @qury = CONCAT(@qury, "AND up.Name LIKE '%",_name,"%' ") ;
     END IF;
     
	 IF !ISNULL(_mobile) AND  _mobile<>''
     THEN
     SET @qury = CONCAT(@qury, "AND up.Mobile LIKE '%",_mobile,"%' ") ;
     END IF;    
     
	IF _departmentId <> 0 and _departmentId is not null
    THEN
	SET @qury = CONCAT(@qury, " AND up.UserRoleId=", _departmentId);
	END IF;
    
    IF _status <> 0 and _status is not null
    THEN
	SET @qury = CONCAT(@qury, " AND up.Status=", _status);
	END IF;
       
	IF _warehouseId <> 0 and _warehouseId is not null
    THEN
	SET @qury = CONCAT(@qury, " AND up.WarehouseId=", _warehouseId);
	END IF;
	
    SET @limits = CONCAT(@qury, " LIMIT ", _limit, " OFFSET ", _offset);
	PREPARE stmt FROM @limits;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;
    
    SET @qury2 = CONCAT('SELECT COUNT(*) AS TotalRecord, ',_limit,' PageSize, ', pageNum ,' PageNum FROM (', @qury,' ) counts');
	PREPARE stmt2 FROM @qury2;
	EXECUTE stmt2;
    DEALLOCATE PREPARE stmt2;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetUsernamePasswordById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetUsernamePasswordById`(
_id int)
BEGIN
	SELECT 
    Id,
	Username,
	Password
	FROM
    logindetail
    WHERE
    Id=_id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetUserStatusCount` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetUserStatusCount`()
BEGIN
	DECLARE _active int;
	DECLARE _inActive int;
	DECLARE _total int;
	Select 
		Count(1) into _active
	from 
		user
	where
		`Status`=1
		AND
        IsDeleted=0;
        
	Select
		Count(1) into _total 
	from 
		user
	where
		IsDeleted=0;
	Set _inActive = _total - _active;
 
 Select _total Total,_active `Active`,_inactive `InActive`; 
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVendorById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetVendorById`(
	IN _id int
)
BEGIN
	SELECT
		vp.Id,
		vp.CompanyName,
		vp.ContactName,
		vp.ContactMobile,
		vp.ContactEmail,
		vp.Address,
		vp.GST,
		vp.CompanyTypeId,
		vp.VendorTypeId,
		vp.IsActive
	FROM
		vendor vp
	WHERE
		vp.IsDeleted = 0 AND vp.Id = _id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVendorList` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetVendorList`(
	IN _limit int,
    IN _offset int,
    IN _companyName varchar(64),
    IN _typeId int,
    IN _vendorTypeId int,
    IN _contactName varchar(64),
    IN _statusId int
)
BEGIN
	DECLARE totalCount int;
	DECLARE iteration int;
	DECLARE pageNum int DEFAULT(_offset);
	SET _offset=((_offset-1)*_limit);
    
    SET @qury = 
     CONCAT('
		SELECT 
			vp.Id,
			vp.CompanyName,
			ct.CompanyType,
			vt.VendorType,
			vp.ContactName,
            vp.IsActive
		FROM 
			vendor vp
		LEFT JOIN
			companytype ct
		ON
			vp.CompanyTypeId=ct.Id
		LEFT JOIN
			vendortype vt
		ON
			vp.VendorTypeId=vt.Id
		WHERE 
			vp.IsDeleted=0 ');
    
	IF _companyName <> '' AND _companyName IS NOT NULL 
    THEN
		SET @qury = concat(@qury," AND vp.CompanyName like '%",_companyName,"%' ");
	END IF;
    
    IF _typeId <> 0 and _typeId is not null
    THEN
		SET @qury = CONCAT(@qury, " AND vp.CompanyTypeId=", _typeId);
	END IF;
    
    IF _statusId <> 0 and _statusId is not null
    THEN
		SET @qury = CONCAT(@qury, " AND vp.IsActive=", _statusId);
	END IF;
     
    IF _vendorTypeId <> 0 and _vendorTypeId is not null
    THEN
		SET @qury = CONCAT(@qury, " AND vp.VendorTypeId=", _vendorTypeId);
	END IF;
    
    IF _contactName <> '' AND _contactName IS NOT NULL 
    THEN
		SET @qury = concat(@qury," AND vp.ContactName like '%",_contactName,"%' ");
	END IF;
    
	SET @limits = CONCAT(@qury, " LIMIT ", _limit, " OFFSET ", _offset);
	PREPARE stmt FROM @limits;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;
    
    SET @qury2 = CONCAT('SELECT COUNT(1) AS TotalRecord, ',_limit,' PageSize, ', pageNum ,' PageNum FROM (', @qury,' ) counts');
	PREPARE stmt2 FROM @qury2;
	EXECUTE stmt2;
    DEALLOCATE PREPARE stmt2;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVendorStatusCount` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetVendorStatusCount`()
BEGIN
	DECLARE _active INT;
	DECLARE _inActive INT;
	DECLARE _total INT;
    
	SELECT
    Count(1) into _active
    FROM 
		vendor
	WHERE
		IsActive=1
		AND
        IsDeleted=0;
        
	SELECT
		Count(1) into _total
	FROM
		vendor
	WHERE 
		IsDeleted=0;
	SET _inActive = _total - _active;
 
 SELECT _total Total,_active `Active`,_inactive `InActive`; 
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVendorTypeDropdown` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetVendorTypeDropdown`()
BEGIN
	SELECT 
		v.Id `Key`,
		v.VendorType `Value`
	FROM
		vendortype v;
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetWarehouseList` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetWarehouseList`(
	IN _limit int,
    IN _offset int,
    IN _typeId int,
    IN _capacity double,
    IN _statusId int,
    IN _locationName varchar(64)
)
BEGIN
	DECLARE totalCount int;
	DECLARE iteration int;
	DECLARE pageNum int DEFAULT(_offset);
	SET _offset=((_offset-1)*_limit);
    
    SET @qury = 
     CONCAT('
		SELECT 
			wp.`Id`,
			wt.`Type`,
			wp.`MaxCapacity` Capacity,
			wp.`LocationName`,
			wp.`IsActive` AS Status
		FROM 
			Warehouse wp
		LEFT JOIN
			WarehouseType wt
		ON
			wp.WarehouseTypeId=wt.Id
		 Where 
         wp.IsDeleted=0	');
    
           
	IF _locationName <> '' and _locationName is not null
    then
		set  @qury = concat(@qury," AND (wp.LocationName like '%",_locationName,"%') ");
	END IF;
    
    IF _typeId <> 0 and _typeId is not null
    THEN
		-- SET @qury = CONCAT(@qury, " AND wp.TypeId=", _typeId);
        SET @qury = CONCAT(@qury, " AND wt.Id =", _typeId);
	END IF;
    
    IF _statusId <> 0 and _statusId is not null
    THEN
		-- SET @qury = CONCAT(@qury, " AND wp.IsActive=", _statusId);
        SET @qury = CONCAT(@qury, " AND wp.IsActive=", _statusId);
	END IF;
    IF _capacity <> 0 and _capacity is not null
    THEN
		SET @qury = CONCAT(@qury, " AND wp.MaxCapacity=", _capacity);
	END IF;

    SET @limits = CONCAT(@qury, " LIMIT ", _limit, " OFFSET ", _offset);
    -- SELECT @qury;
	PREPARE stmt FROM @limits;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;
    
    SET @qury2 = CONCAT('SELECT COUNT(1) AS TotalRecord, ',_limit,' PageSize, ', pageNum ,' PageNum FROM (', @qury,' ) counts');
	PREPARE stmt2 FROM @qury2;
	EXECUTE stmt2;
    DEALLOCATE PREPARE stmt2;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetWarehouseList_test` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`backup`@`%` PROCEDURE `GetWarehouseList_test`(
	IN _limit int,
    IN _offset int,
    IN _typeId int,
    IN _capacity double,
    IN _statusId int,
    IN _locationName varchar(64)
)
BEGIN
	DECLARE totalCount int;
	DECLARE iteration int;
	DECLARE pageNum int DEFAULT(_offset);
	SET _offset=((_offset-1)*_limit);
    
    SET @qury = 
     CONCAT('
		SELECT 
			wp.`Id`,
			wt.`Type`,
			wp.`MaxCapacity` Capacity,
			wp.`LocationName`,
			ap.`Status` 
		FROM 
			`greenplanet`.`WarehouseProfile` wp
		LEFT JOIN
			WarehouseType wt
		ON
			wp.TypeId=wt.Id
		LEFT JOIN
			ActiveProfile ap
		ON
			wp.IsActive=ap.Id
		 Where 
         wp.IsDeleted=0	');
    
           
	IF _locationName <> '' and _locationName is not null
    then
		set  @qury = concat(@qury," AND (wp.LocationName like '%",_locationName,"%') ");
	END IF;
    
    IF _typeId <> 0 and _typeId is not null
    THEN
		-- SET @qury = CONCAT(@qury, " AND wp.TypeId=", _typeId);
        SET @qury = CONCAT(@qury, " AND wt.Id =", _typeId);
	END IF;
    
    IF _statusId <> 0 and _statusId is not null
    THEN
		-- SET @qury = CONCAT(@qury, " AND wp.IsActive=", _statusId);
        SET @qury = CONCAT(@qury, " AND ap.Id=", _statusId);
	END IF;
     
    IF _capacity <> 0 and _capacity is not null
    THEN
		SET @qury = CONCAT(@qury, " AND wp.MaxCapacity=", _capacity);
	END IF;
   
   
   
    SET @qury = CONCAT(@qury, " ORDER BY 1 DESC LIMIT ", _limit, " OFFSET ", _offset);
    -- SELECT @qury;
	PREPARE stmt FROM @qury;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;
    
    SET @qury1 = 
     CONCAT('
		SELECT 
			wp.`Id`,
			wt.`Type`,
			wp.`MaxCapacity` Capacity,
			wp.`LocationName`,
			ap.`Status` 
		FROM 
			`greenplanet`.`WarehouseProfile` wp
		LEFT JOIN
			WarehouseType wt
		ON
			wp.TypeId=wt.Id
		LEFT JOIN
			ActiveProfile ap
		ON
			wp.IsActive=ap.Id
		 Where 
         wp.IsDeleted=0	');
    
    IF _locationName <> '' and _locationName is not null
    then
		set  @qury1 = concat(@qury1," AND (wp.LocationName like '%",_locationName,"%') ");
	END IF;
    
    IF _typeId <> 0 and _typeId is not null
    THEN
		-- SET @qury = CONCAT(@qury, " AND wp.TypeId=", _typeId);
        SET @qury1 = CONCAT(@qury1, " AND wt.Id =", _typeId);
	END IF;
    
    IF _statusId <> 0 and _statusId is not null
    THEN
		-- SET @qury = CONCAT(@qury, " AND wp.IsActive=", _statusId);
        SET @qury1 = CONCAT(@qury1, " AND ap.Id=", _statusId);
	END IF;
     
    IF _capacity <> 0 and _capacity is not null
    THEN
		SET @qury1 = CONCAT(@qury1, " AND wp.MaxCapacity=", _capacity);
	END IF;
    
    SET @qury2 = CONCAT('SELECT COUNT(1) AS TotalRecord, ',_limit,' PageSize, ', pageNum ,' PageNum FROM (', @qury1,' ) counts');
	PREPARE stmt2 FROM @qury2;
	EXECUTE stmt2;
    DEALLOCATE PREPARE stmt2;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetWarehouseTotalCount` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetWarehouseTotalCount`()
BEGIN
	DECLARE _active int;
	DECLARE _inActive int;
	DECLARE _total int;
	SELECT
		Count(1) INTO _active
	FROM 
		warehouse
	WHERE
		IsActive=1
        AND 
        IsDeleted=0;
	SELECT 
		Count(1) INTO _total
	FROM
		warehouse
	WHERE 
		IsDeleted=0;
	SET _inactive = _total - _active;
 
 SELECT _total Total,_active `Active`,_inActive `InActive`; 
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetWarehouseTypeDropdown` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetWarehouseTypeDropdown`()
BEGIN
	SELECT 
		w.Id `Key`, 
        w.Type `Value` 
	FROM
		warehousetype w ; 
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetWarhouseLocationDropdown` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GetWarhouseLocationDropdown`()
BEGIN
	SELECT 
		w.Id `Key`,
		w.LocationName `Value`
	FROM
		warehouse w;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `Get_StockAudit_List` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `Get_StockAudit_List`(
	IN _offset int,
	IN _limit int,
	IN _warehouseId int,
	IN _fromDate varchar(16),
	IN _toDate varchar(16),
	IN _userId int,
	IN _status int
)
BEGIN
    DECLARE totalCount int;
	DECLARE iteration int;
	DECLARE pageNum int DEFAULT(_offset);
	SET _offset=((_offset-1)*_limit);
    
     SET @qury = 
     CONCAT("SELECT 
				s.Id,
				w.LocationName WarehouseName,
				u.Name UserName,
				s.AuditInitiatedOn,
				CASE
					WHEN s.IsAuditDone = 1 AND s.IsAuditPassed = 1 THEN 'Pass'
					WHEN s.IsAuditDone = 1 AND s.IsAuditPassed = 0 THEN 'Fail'
					WHEN s.IsAuditDone = 0 AND s.IsAuditPassed = 0 THEN 'In Progress'
				END AuditStatus
			FROM 
				stockauditinitiation s 
			INNER JOIN
				warehouse w 
			ON
				s.WarehouseId = w.Id 
			INNER JOIN 
				user u 
			ON
				s.CreatedBy = u.Id 
			WHERE 
				1=1 
			");    
           
           
	IF _warehouseId <> 0 AND !ISNULL(_warehouseId) 
    THEN
		SET @qury = CONCAT(@qury, " AND  w.Id= ", _warehouseId);
	END IF;
    
    IF !ISNULL(_fromDate) AND !ISNULL(_toDate) AND _fromDate <> '' AND _toDate <> '' THEN
    SET @qury = CONCAT(@qury, " AND s.AuditInitiatedOn BETWEEN '", _fromDate, "' AND '", _toDate, "'");
	END IF;
    
	IF _userId <> 0 AND !ISNULL(_userId)
    THEN
		SET @qury = CONCAT(@qury, " AND  u.Id= ", _userId);
	END IF;
    
    IF _status <> 0 AND !ISNULL(_status)
    THEN
		CASE
        WHEN _status = 1 #PASS
			THEN
			SET  @qury = CONCAT(@qury, " AND s.IsAuditDone = 1 AND s.IsAuditPassed = 1 ");
		
        WHEN _status = 2  #INPROGRESS
			THEN
            SET  @qury = CONCAT(@qury, " AND s.IsAuditDone = 0 AND s.IsAuditPassed = 0 ");
        
        WHEN _status = 3  #FAIL
			THEN
            SET  @qury = CONCAT(@qury, " AND s.IsAuditDone = 1 AND s.IsAuditPassed = 0  ");
        
        END CASE;
	END IF;
   
    SET @limits = CONCAT(@qury, " LIMIT ", _limit, " OFFSET ", _offset);
	PREPARE stmt FROM @limits;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;
    
    SET @qury2 = CONCAT('SELECT COUNT(1) AS TotalRecord, ',_limit,' PageSize, ', pageNum ,' PageNum FROM (', @qury,' ) counts');
	PREPARE stmt2 FROM @qury2;
	EXECUTE stmt2;
    DEALLOCATE PREPARE stmt2;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GlobalSearchWeb` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `GlobalSearchWeb`(
	IN _serialNumber varchar(16)
)
BEGIN
	DECLARE serialNumberId int DEFAULT(SELECT Id FROM productserialnumber WHERE SerialNumber = _serialNumber);
	IF(serialNumberId IS NOT NULL) THEN
        -- Serial Number Details
		SELECT
			snp.Id Id,
			snp.SerialNumber,
			pp.Name Name,
			m.Name Manufacturer,
			pp.Price,
			pp.ProductSku,
			c.Name Category
		FROM
			productserialnumber snp
				INNER JOIN
			stockinwarditeminformation psp ON psp.Id = snp.StockInwardItemInformationId
				INNER JOIN 
			stockinwardbasicinformation ip ON ip.Id = psp.StockInwardBasicInformationId
				LEFT JOIN
			vendor vp ON ip.VendorId = vp.Id
				INNER JOIN
			product pp ON psp.StockInwardBasicInformationId = pp.Id
				INNER JOIN
			Manufacturer m ON pp.ManufacturerId = m.Id
				INNER JOIN
			category c ON pp.CategoryId = c.Id
		WHERE
			snp.SerialNumber = _serialNumber;
                
		-- Serial Number Details
			SELECT 
				at.ActionType  `Transaction`, 
				snh.ActionDate, 
				u.`Name` `User`, 
				wp.LocationName Location, 
				snh.StockInOutOrderNumber PurchasedAndSoldNumber ,
                vp.CompanyName Dealer
			FROM 
				productserialnumberhistory snh 
			INNER JOIN 
				actiontype `at` 
			ON 
				snh.ActionTypeId = at.Id 
			INNER JOIN 
				warehouse wp 
			ON 
				snh.WarehouseId  = wp.Id 
			INNER JOIN 
				user u 
			ON 
				snh.CreatedBy = u.Id 
			INNER JOIN 
				vendor vp
			ON
				vp.Id = snh.BuyerSellerId 
			WHERE 
				snh.ProductSerialNumberId = serialNumberId;
	ELSE 
		-- SELECT 0 IsSuccess, 'Serial Number Not Found' AS Message;
        SELECT 0 Id LIMIT 0;
        SELECT '' `USER` LIMIT 0;
	END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `INV12` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `INV12`()
BEGIN
	DECLARE _dispatched int;
	SELECT
		COUNT(*) INTO _dispatched
    FROM  
		salesorderitemsinformation AS si
		INNER JOIN
		salesorderbasicinformation  AS sb
		ON
		si.SaleOrderId = sb.Id 
		INNER JOIN
		productsprofile p 
		ON
		si.ProductSKU = p.Id
		INNER JOIN 
        saleorderstatus ss 
        ON
		sb.StatusId = ss.Id
	WHERE 
		P.Id = 2;
	SELECT _dispatched;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `Inventory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `Inventory`()
BEGIN
	SELECT 
		p.Name, 
        p.ProductSKU, 
        p.Price, 
	SUM(
        CASE 
			WHEN 
				sos.StatusType = 'In Progress' 
			THEN 
				soii.Quantity 
			ELSE 0 END
		)
        AS InProgress,
	SUM(
		CASE 
			WHEN 
				sos.StatusType = 'Pending' 
			THEN 
				soii.Quantity
			ELSE 0 END
        ) 
        AS Pending,
	SUM(
		CASE
			WHEN 
				sos.StatusType = 'Dispatched' 
			THEN 
				soii.Quantity 
			ELSE 0 END
        ) 
        AS Dispatched		
	FROM 
		salesorderitemsinformation AS soii
	INNER JOIN
		salesorderbasicinformation AS sobi
	ON 
		soii.SalesOrderBasicInformationId = sobi.Id 
	INNER JOIN 
		product p 
	ON
		soii.ProductId = p.Id
	INNER JOIN 
		saleorderstatus sos 
    ON
		sobi.SaleOrderStatusId = sos.Id
	GROUP BY  
		p.Name , p.ProductSKU,  p.Price; 
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `Inventory2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `Inventory2`()
BEGIN
	SELECT 
		COUNT(*) AS RecordCount,
        p.ProductSKU,
        p.Price,
	CASE
		WHEN 
			sos.StatusType = 'InProgress' 
		THEN 
			SUM(
				CASE 
					WHEN 
						sos.StatusType = 'InProgress' 
					THEN 
					soii.Quantity 
				ELSE 0
					END
						)
				ELSE 0
				END AS InProgress,
	CASE
		WHEN 
			sos.StatusType = 'Pending' 
		THEN 
			SUM(
				CASE
					WHEN 
						sos.StatusType = 'Pending' 
					THEN 
						soii.Quantity 
				ELSE 0 
					END
				)
				ELSE 0
				END AS Pending,
	CASE
		WHEN 
			sos.StatusType = 'Dispatch' 
		THEN 
			SUM(
				CASE 
					WHEN 
						sos.StatusType = 'Dispatch' 
					THEN 
						soii.Quantity 
				ELSE 0 
					END
				)
				ELSE 0
				END AS Dispatch
	FROM 
		salesorderitemsinformation AS soii
	INNER JOIN 
		salesorderbasicinformation AS sobi
    ON 
		soii.SalesOrderBasicInformationId = sobi.Id
	INNER JOIN 
		product AS p 
    ON 
		soii.ProductSKU = p.Id
	INNER JOIN 
		saleorderstatus AS sos 
    ON 
		sobi.SaleOrderStatusId = sos.Id
	 WHERE 
		p.ProductSKU = '1013'
	GROUP BY 
		p.ProductSKU, p.Price;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `LoginUser` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `LoginUser`(
	IN _email varchar(64), 
    IN _password varchar(64))
BEGIN
	DECLARE UserId int;
    DECLARE `Role` int;
    DECLARE Warehouse int;
    
    IF ( EXISTS (SELECT Id FROM logindetail WHERE UserName = _email))
    THEN
		IF (EXISTS (SELECT Id FROM logindetail WHERE UserName = _email AND `Password` = MD5(_password)) )
		THEN 	
			SELECT 
				up.Id,
				up.UserRoleId,
                up.WarehouseId
			INTO 
				UserId,
				`Role`,
				Warehouse
			FROM 
				logindetail AS lp
			INNER JOIN
				user up
			ON 
				lp.UserId = up.Id
			WHERE
				lp.UserName = _email 
			AND BINARY 
				lp.`Password` = MD5(_password); 

			SELECT
				1 IsSuccess,
				UserId Id,
				`Role` Role,
                Warehouse Warehouse;		
		ELSE	
			SELECT 
				0 IsSuccess,
				'Wrong Password' Message;
		END IF;
	ELSE 
		SELECT 
			0 IsSuccess,
			"User doesn't exists" Message;
	END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `MarkAuditComplete` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `MarkAuditComplete`(
	IN _Id int,
	IN _isAuditPassed int,
	IN _userId int
)
BEGIN
	UPDATE 
		stockauditinitiation
	SET 
		IsAuditPassed = _isAuditPassed, 
		IsAuditDone = 1, 
		ModifiedOn = NOW(), 
		ModifiedBy = _userId
	WHERE 
		Id = _Id;	
	SELECT 1 IsSuccess, 'Stock Audit marked completed' Message;	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `MarkAuditCompleteForSerialNumber` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `MarkAuditCompleteForSerialNumber`(
    IN _auditId int,
    IN _categoryId int,
    IN _serialNumber varchar(16),
    IN _userId int
)
BEGIN
    DECLARE productSerialNumberId int DEFAULT 0;
    SET 
		productSerialNumberId = (
	SELECT 
		Id
	FROM 
		productserialnumber psn
	WHERE 
		psn.SerialNumber = _serialNumber
	AND 
		CheckForSalesOrderedOrNot(psn.Id)
    );
    IF (
		productSerialNumberId IS NOT NULL
	) 
    AND (
		productSerialNumberId <> 0
	) 
	THEN 
	IF (
	SELECT 
		IsAuditDone
	FROM 
		stockaudititem
	WHERE 
		StockAuditInitiationId = _auditId
	AND 
		CategoryId = _categoryId
	AND 
		ProductSerialNumberId = productSerialNumberId
		) = 1 
	THEN
	SELECT 0 AS IsSuccess, 'Audit already done for this serial number.' AS Message;
	ELSE
	UPDATE 
		stockaudititem
	SET  
		IsAuditDone = 1,
		ModifiedOn = NOW(), 
		ModifiedBy = _userId
	WHERE 
		StockAuditInitiationId = _auditId
	AND 
		CategoryId = _categoryId
	AND 
		ProductSerialNumberId = productSerialNumberId;
	SELECT 1 AS IsSuccess, 'Audit successful.' AS Message;
	END IF;
    ELSE 
	SELECT 0 AS IsSuccess, 'This serial number is either dispatched or not in stock.' AS Message;
    END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `MarkComplete` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `MarkComplete`(
	IN _id int
)
BEGIN
	UPDATE 
		stockinwardbasicinformation
	SET 
		Status = 1
	WHERE 
		Id = _id;
	SELECT 
		1 IsSuccess,
		'Invoice marked completed successfully.' Message;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `MarkStockAsDispatched` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `MarkStockAsDispatched`(
	IN _id int,
    IN _userId int
)
BEGIN
	DECLARE serialProfileId int;
	DECLARE locationId int;
	DECLARE salesOrderId int;
	DECLARE actionType int;
	DECLARE customerId int;

	SELECT
		Id 
	INTO
		actionType
	FROM
		actiontype
	WHERE
		Id=3;
	SELECT 
		 sob.Id,
		 sob.WarehouseId,
		 sodn.ProductSerialNumberId,
		 sob.VendorId
	INTO 
		 salesOrderId,
		 locationId,
		 serialProfileId,
		 customerId
	FROM 
		  saleorderdispatchserialnumber sodn
	INNER JOIN 
		  productserialnumber snp 
	ON    
		  snp.Id = sodn.ProductSerialNumberId
	INNER JOIN 
		  salesorderitemsinformation soi	 
	ON     
		  sodn.SalesOrderItemInformationId = soi.Id
	INNER JOIN 
		   salesorderbasicinformation sob
	ON
		   sob.Id = soi.SalesOrderBasicInformationId
	WHERE 
		   sodn.Id=_id;

	UPDATE
		saleorderdispatchserialnumber
	SET
		IsDispatched = 1,
		DispatchDate = NOW(),
		ModifiedOn = NOW(),
		ModifiedBy = _userId
	WHERE
		Id = _id;
	 
	CALL SaveSerialNumberHistory(
								serialProfileId,
								actionType,
								locationId,
								salesOrderId,
								customerId,
								_userId
								);
		
	SELECT
		1 IsSuccess,
		'Dispatched successful' Message;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `MarkStockOutwardAsComplete` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `MarkStockOutwardAsComplete`(
	IN _id int,
    IN _userId int
)
BEGIN
	UPDATE 
		salesorderbasicinformation
    SET
		SaleOrderStatusId = 1,
        ModifiedBy = _userId,
        ModifiedOn = NOW()
	WHERE
		Id = _id;
    SELECT 
		1 IsSuccess, 
		'Marked as complete.' Message;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `NEWSP` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `NEWSP`(
  IN _itemskuId INT
)
BEGIN
  DECLARE _id INT;
  DECLARE mssg VARCHAR(64);
  DECLARE _serialnumberId INT;
  DECLARE done INT DEFAULT FALSE;
  
  DECLARE cur CURSOR FOR  
  SELECT Id FROM ProductSkuProfile WHERE ProductSkuId = _itemskuId;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
  IF EXISTS (SELECT Id FROM ProductSkuProfile WHERE ProductSkuId = _itemskuId) THEN    
    CREATE TEMPORARY TABLE IF NOT EXISTS temp_ids (id INT);
    OPEN cur;
    
    read_loop: LOOP
      FETCH cur INTO _id;
      IF done THEN
        LEAVE read_loop;
      END IF;
      INSERT INTO temp_ids (id) VALUES (_id);
    END LOOP;
    CLOSE cur;
    SELECT Id INTO _serialnumberId
    FROM serialnumberprofile s
    WHERE FIND_IN_SET(id, (SELECT GROUP_CONCAT(id) FROM temp_ids))
    AND s.IsScanned=1;
    DROP TEMPORARY TABLE IF EXISTS temp_ids;
  ELSE
    SET mssg = "ITEM SKU DOES NOT EXIST";
  END IF;
  Select mssg;
  END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `new_procedure` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `new_procedure`(
	_id int
)
BEGIN
	SELECT 
		Username,
        Password
	FROM
		logindetail
    WHERE
		Id=_id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `PrintAllByInvoiceBtnClicked` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `PrintAllByInvoiceBtnClicked`(
	IN _id  int,
	IN _userId int
)
BEGIN
	DECLARE totalCount int DEFAULT 0;
	DECLARE iteration int DEFAULT 0;
	DECLARE serialNumber varchar(16);
	DECLARE serialNumberId int;
	DECLARE warehouseId int; 
	DECLARE vendorId int;
	DROP TEMPORARY TABLE IF EXISTS tmp_tbl;
    CREATE TEMPORARY TABLE IF NOT EXISTS tmp_tbl
    (
        Id int PRIMARY KEY AUTO_INCREMENT,
        SerialNumId int
    );
	INSERT INTO 
		tmp_tbl ( SerialNumId )
	(
    SELECT 
		psn.Id
	FROM
		productserialnumber psn
		INNER JOIN 
		stockinwarditeminformation siii
		ON 	
		psn.StockInwardItemInformationId = siii.Id
		INNER JOIN
		stockinwardbasicinformation sibi 
		ON
		siii.StockInwardBasicInformationId = sibi.Id
	WHERE
		sibi.Id = _id 
		AND 
		psn.IsScanned = 0) ;
	SELECT 
		VendorId, 
        WarehouseId
	INTO 
		vendorId,
        warehouseId
	FROM 
		stockinwardbasicinformation
	WHERE 
		Id=_id;
	SET 
		totalCount = (
	SELECT 
		count(1) 
    FROM 
		tmp_tbl);
	SET
		iteration = 1;
	WHILE 
		iteration <= totalCount 
	DO
	SELECT
		SerialNumId 
	INTO 
		serialNumberId
	FROM
		tmp_tbl
	WHERE
		Id = iteration ;
	UPDATE 
		productserialnumber psn 
	SET 
		psn.IsScanned = 1, psn.ScanDate = NOW()
	WHERE
		psn.Id = serialNumberId;
	CALL SaveSerialNumberHistory(
								serialNumberId,
								1, 
								warehouseId,
								_id,
								vendorId, 
								_userId
								);
	SET 
		iteration = iteration + 1;
	SET 
		serialNumberId = 0;
	END WHILE;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ProductById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `ProductById`(
	IN _id int
)
BEGIN
	SELECT 
		p.Id, 
        p.ProductSKU,
		p.Name, 
		c.Id AS CategoryId,
		m.Id AS ManufacturerId, 
		p.Name, 
		p.EANCode, 
		p.Price ,
		ap.Status AS IsActive
	FROM 
		product p 
		LEFT JOIN 
		category c
		ON
		p.CategoryId = c.Id
		LEFT JOIN 
		manufacturer m
		ON
		p.ManufacturerId = m.Id
		INNER JOIN 
		activeprofile ap
		ON 
		p.IsActive = ap.Id 
	WHERE 
		p.Id = _id 
		AND 
		p.IsDeleted = 0; 
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ProductByIdSTockInward` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `ProductByIdSTockInward`(
	IN _id int
)
BEGIN
	SELECT 
		p.Id,
        p.ProductSKU,
		p.Name, 
		c.Name AS CategoryName,
		m.Name AS ManufactrerName, 
		p.Name, 
		p.EANCode, 
		p.Price ,
		ap.Status AS IsActive
	FROM 
		product p 
		INNER JOIN 
		category c
		ON 
		p.CategoryId = c.Id
		INNER JOIN 
		manufacturer m
		ON 
		p.ManufacturerId = m.Id
		INNER JOIN 
		activeprofile ap
		ON 
		p.IsActive = ap.Id 
	WHERE 
		p.Id = _id 
		AND 
		p.IsDeleted = 0; 
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `RefactorGetInventoryDetail` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `RefactorGetInventoryDetail`(
    IN _startDate DATE,
    IN _endDate DATE,
    IN _name VARCHAR(255),
    IN _sortColumn VARCHAR(50),
    IN _sortOrder VARCHAR(5),
    IN _locationId INT,
    IN _limit INT,
    IN _offset INT
)
BEGIN
    SELECT
        SUM(ReceivedInventory) AS ReceivedInventory,
        SUM(DispatchedInventory) AS DispatchedInventory,
        SUM(PendingInventory) AS PendingInventory,
        SUM(DamageInventory) AS DamageInventory,
        SUM(StockQuantity) AS StockQuantity,
        SUM(TotalPrice) AS TotalPrice
      
    FROM (
        SELECT
            ReceivedInventory,
            DispatchedInventory,
            PendingInventory,
            DamageInventory,
            (ReceivedInventory - (DispatchedInventory + PendingInventory)) AS StockQuantity,
             ((ReceivedInventory-(DispatchedInventory+PendingInventory))) * TotalPrice as TotalPrice
        FROM (
            SELECT
                GetReceivedInventoryCountForProductId(p.Id, _startDate, _endDate, _locationId) AS ReceivedInventory,
                GetSalesDispatchInventoryCountForProductId(p.Id, _startDate, _endDate, _locationId) AS DispatchedInventory,
                GetSalesPendingInventoryCountForProductId(p.Id, _startDate, _endDate, _locationId) AS PendingInventory,
                GetSalesDamageInventoryCountForProductId(p.Id, _endDate, _locationId) AS DamageInventory,
                GetPriceForItemsAtLocation(p.Id, _startDate, _endDate, _locationId) AS TotalPrice
            FROM
                productsprofile p
            WHERE
                p.IsActive = 1
                AND GetReceivedInventoryCountForProductId(p.Id, _startDate, _endDate, _locationId) > 0
        ) tbl
    ) tbl1;

    SET @qury = CONCAT(
        "SELECT
            p.Id,
            p.ProductSKU,
            p.Name,
            GetReceivedInventoryCountForProductId(p.Id,'", _startDate, "','", _endDate, "',", _locationId, ") AS ReceivedInventory,
            GetSalesDispatchInventoryCountForProductId(p.Id,'", _startDate, "','", _endDate, "',", _locationId, ") AS DispatchedInventory,
            GetSalesPendingInventoryCountForProductId(p.Id,'", _startDate, "','", _endDate, "',", _locationId, ") AS PendingInventory,
            GetSalesDamageInventoryCountForProductId(p.Id,'", _endDate, "',", _locationId, ") AS DamageInventory,
            GetPriceForItemsAtLocation(p.Id,'", _startDate, "','", _endDate, "',", _locationId, ") AS TotalPrice
        FROM
            productsprofile p
        WHERE
            p.IsActive = 1
            AND GetReceivedInventoryCountForProductId(p.Id,'", _startDate, "','", _endDate, "',", _locationId, ") > 0"
    );

    IF !ISNULL(_name) AND _name <> '' THEN
        SET @qury = CONCAT(@qury, " AND p.Name LIKE '%", _name, "%'");
    END IF;

    SET @qury2 = CONCAT('SELECT COUNT(1) AS TotalRecord FROM (', @qury, ' ) tbl');
    PREPARE stmt2 FROM @qury2;
    EXECUTE stmt2;
    DEALLOCATE PREPARE stmt2;

    SET @qury = CONCAT(@qury, " LIMIT ", _limit, " OFFSET ", _offset);

    SET @qury = CONCAT("SELECT * FROM (", @qury, ") tbl ORDER BY ");

    IF !ISNULL(_sortColumn) AND _sortColumn <> '' THEN
        SET @qury = CONCAT(@qury, _sortColumn);
    ELSE
        SET @qury = CONCAT(@qury, "Name");
    END IF;

    IF !ISNULL(_sortOrder) AND _sortOrder <> '' THEN
        SET @qury = CONCAT(@qury, " ", _sortOrder);
    ELSE
        SET @qury = CONCAT(@qury, " ASC");
    END IF;

    PREPARE stmt FROM @qury;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ResetPassword` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `ResetPassword`(
	IN _id int,
    IN _oldPassword varchar(64),
    IN _newPassword varchar(64)
)
BEGIN
	IF EXISTS(
			SELECT
				Id 
			FROM
				logindetail ld 
			WHERE 
				ld.userId = _id 
			AND 
				ld.`password` = MD5(_oldPassword)
			  ) 
	THEN
		UPDATE 	
			`user` u 
		JOIN 
			logindetail ld 
		ON 
			u.Id = ld.userId
		SET 
			ld.`Password` = MD5(_newPassword)
		WHERE 
			u.Id = _id 
		AND 
			ld.`password` = MD5(_oldPassword);
        
		SELECT 
			1 AS IsSuccess,
			'Password Reset Successfully' AS Message;
	ELSE
		SELECT
			0 AS IsSuccess,
			'Wrong Password' AS Message;
	END IF ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ReturnBySerialNumber` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `ReturnBySerialNumber`(
	IN _serialNumber int,
    IN _userId int,
    IN _actionType int
)
BEGIN
	IF _actionType = 1 
    THEN 
	UPDATE 
        productserialnumber 
	SET 
		IsDamage = 1, 
		DamageDate = NOW() 
	WHERE 
		SerialNumber = _serialNumber;
	END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SaleOrderExcelData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `SaleOrderExcelData`(
  IN _data JSON,
  IN _itemSKU varchar(16),
  IN _userId int
)
BEGIN
	DECLARE _id int;
	DECLARE mssg varchar(64);
	DECLARE _serialnumber varchar(16); 
	DECLARE totalCount int DEFAULT 0;
	DECLARE iteration int DEFAULT 0;
	DECLARE itemNumber varchar(64) DEFAULT '';
	DECLARE serialNumber varchar(64) DEFAULT '';
	DECLARE saleorderItemInformationId int DEFAULT 0;
	DECLARE serialnumberprofileId int DEFAULT 0;
  
	SELECT 
		Id 
	INTO 
		_id 
	FROM 
		product 
	WHERE 
		ProductSKU = _itemSKU;
	IF
		_id IS NOT NULL 
	THEN
    DROP TEMPORARY TABLE IF EXISTS tmp_tbl;
    CREATE TEMPORARY TABLE IF NOT EXISTS tmp_tbl
    (
		Id INT PRIMARY KEY AUTO_INCREMENT,
        ItemNumber varchar(64),
        SerialNumber varchar(64),
        Errors varchar(1024)
    );
    INSERT INTO 
		tmp_tbl(
        ItemNumber,
        SerialNumber
        )
    SELECT	
		tbl.ItemNumber,
        tbl.SerialNumber
    FROM JSON_TABLE(
		_data,
		"$[*]" COLUMNS(
		ItemNumber varchar(64) PATH "$.ItemNumber",
		SerialNumber varchar(64) PATH "$.SerialNumber"
		)
	) AS tbl;
    SET 
		totalCount = (
    SELECT 
		COUNT(*) 
	FROM 
		tmp_tbl);
    SET 
		iteration = 1;
    WHILE
		iteration <= totalCount 
	DO
	SELECT 
		ItemNumber, 
        SerialNumber
	INTO 
		itemNumber, 
		serialNumber
	FROM 
		tmp_tbl
	WHERE 
		Id = iteration;
	IF 
		serialNumber IS NULL 
	THEN -- Changed _serialnumber to serialNumber
    SET 
		mssg = "No matching SerialNumberProfileId found.";
	ELSE
    IF EXISTS(
	SELECT 
		s.Id
	FROM 
		saleorderdispatchserialnumber s
	INNER JOIN 
		productserialnumber sp
	ON	
		sp.Id = s.SerialNumberProfileId
	WHERE
		sp.SerialNumber = serialNumber) 
	THEN
	IF EXISTS(
    SELECT 
		s.Id
	FROM 
		saleorderdispatchserialnumber s 
	WHERE 
		s.IsDispatced = 1)
	THEN
	SET 
		mssg = "Item Sku is already dispatched";
	ELSE
	SELECT 
		Id 
	INTO
		saleorderItemInformationId 
	FROM 
		salesorderitemsinformation 
	WHERE 
		ProductSKU =itemNumber;
	SELECT 
		Id 
	INTO 
		serialnumberprofileId 
	FROM 
        saleorderdispatchserialnumber 
	WHERE  
        SerialNumberProfileId=serialNumber;      
	INSERT INTO 
		saleorderdispatchserialnumber(
        SaleOrderItemInformationId,
		SerialNumberProfileId, 
		IsDispatched, 
		IsDeleted,
		DispatchDate, 
		CreatedOn, 
		CreatedBy
      )
      VALUES(
		saleorderItemInformationId,
		serialnumberprofileId,
		1,
		0,
		NOW(),
		NOW(),
		_userId
		);
      END IF;
      ELSE
      SELECT
		s.Id
      FROM 
		saleorderdispatchserialnumber s
      INNER JOIN 
		serialnumberprofile sp
      ON 
		sp.Id = s.SerialNumberProfileId
      WHERE
		sp.SerialNo = serialNumber
      AND 
		s.IsDispatced = 0;
      UPDATE 
		saleorderdispatchserialnumber
      SET 
		IsDispatced = 1
      WHERE 
		SerialNumberProfileId = serialNumber;
      SET 
		mssg = "Dispatched Successfully";
		END IF;
		END IF;
		SET
			iteration = iteration + 1; 
		END WHILE;
		ELSE
		SET
			mssg = "ITEM SKU DOES NOT EXIST";
		END IF;
		SELECT 
			mssg, itemNumber,serialNumber;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SaleOrderItemsImportExcelData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `SaleOrderItemsImportExcelData`(
  IN _data json,
  IN _salesOrderId int,
  IN _userId int
)
BEGIN
	DECLARE totalCount int DEFAULT 0;
   	DECLARE iteration int DEFAULT 0;
    DECLARE serialNumber varchar(64) DEFAULT '';
   	DECLARE productSKUId int DEFAULT 0;
   	DECLARE serialNumberId int DEFAULT 0;
   	DECLARE locationId int;
    DECLARE customerId int;
    DECLARE actionType int; 
    DECLARE var int;
   	DECLARE salesItemsInformationTableId int DEFAULT 0;
    
	SELECT 
		CustomerId 
	INTO 
		customerId 
	FROM 
		salesorderbasicinformation sobi 
	WHERE
		sobi.Id = _salesOrderId;
	SELECT 
		WarehouseId,
        MovementTypeId 
	INTO 
		locationId, 
        var 
	FROM 
		salesorderbasicinformation sobi 
	WHERE 
		sobi.Id = _salesOrderId;
	IF(var = 1) 
    THEN
	SET 
		actionType = 2 ;
	END IF;
	IF(var = 2) 
	THEN
	SET 
		actionType = 6 ;
	END IF;
    
    DROP TEMPORARY TABLE IF EXISTS tmp_tbl;
    CREATE TEMPORARY TABLE IF NOT EXISTS tmp_tbl(
        Id INT PRIMARY KEY AUTO_INCREMENT,
        SerialNumber varchar(64),
        Errors varchar(1024)
    );
   INSERT INTO 
		tmp_tbl(
        SerialNumber
	)
    SELECT
		tbl.SerialNumber
	FROM JSON_TABLE(
		_data, 
		"$[*]" 
	COLUMNS(
		SerialNumber varchar(64) PATH "$.SerialNumber"
		)
	) 
    AS 
		tbl;
	SET 
		totalCount = (
    SELECT 
		count(1) 
	FROM 
		tmp_tbl
	);
	SET 
		iteration = 1;
	WHILE 
		iteration <= totalCount 
    DO
	SELECT 
		tbl.SerialNumber
	INTO
		serialNumber
	FROM 
		tmp_tbl tbl
	WHERE 
		Id = iteration;            
	SELECT 
		psn.Id,
		siii.ProductId 
	INTO 
		serialNumberId,
		productSKUId
	FROM 
		productserialnumber psn
	INNER JOIN 
		stockinwarditeminformation siii 
	ON
		psn.StockInwardItemInformationId = siii.Id 
	WHERE 
		psn.IsScanned = 1
	AND
		psn.SerialNumber = serialNumber;
	IF(
		serialNumberId IS NULL OR serialNumberId = 0
	)
    THEN
	UPDATE 
		tmp_tbl
	SET 
		Errors = 'Serial number does not exist.'
	WHERE 
		Id = iteration;
	ELSE
	IF(
	SELECT 
		COUNT(Id) 
	FROM
		saleorderdispatchserialnumber sodn
	WHERE 
		productserialnumberId = serialNumberId 
	AND 
		IsDeleted = 0)=0 
    THEN
	SET 
		salesItemsInformationTableId = (
	SELECT 
		Id
	FROM 
		salesorderitemsinformation soii 
	WHERE 
		SaleOrderId = _salesOrderId 
	AND 
		ProductSKU = productSKUId);
	IF(
		salesItemsInformationTableId IS NULL
	)
    THEN
	INSERT INTO 
		salesorderitemsinformation(
		ProductSKU,
        SaleOrderId, 
        ItemQuantity,
        IsDeleted,
        CreatedBy,
        CreatedOn
	)
	VALUES(
		productSKUId, 
        _salesOrderId, 
        0, 
        0,
        0, 
        NOW()
        );
	SET 
		salesItemsInformationTableId = LAST_INSERT_ID(); 
	END IF;
	UPDATE 
		salesorderitemsinformation
	SET 
		ItemQuantity = ItemQuantity + 1,
		ModifiedBy = _userId, 
		ModifiedOn = NOW()
	WHERE 
		Id = salesItemsInformationTableId;
	INSERT INTO 
		saleorderdispatchserialnumber(
        SalesOrderItemInformationId,
        productserialnumberId, 
        IsDispatched,
        IsDeleted,
        CreatedOn,
        CreatedBy
	)
	VALUES(
    salesItemsInformationTableId,
    serialNumberId,
    0,
    0,
    NOW(),
    _userId
    );
	CALL 
		SaveSerialNumberHistory(
        serialNumberId,
        actionType,
        locationId, 
        _salesOrderId,
        customerId, 
        _userId
	);
	ELSE
	UPDATE 
		tmp_tbl
	SET 
		Errors = 'Serial number already dispatched or associated to sales order.'
	WHERE 
		Id = iteration;
	END IF;
	END IF;
	SET 
		serialNumber = '';
	SET 
		productSKUId = 0;
	SET 
		serialNumberId = 0;
	SET 
		salesItemsInformationTableId = 0;
	SET 
		iteration = iteration + 1;
   END WHILE;
   SELECT
		tbl.SerialNumber SerialNumber, 
		tbl.Errors `Errors` 
   FROM 
		tmp_tbl tbl 
    WHERE Errors <> '';	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SaleOrderMarkComplete` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `SaleOrderMarkComplete`(
IN _id int,
IN _userId int
)
BEGIN
UPDATE 
      salesorderbasicinformation sob
SET 
   sob.SaleOrderStatusId=1, 
   sob.ModifiedBy=_userId, 
   sob.ModifiedOn=NOW()
WHERE sob.Id=_id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SaleOrderStatusMarkComplete` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `SaleOrderStatusMarkComplete`(
IN _id int
)
BEGIN
UPDATE salesorderbasicinformation sob
SET sob.StatusId=1
WHERE sob.Id=_id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `salesOrderExcel` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `salesOrderExcel`(
	In _id int
)
BEGIN
	SELECT  
		soii.id ,
        siii.ProductId,
        p.ProductSKU, 
        psn.SerialNumber, 
        sodn.DispatchDate
	FROM 
		salesorderitemsinformation soii  
	INNER JOIN
		salesorderbasicinformation sobi 
	ON 
		sobi.Id = soii.SalesOrderBasicInformationId
	INNER JOIN
		stockinwarditeminformation siii 
	ON 
		siii.ProductId = soii.ProductId
	INNER JOIN
		product p
	ON
		p.Id = soii.ProductId
	INNER JOIN 
		productserialnumber psn
	ON
		siii.Id = psn.StockInwardItemInformationId
	INNER JOIN
		saleorderdispatchserialnumber sodn
	ON 
		sodn.ProductSerialNumberId = psn.Id
	WHERE
		sobi.Id = _id 
	AND 
		sodn.IsDispatched = 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `salesOrderExportExcel` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `salesOrderExportExcel`(
	In _id int
)
BEGIN
	SELECT 
		p.ProductSKU,
		psn.SerialNumber,
		sodsn.DispatchDate
  --  p.Name,
   -- sodsn.IsReturnToManufacturer
	FROM
		saleorderdispatchserialnumber sodsn
	INNER JOIN
		salesorderitemsinformation soii 
	ON 
		sodsn.SalesOrderItemInformationId = soii.Id
	INNER JOIN
		productserialnumber psn 
	ON 
		sodsn.ProductSerialNumberId = psn.Id
	INNER JOIN
		stockinwarditeminformation siii 
	ON 
		siii.Id = psn.StockInwardItemInformationId
	INNER JOIN
		product p 
	ON 
		p.Id = siii.ProductId
	WHERE
		soii.SalesOrderBasicInformationId = _id
	AND
		sodsn.IsDispatched = 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SaveCategory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `SaveCategory`(
	IN _categoryType varchar(32),
	IN _userId int)
BEGIN 
	INSERT INTO 
		categorytype(
        Categorytype,
        CreatedBy,
        CreatedOn
	)
	VALUES(
        _categoryType,
        _userId,NOW()
	);
	SELECT 
		1 IsSuccess,
		"Data Saved Successfully" Message ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SaveCategorytype` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `SaveCategorytype`(
	IN _categoryType varchar(32),
	IN _userId int
)
BEGIN 
	INSERT INTO 
	category(
		Name,
        CreatedBy,
        CreatedOn
	)
	VALUES(
		_categoryType,
		 _userId,
        NOW()
    );
	SELECT 
		1 IsSuccess,
		"Data Saved Successfully" Message ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SaveManufacturerType` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `SaveManufacturerType`(
	IN _manufacturerType varchar(32),
	IN _userId int
)
BEGIN
	INSERT
	INTO 
		manufacturer(
					Name,
					CreatedBy,
					CreatedOn
					)
	VALUES(
			_manufacturerType,
			_userId,
            NOW()
		);
	SELECT 
		1 IsSuccess,
		"Data Saved Successfully" Message ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SaveMultipleSaleItemsData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `SaveMultipleSaleItemsData`(
	IN _productSkuIdList varchar(255),
	IN _saleOrderList varchar(255),
	IN _itemQuantityList varchar(255),
	IN _userIdList varchar(255)
	)
BEGIN
	DECLARE i int DEFAULT 1;
	DECLARE productSkuId int;
	DECLARE saleOrderId int;
	DECLARE itemQuantity int;
	DECLARE proManId int ;
	DECLARE proCatId int;
	DECLARE itemName varchar(64);
	DECLARE userId int;
	DECLARE ProductSkuLength int;
  
	SELECT(
		LENGTH(_productSkuIdList) - LENGTH(REPLACE(_productSkuIdList, ',', '')) + 1
	) 
	INTO
		ProductSkuLength;
	WHILE
		i <= ProductSkuLength
	DO
	SET 
		productSkuId = SUBSTRING_INDEX(SUBSTRING_INDEX(_productSkuIdList, ',', i), ',', -1);
	SET 
		saleorderId = SUBSTRING_INDEX(SUBSTRING_INDEX(_saleOrderList, ',', i), ',', -1);
	SET 
		itemQuantity = SUBSTRING_INDEX(SUBSTRING_INDEX(_itemQuantityList, ',', i), ',', -1);
	SET 
		userId = SUBSTRING_INDEX(SUBSTRING_INDEX(_userIdList, ',', i), ',', -1);
	SET
		proManId= (
	SELECT 
		ManufacturerId
	FROM 
		product 
	WHERE 
		Id=productSkuId);
	SET 
		proCatId=(
	SELECT 
		CategoryId 
	FROM 
		product 
	WHERE 
		Id=productSkuId
	);
	SET
		itemName=(
	SELECT 
		`Name` 
    FROM 
		product 
	WHERE 
		Id=productSkuId
	);
    INSERT INTO 
		salesorderitemsinformation(
		ProductId, 
		ManufacturerId, 
		CategoryId,
		SalesOrderBasicInformationId,
		ItemName, 
		Quantity, 
		IsDeleted, 
		CreatedBy, 
		CreatedOn
	)
	VALUES(
		productSkuId,
		proManId,
		proCatId,
		saleorderId,
		itemName,
		itemQuantity,
		0,
		userId,
		NOW()
	);            
    SET 
		i = i + 1;
	END WHILE;
  END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SaveSalesDetails` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `SaveSalesDetails`(
	IN _salesExcel JSON,
    IN _userId int
)
BEGIN
	SELECT 
		_salesExcel Result;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SaveSalesOrderBasicInformation` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `SaveSalesOrderBasicInformation`(
	IN _salesOrderNo varchar(32),
	IN _dateOfSale varchar(32),
	IN _customerId int,
	IN _movementTypeId int,
	IN _warehouseId int,
	IN _outType int,
	IN _userId int
)
BEGIN
	INSERT INTO 
		SalesOrderBasicInformation
        (
			SalesOrderNumber, 
			DateOfSale, 
			VendorId, 
			MovementTypeId, 
			WarehouseId,
			OutTypeId,
			SaleOrderStatusId,
			CreatedBy, 
			CreatedOn
		)
	VALUES
		(
			_salesOrderNo,
			_dateOfSale,
			_customerId,
			_movementTypeId,
			_warehouseId,
			_outType,
	IF ( 
		_outType = 1, 3, 2 ),
		_userId,
		NOW()
	);
	SELECT 
		last_insert_id() id,
        'Sales Order Added Successfully.' Message, 
        1 IsSuccess;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SaveSalesOrderItemsInformation` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `SaveSalesOrderItemsInformation`(
	IN _productId int,
    IN _salesOrderBasicInformationId int,
	IN _quantity int,
	IN _userId int
)
BEGIN
	INSERT INTO 
		salesorderitemsinformation
			(
            ProductId, 
			SalesOrderBasicInformationId, 
			Quantity, 
			CreatedBy, 
			CreatedOn
            )
	VALUES
			(
            _productId,
            _salesOrderBasicInformationId,
			_quantity,
			_userId,
			NOW()
            );
            
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SaveSerialNumberHistory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `SaveSerialNumberHistory`(
	IN _serialNumberId int,
	IN _actionTypeId int,
	IN _locationId int,
	IN _stockInOutOrderNumber int,
	in _buyerSellerId int,
	IN _userId int
)
BEGIN       
	DECLARE invoiceSalesOrderNo varchar(32);
	IF( _actionTypeId = 1 OR _actionTypeId = 8 OR _actionTypeId = 9 OR _actionTypeId = 10 ) 
	THEN
		SET invoiceSalesOrderNo = (
				SELECT 
					InvoiceNumber 
				FROM 
					stockinwardbasicinformation 
				WHERE 
					Id = _stockInOutOrderNumber) ;
	ELSE 
		SET invoiceSalesOrderNo = (
				SELECT 
					SalesOrderNumber 
				FROM 
					salesorderbasicinformation
				WHERE 
					Id = _stockInOutOrderNumber) ;
	END IF;

	INSERT INTO  
		productserialnumberhistory(
			ProductSerialNumberId, 
			ActionTypeId, 
			ActionDate, 
			WarehouseId, 
			StockInOutOrderNumber, 
			BuyerSellerId,
			CreatedBy, 
			CreatedOn)
	VALUES (
		_serialNumberId,
		_actionTypeId,
		NOW(),
		_locationId,
		invoiceSalesOrderNo,
		_buyerSellerId,
		_userId,
		NOW());
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SaveUser` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `SaveUser`(
	IN _name varchar(64),
	IN _email varchar(64),
	IN _mobile varchar(64),
	IN _status int,
	IN _departmentId INT,
	IN _warehouseId INT
)
BEGIN
	DECLARE id int;
	INSERT INTO 
		`user`(
			`Name`,
			Mobile,
			Email,
			`Status`,
			WareHouseId,
			UserRoleId ,
			IsDeleted,
			CreatedOn,
			CreatedBy)
	VALUES(
		_name,
		_mobile,
		_email,
		_status,
		_warehouseId,
		_departmentId,
		0,
		NOW(),
		1);

	SELECT 
		LAST_INSERT_ID() 
	INTO 
		id;
	Call 
		SaveUserPassword(_name, _mobile, id);

	SELECT 
		id Id,
		_name UserName,
		_mobile `Password`;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SaveUserDetail` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `SaveUserDetail`(
	IN _name varchar(64),
    IN _roleId int,
    IN _warehouseId int,
    IN _email varchar(64),
    IN _mobile varchar(64),
    IN _status int,
    IN _userId int
)
BEGIN
	INSERT INTO `greenplanet`.`userprofile`
		(
		`Name`,
		`Mobile`,
		`WarehouseId`,
        `RoleId`,
		`IsDeleted`,
		`CreatedBy`,
		`CreatedOn`
        )
	VALUES
		(
		_name,
		_mobile,
		_warehouseId,
        _roleId,
		_status,
		_userId,
		now()
        );
        
	SELECT 1 IsSuccess;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SaveUserPassword` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `SaveUserPassword`(
	INOUT _name VARCHAR(64),
	INOUT _mobile VARCHAR(64),
	INOUT _id int
)
BEGIN
	DECLARE `password` varchar(15);
	DECLARE username varchar(15);
	
	SELECT 
		CONCAT(substring(_name,1,4),substring(_mobile,1,4))
		`Username` 
	INTO
	 	username;
	
	SELECT 
		CONCAT(substring(_name,1,4),"@",substring(_mobile,1,4))
		`Password` 
	INTO
	 	`password`;
	
	INSERT INTO 
		logindetail(
			UserName,
			`Password`,
			IsActive,
			CreatedBy,
			CreatedOn , 
			userId
		)
	VALUES(
			username, 
			MD5(`password`), 
			1, 
			1, 
			Now() , 
			_id);

	SET 
		_name = username;
	SET 
		_mobile = password;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SaveUsersDetail` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `SaveUsersDetail`(
IN _name VARCHAR(64),
IN _email VARCHAR(64),
IN _mobile VARCHAR(64),
IN _status BIT,
IN _departmentId INT,
IN _wareHouseId INT,
IN _username varchar(64),
IN _password varchar(64))
BEGIN
INSERT INTO userprofile
(Name,Mobile,Email,Status,WareHouseId,RoleId,IsDeleted,CreatedOn,CreatedBy,UserNameId)
VALUES
(_name,_mobile,_email,_status,_wareHouseId,_departmentId,0,NOW(),1,last_insert_id()+1);
INSERT INTO loginprofile
(UserName,Password,IsActive,CreatedOn,CreatedBy)
VALUES
(_username,_password,1,Now(),1);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ScanAllInfoNormalSalesOrder` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `ScanAllInfoNormalSalesOrder`(
IN _id int
)
BEGIN
	SELECT 
		sob.Id,
		sob.SalesOrderNumber,
		sob.DateofSale,
		vp.CompanyName,
		mt.MovementType,
		wp.LocationName,
		wp.Id LocationId,
		sob.OutTypeId
	FROM
		salesorderbasicinformation sob
	LEFT JOIN
		movementtype mt
	ON
		sob.MovementTypeId = mt.Id
	LEFT JOIN
		vendor vp
	ON
		sob.VendorId = vp.Id
	INNER JOIN
		warehouse wp
	ON
		sob.WarehouseId = wp.Id
	WHERE
		sob.Id = _id;
	
	SELECT
		soi.Id,
		p.ProductSKU ItemSKU, 
		m.Name Manufacturer, 
		c.Name Category, 
		p.Name `Name`, 
		soi.Quantity
	FROM
		salesorderbasicinformation sob
	INNER JOIN 
		salesorderitemsinformation soi
	ON 
		soi.SalesOrderBasicInformationId = sob.Id
	INNER JOIN 
		product p
	ON 
		p.Id = soi.ProductId
	LEFT JOIN 
		manufacturer m
	ON 
		m.Id = p.ManufacturerId
	LEFT JOIN 
		category c
	ON 
		c.Id = p.CategoryId
	WHERE 
		soi.IsDeleted = 0 
	AND
		sob.Id = _id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ScanAllInfoSalesOrder` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `ScanAllInfoSalesOrder`(
IN _id int
)
BEGIN
	SELECT 
		sob.Id,
		sob.SalesOrderNumber,
		sob.DateofSale,
		v.CompanyName,
		mt.MovementType,
		w.LocationName,
		w.Id LocationId,
		sob.OutTypeId
	FROM
		salesorderbasicinformation sob
	LEFT JOIN
		movementtype mt
	ON
		sob.MovementTypeId = mt.Id
	LEFT JOIN
		vendor v
	ON
		sob.VendorId = v.Id
	INNER JOIN
		warehouse w
	ON
		sob.WarehouseId = w.Id
	WHERE
		sob.Id = _id;
		
	SELECT
		soi.Id,
		p.ProductSKU ItemSku, 
		m.Name Manufacturer, 
		c.Name Category, 
		p.Name `Name`, 
		ps.SerialNumber
	FROM
		salesorderitemsinformation soi
	INNER JOIN 
		product p
	ON 
		p.Id = soi.ProductId
	LEFT JOIN	
		manufacturer m
	ON 
		m.Id = p.ManufacturerId
	LEFT JOIN 
		category c
	ON 
		c.Id = p.CategoryId
	INNER JOIN 
		salesorderbasicinformation sb
	ON 
		soi.SalesOrderBasicInformationId = sb.Id
	INNER JOIN
		saleorderdispatchserialnumber sdn
	ON 
		sdn.SalesOrderItemInformationId = soi.Id
	INNER JOIN
		productserialnumber ps
	ON
		sdn.ProductSerialNumberId = ps.Id
	WHERE 
		soi.IsDeleted=0 
	AND
		sb.Id=_id
	ORDER BY sdn.Id DESC;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ScanAllSerialNumbersSalesOrderScannedUnscanned` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `ScanAllSerialNumbersSalesOrderScannedUnscanned`(
IN _id int
)
BEGIN
	SELECT
		ps.Id,
		ps.SerialNumber
	FROM
		saleorderdispatchserialnumber sod
	INNER JOIN
		salesorderitemsinformation soi
	ON
		sod.SalesOrderItemInformationId = soi.Id
	INNER JOIN
		salesorderbasicinformation sob
	ON
		soi.SalesOrderBasicInformationId = sob.Id
	INNER JOIN
		productserialnumber ps
	ON
		sod.ProductSerialNumberId = ps.Id
	WHERE
		sob.Id = _id
	AND 
		sod.IsDispatched = 1;

    SELECT
		ps.Id,
		ps.SerialNumber
	FROM
		saleorderdispatchserialnumber sod
	INNER JOIN
		salesorderitemsinformation soi
	ON
		sod.SalesOrderItemInformationId = soi.Id
	INNER JOIN
		salesorderbasicinformation sob
	ON
		soi.SalesOrderBasicInformationId = sob.Id
	INNER JOIN
		productserialnumber ps
	ON
		sod.ProductSerialNumberId = ps.Id
	WHERE
		sob.Id=_id and sod.IsDispatched = 0;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ScanAllStockInwards` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `ScanAllStockInwards`(
IN _id int
)
BEGIN
SELECT
    pp.ProductSKU,
	c.Name AS Category,
    m.Name AS Manufacturer,
    pp.Name AS ProductName,
    psp.Quantity,
    psp.Price
FROM
	productskuprofile psp
INNER JOIN
	productsprofile pp
ON 
	psp.ProductSkuId=pp.Id
LEFT JOIN 
	category c
ON
	pp.CategoryId=c.Id
LEFT JOIN
	manufacturer m
ON 
	pp.ManufacturerId=m.Id
WHERE 
	psp.InvoiceNoId=_id 
;    
SELECT
	ip.Id,
	ip.InvoiceNo,
	ip.PurchaseOrderNo,
	ip.DateOfPurchase,
	vp.CompanyName,
	mt.MovementType
FROM 
	invoiceprofile ip
INNER JOIN
	vendorprofile vp
ON
	ip.VendorCompanyNameId=vp.Id
INNER JOIN 
	movementtype mt
ON 
	ip.MoveTypeId=mt.Id
WHERE 
	ip.Id=_id;
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ScanAllStockInwardsInfo` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `ScanAllStockInwardsInfo`(
IN _id int
)
BEGIN
	SELECT
		si.Id,
		p.ProductSKU,
		c.Name Category,
		m.Name Manufacturer,
		p.Name ProductName,
		si.Quantity,
		si.Price
	FROM
		stockinwarditeminformation si
	INNER JOIN
		product p
	ON 
		si.ProductId = p.Id
	LEFT JOIN 
		category c
	ON
		p.CategoryId = c.Id
	LEFT JOIN
		manufacturer m
	ON 
		p.ManufacturerId = m.Id
	WHERE 
		si.StockInwardBasicInformationId = _id;
		     
	SELECT
		sib.Id,
		sib.InvoiceNumber,
		sib.PurchaseOrderNumber,
		sib.DateOfPurchase,
		v.CompanyName,
		mt.MovementType
	FROM 
		stockinwardbasicinformation sib
	INNER JOIN
		vendor v
	ON
		sib.VendorId = v.Id
	INNER JOIN 
		movementtype mt
	ON 
		sib.MoveTypeId = mt.Id
	WHERE 
		sib.Id = _id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ScanAllStockInwardsSerialNumbers` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `ScanAllStockInwardsSerialNumbers`(
	IN _id int
	)
BEGIN
	SELECT 
		ps.Id,
		ps.SerialNumber
	FROM
		productserialnumber ps
	INNER JOIN
		stockinwarditeminformation sii
	ON
		ps.StockInwardItemInformationId = sii.Id
	INNER JOIN	
		stockinwardbasicinformation sib
	ON
		sii.StockInwardBasicInformationId = sib.Id
	WHERE
		sib.Id=_id
	AND
		ps.IsScanned=1;

	SELECT 
		ps.Id,
		ps.SerialNumber
	FROM
		productserialnumber ps
	INNER JOIN
		stockinwarditeminformation sii
	ON
		ps.StockInwardItemInformationId = sii.Id
	INNER JOIN	
		stockinwardbasicinformation sib
	ON
		sii.StockInwardBasicInformationId = sib.Id
	WHERE
		sib.Id=_id
	AND
		ps.IsScanned=0;	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ScanDirectOutwardMobile` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `ScanDirectOutwardMobile`(
	IN _serialNumber varchar(16),
	IN _salesOrderId int,
	IN _userId int
	)
BEGIN
	DECLARE serialNumberId int;
	DECLARE productId int;
	DECLARE salesOrderItemId int;
	DECLARE customerId int;
	
	SELECT 
		VendorId
	INTO 
		customerId
	FROM 
		salesorderbasicinformation
	WHERE 
		Id = _salesOrderId;
		
	SELECT 
		ps.Id,
		si.ProductId
	INTO
		serialNumberId,
		productId
	FROM 
		productserialnumber ps 
	INNER JOIN
		stockinwarditeminformation si
	ON
		ps.StockInwardItemInformationId = si.Id 
	WHERE 
		ps.SerialNumber = _serialNumber
	AND
		ps.IsDamage=0
	AND
		ps.IsScanned = 1;
		
	IF(serialNumberId IS NOT NULL AND serialNumberId <> 0)
	THEN 
		IF(SELECT count(1) FROM saleorderdispatchserialnumber sod WHERE sod.ProductSerialNumberId = serialNumberId AND sod.IsDeleted = 0)>0 
		THEN 
			SELECT 
				0 IsSuccess, 
				'Serial Number is already added in sales order.' Message;
		ELSE 
			SET salesOrderItemId = (
				SELECT Id 
				FROM salesorderitemsinformation  
				WHERE SalesOrderBasicInformationId = _salesOrderId 
				AND ProductId = productId);

			IF(salesOrderItemId IS NULL)
			THEN
				INSERT INTO
					salesorderitemsinformation
					(ProductSKU, 
					SaleOrderId,
					Quantity,
					IsDeleted,
					CreatedBy,
					CreatedOn)
				VALUES(
					productId, 
					_salesOrderId, 
					0, 
					0, 
					_userId, 
					NOW());
			
				SET salesOrderItemId = last_insert_id(); 
			END IF;
			
			UPDATE 
				salesorderitemsinformation
			SET 
				Quantity = Quantity + 1,
				ModifiedBy = _userId,
				ModifiedOn = NOW()
			WHERE 
				Id = salesOrderItemId;
			
			INSERT INTO
				saleorderdispatchserialnumber(
				SalesOrderItemInformationId, 
				ProductSerialNumberId, 
				IsDispatced, 
				IsDeleted, 
				DispatchDate, 
				CreatedOn, 
				CreatedBy)
			VALUES(
				salesOrderItemId,
				serialNumberId,
				1,
				0,
				NOW(),
				NOW(),
				_userId);	

			SELECT 
				WarehouseId 
			INTO 
				@locationId 
			FROM 
				salesorderbasicinformation 
			WHERE 
				Id = _salesOrderId;

			CALL SaveSerialNumberHistory(serialNumberId, 3, @locationId, _salesOrderId,customerId, _userId);

			SELECT 
				1 IsSuccess, 
				'Serial Number added in sales order.' Message;
		END IF;
	ELSE
		SELECT 
			0 IsSuccess, 
			'Serial Number does not exists / Serial number is already damaged.' Message;
	END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SerialNumberUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `SerialNumberUpdate`(
	IN _serialNumber varchar(16),
	IN _userId int
)
BEGIN
	DECLARE movementTypeId int;
	DECLARE actionType int;
	DECLARE invoiceNo int;
	DECLARE locationId int;
	DECLARE buyerSellerId int;
	DECLARE serialNumberId int DEFAULT(
		SELECT Id 
		FROM productserialnumber 
		WHERE SerialNumber = _serialNumber 
		AND IsDamage = 0); 

	SELECT 
		sib.Id,
		sib.WarehouseId,
		sib.MoveTypeId,
		sib.VendorId
	INTO 
		invoiceNo,
		locationId,
		movementTypeId,
		buyerSellerId 
	FROM
		productserialnumber ps
	INNER JOIN
		stockinwarditeminformation sii ON ps.StockInwardItemInformationId = sii.Id
	INNER JOIN
		stockinwardbasicinformation sib ON sib.Id = sii.StockInwardBasicInformationId
	WHERE
		ps.SerialNumber = _serialNumber;
		
	IF (movementTypeId = 2)
	THEN
		UPDATE `productserialnumber`
		SET
			`IsScanned` = 1,
			ScanDate = NOW(),
			IsDamage = 1,
			DamageDate= NOW(),
			ModifiedOn = NOW(),
			ModifiedBy = _userId
		WHERE
			`SerialNumber` = _serialNumber;
	ELSE
		UPDATE `productserialnumber`
		SET 
			`IsScanned` = 1,
			ScanDate = NOW(),
			ModifiedOn = NOW(),
			ModifiedBy = _userId
		WHERE
			`SerialNumber` = _serialNumber;
	END IF;

	IF(movementTypeId = 1)
	THEN
		SET actionType = 1;
	ELSEIF(movementTypeId = 2)
	THEN
		SET actionType = 9;
	ELSE
		SET actionType = 8;
	END IF;
	
	CALL SaveSerialNumberHistory(serialNumberId, actionType, locationId, invoiceNo,buyerSellerId, _userId);
	SELECT 
		1 IsSuccess,
        'Serial number is Scanned.' Message;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SerialsNumbers` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `SerialsNumbers`(
	IN _productSkuId int
)
BEGIN
	SELECT 
		Id, 
		SerialNumber 
	FROM 
		productserialnumber
	WHERE 
		StockInwardItemInformationId = _productSkuId 
	AND 
		IsScanned = 1;

	SELECT 
		Id , 
		SerialNumber 
	FROM 
		productserialnumber
	WHERE 
		StockInwardItemInformationId = _productSkuId 
	AND 
		IsScanned = 0;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_AddListSalesOrderItemInformation` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `sp_AddListSalesOrderItemInformation`(
IN _userId int,
IN _data json
)
BEGIN
    
	INSERT INTO salesorderitemsinformation
			(SalesOrderBasicInformationId,ProductId,Quantity,IsDeleted,CreatedBy,CreatedOn)
	SELECT
        tbl.SalesOrderBasicInformationId ,
		tbl.ProductId,
		tbl.Quantity,
        0,
		_userId,
		NOW()
	FROM 
		JSON_TABLE(_data,'$[*]' COLUMNS(
            SalesOrderBasicInformationId int PATH "$.SalesOrderBasicInformationId",
			ProductId int PATH "$.ProductId",
			Quantity int PATH "$.Quantity"
		)) AS tbl;
        	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_AddNewSalesOrder` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `sp_AddNewSalesOrder`(
IN _SalesOrderId INT,
IN _SerialNumber VARCHAR(16),
IN _UserId INT
)
BEGIN
INSERT INTO saleorderdispatchserialnumber(SalesOrderItemInformationId, ProductSerialNumberId, IsDispatched, DispatchDate, CreatedOn, CreatedBy)
SELECT 
	soi.Id as SalesOrderItemInformationId
    , sp.Id as ProductSerialNumberId
    ,1 as IsDispatched
    ,now() as DispatchDate
    ,now() as CreatedOn
    ,_userId as CreatedBy
FROM
	product p
INNER JOIN
	stockinwarditeminformation iii
on 
	iii.ProductId=p.Id
INNER JOIN
	productserialnumber ps
on 
	ps.StockInwardItemInformationId=iii.Id
inner join
	saleorderdispatchserialnumber sds
on
	sds.ProductSerialNumberId=ps.Id
inner join
	salesorderitemsinformation soi
on
	sds.SalesOrderItemInformationId=soi.Id
inner join
	salesorderbasicinformation sob
on
	soi.SalesOrderBasicInformationId=sob.Id
where 
	ps.SerialNumber=_SerialNumber and sob.Id=_SalesOrderId
;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_AddProduct` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `sp_AddProduct`(
IN _ProductSKU VARCHAR(64),
IN _Name varchar(64),
IN _CategoryId int,
IN _ManufacturerId int,
IN _EanCode varchar(64),
IN _Price int,
IN _IsActive int ,
IN _UserId int
)
BEGIN
	INSERT INTO product
		(ProductSKU, Name ,CategoryId, ManufacturerId, EANCode, Price, IsActive,CreatedOn,CreatedBy) 
	Values
		(_ProductSKU, _Name, _CategoryId, _ManufacturerId, _EanCode, _Price, _IsActive, curdate(), _UserId);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_AddProductInInvoice` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `sp_AddProductInInvoice`(
IN _UserId INT,
IN _Data JSON
)
BEGIN
	INSERT INTO stockinwarditeminformation
	(StockInwardBasicInformationId, ProductId, Quantity, Price, BarcodeGenerated, CreatedBy, CreatedOn)
	SELECT 
		tbl.StockInwardBasicInformationId,
		tbl.ProductId,
		tbl.Quantity,
        tbl.Price,
		0,
		_UserId,
		NOW()
	FROM 
		JSON_TABLE(_Data,'$[*]' COLUMNS(
			StockInwardBasicInformationId int PATH "$.InvoiceNoId",
			ProductId int PATH "$.ProductSkuId",
			Quantity int PATH "$.Quantity",
            Price decimal(10,2) PATH "$.Price"
		)) AS tbl;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_AddStockInwardBasicInformation` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `sp_AddStockInwardBasicInformation`(
IN _InvoiceNumber VARCHAR(32),
IN _PurchaseOrderNumber VARCHAR(32),
IN _DateOfPurchase DATETIME,
IN _VendorId INT,
IN _MoveTypeId INT,
IN _WarehouseId INT,
IN _ItemTypeId INT
)
BEGIN
INSERT INTO stockinwardbasicinformation 
(InvoiceNumber, PurchaseOrderNumber, DateOfPurchase, VendorId, MoveTypeId, WarehouseId, ItemTypeId, Status)
VALUES (_InvoiceNumber, _PurchaseOrderNumber, _DateOfPurchase, _VendorId, _MoveTypeId, _WarehouseId, _ItemTypeId);
select last_insert_id() id, 'Invoice Added Successfully' Message, 1 IsSuccess;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_AddVendor` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `sp_AddVendor`(
	IN _CompanyName VARCHAR(64),
	IN _CompanyTypeId INT,
	IN _VendorTypeId INT,
	IN _Location VARCHAR(64),
	IN _GST VARCHAR(16),
	IN _IsActive INT,
	IN _Address VARCHAR(256),
	IN _ContactName VARCHAR(64),
	IN _ContactMobile VARCHAR(16),
	IN _ContactEmail VARCHAR(64),
	IN _UserId INT
)
BEGIN
INSERT INTO vendor
	(
		CompanyName, 
		ContactName, 
		ContactMobile, 
		ContactEmail, 
		CompanyTypeId, 
		VendorId, 
		LocationId ,
		Address, 
		GST, 
		IsActive, 
		CreatedOn, 
		CreatedBy
    )
VALUES
	(
		_CompanyName,
		_ContactName,
		_ContactMobile,
		_ContactEmail,
		_CompanyTypeId,
		_CendorTypeId,
		_Location,
		_Address,
		_GST,
		_IsActive,
		NOW(),
		_UserId
    )
;
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_CheckBarcodeExists` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `sp_CheckBarcodeExists`(
IN _ProductSKUProfileId INT
)
BEGIN
SELECT
	BarcodeGenerated,Quantity
FROM 
	stockinwarditeminformation
WHERE
	Id=_ProductSKUProfileId;
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `StartStockAuditInitiation` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `StartStockAuditInitiation`(
	IN _warehouseId int,
	IN _auditInitiatedOn datetime,
	IN _userId int
)
BEGIN
	DECLARE auditId int DEFAULT 0;

	IF(SELECT count(1) 
		FROM stockauditinitiation 
		WHERE WarehouseId = _warehouseId 
		AND IsAuditDone = 0)
	THEN
		SELECT 
			0 IsSuccess, 
			'Stock Audit already in progress' Message;
	ELSE 
		INSERT INTO 
			stockauditinitiation(
				WarehouseId,
				AuditInitiatedOn, 
				IsAuditPassed, 
				IsAuditDone, 
				CreatedOn, 
				CreatedBy)
		VALUES(
				_warehouseId, 
				_auditInitiatedOn, 
				0, 
				0, 
				NOW(), 
				_userId);
		
		SET auditId = LAST_INSERT_ID(); 
		
		INSERT INTO 
			stockaudititem(
				StockAuditInitiationId,
				CategoryId,
				ProductId,
				ProductSerialNumberId,
				IsAuditDone,
				CreatedOn,
				CreatedBy)
		SELECT 
			auditId,
			p2.CategoryId,
			p2.Id ProdId,
			ps.Id,
			0,
			NOW(),
			_userId
		FROM 
			productserialnumber ps 
		INNER JOIN
			stockinwarditeminformation sii 
		ON
			ps.StockInwardItemInformationId = sii.Id 
		INNER JOIN 
			stockinwardbasicinformation sib
		ON
			sii.InvoiceNumber = sib.Id 
		INNER JOIN 
			product p
		ON
			sii.ProductId = p.Id 
		WHERE 
			ps.IsScanned = 1
		AND
			sib.WarehouseId = _warehouseId
		AND
			CheckForSalesOrderedOrNot(ps.Id);
	
		SELECT 
			1 IsSuccess, 
			'Stock Audit started successfully' Message;
	END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `StockAuditCategoryDropdown` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `StockAuditCategoryDropdown`()
BEGIN
	SELECT 
		Id `Key`, 
		`Name` `Value` 
	FROM 
		category;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `StockInwardExcelImport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `StockInwardExcelImport`(
    IN _data json,
    IN _stockInwardBasicInformationId int,
    IN _userId int
)
BEGIN
    DECLARE totalCount int DEFAULT 0;
   	DECLARE iteration int DEFAULT 0;
    DECLARE itemNumber varchar(64) DEFAULT '';
    DECLARE serialNumber varchar(64) DEFAULT '';
    DECLARE price decimal(10, 2) DEFAULT 0;
   	declare productId int default 0;
   	declare productProfileTableId int default 0;
   
    DROP TEMPORARY TABLE IF EXISTS tmp_tbl;
    CREATE TEMPORARY TABLE IF NOT EXISTS tmp_tbl
    (
        Id int PRIMARY KEY AUTO_INCREMENT,
        ItemNumber varchar(64),
        SerialNumber varchar(64),
        Price decimal(10, 2),
        Errors varchar(1024)
    );
   
   	INSERT INTO tmp_tbl(
   		ItemNumber,
        SerialNumber,
        Price)
    SELECT
        tbl.ItemNumber,
        tbl.SerialNumber,
        tbl.Price
    FROM
        JSON_TABLE(
            _data,
            "$[*]" COLUMNS
            (
                ItemNumber varchar(64) PATH "$.ItemNumber",
                SerialNumber varchar(64) PATH "$.SerialNumber",
                Price decimal(10, 2) PATH "$.Price"
            )
        ) AS tbl;
       
    SET totalCount = (SELECT count(1) FROM tmp_tbl);
   	SET iteration = 1;
   	
   	WHILE iteration <= totalCount DO
   		SELECT 
   			tbl.ItemNumber,
   			tbl.SerialNumber,
   			tbl.Price
   		INTO
   			itemNumber,
   			serialNumber,
   			price
   		FROM 
   			tmp_tbl tbl
   		WHERE 
   			Id = iteration;
   		
   		-- check serial number exists in database or not 
   		IF (SELECT COUNT(1) FROM productserialnumber s WHERE s.SerialNumber = serialNumber) 
		THEN
   			UPDATE 
   				tmp_tbl
   			SET 
   				Errors = 'Duplicate serial number'
   			WHERE 
   				Id = iteration;
		ELSE 
			SET productId = (SELECT Id FROM product p WHERE ProductSKU = itemNumber);
			-- check if product exists
			IF(productId IS NULL)
			THEN
				INSERT INTO product
				(ProductSKU, IsDeleted, IsActive, CreatedOn, CreatedBy)
				VALUES (itemNumber, 0, 1, NOW(), _userId);

				SET productId = last_insert_id(); 
			END IF;
		
			-- check for invoice and product sku exists in table or not 
			SET productProfileTableId = (SELECT Id FROM stockinwarditeminformation p WHERE p.StockInwardBasicInformationId = _stockInwardBasicInformationId and p.ProductId = productId and p.Price = price);
			
			IF(productProfileTableId IS NULL)
			THEN
				INSERT INTO stockinwarditeminformation
				(StockInwardBasicInformationId, ProductId, Quantity, Price, BarcodeGenerated, Printed, IsScanCompleted, CreatedOn, CreatedBy)
				VALUES(_stockInwardBasicInformationId, productId, 1, price, 1, 0, 0, NOW(), _userId);
			
				SET productProfileTableId = last_insert_id(); 
			ELSE
				UPDATE 
					stockinwarditeminformation
				SET 
					Quantity = Quantity + 1
				WHERE 
					Id = productProfileTableId;
			END IF;
		
			INSERT INTO productserialnumber
			(StockInwardItemInformationId, SerialNumber, IsScanned, CreatedOn, CreatedBy,ScanDate )
			VALUES(productProfileTableId, serialNumber, 0, NOW(), _userId, NOW());
		
		end if;
   		SET itemNumber = '';
   		SET serialNumber = '';
   		SET price = 0;
   		SET productId = 0;
   		SET productProfileTableId = 0;
	    SET iteration = iteration + 1;
	  END 
	while;
   
    SELECT tbl.ItemNumber, tbl.SerialNumber, tbl.Price, tbl.Errors FROM tmp_tbl tbl WHERE Errors <> '';
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `TallyByDateRange` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`backup`@`%` PROCEDURE `TallyByDateRange`(
    IN _startDate date,
    IN _endDate date,
    IN _productId int,
    IN _warehouseId int
)
BEGIN
	DECLARE tempStartDate date DEFAULT _startDate;
	DECLARE productSku varchar(128) DEFAULT "";

	SELECT ProductSKU
	INTO productSku 
	FROM product
	WHERE Id = _productId;

	DROP TEMPORARY TABLE IF EXISTS tmp_tbl_tally;
	CREATE TEMPORARY TABLE tmp_tbl_tally (
		`Date` date,
		Particulars varchar(128),
		voucherType varchar(64),
		VoucherNumber varchar(64),
		InwardsQuantity int,
		OutwardsQuantity int,
		ProductSku varchar(128)
	);

	INSERT INTO 
		tmp_tbl_tally(
			`Date`,
			Particulars,
			InwardsQuantity,
			ProductSKU)
	SELECT 
		_startDate `Date`,
		'OPENING BALANCE' Particulars,
		COUNT(1) ClosingQty,
		productSku
	FROM
		stockinwardbasicinformation sib 
	INNER JOIN
		stockinwarditeminformation sii 
	ON
		sib.Id = sii.StockInwardBasicInformationId 
	INNER JOIN
		product p 
	ON
		sii.ProductId = p.Id 
	INNER JOIN 
		productserialnumber ps 
	ON
		sii.Id = ps.StockInwardItemInformationId 
	LEFT JOIN 
		(
		SELECT
			ProductSerialNumberId 
		FROM 
			saleorderdispatchserialnumber  
		WHERE 
			IsDeleted = 0 
		AND 
			DATE(DispatchDate) < _startDate
		) sdn 
	ON
		sdn.ProductSerialNumberId = ps.Id
	WHERE 
		sib.WarehouseId = _warehouseId
	AND
		p.Id = _productId
	AND
		ps.IsScanned = 1
	AND
		DATE(ps.ScanDate) < _startDate
	AND
		sdn.ProductSerialNumberId IS NULL;

	WHILE tempStartDate <= _endDate 
	DO 
		INSERT INTO 
			tmp_tbl_tally(
				VoucherNumber,
				Date,
				Particulars, 
				InwardsQuantity, 
				VoucherType,
				ProductSku)
		SELECT 
			sib.InvoiceNumber VoucherNumber,
			tempStartDate Date,
			v.CompanyName Particulars,
			COUNT(ps.Id) InwardsQuantity,
			'Purchase' VoucherType,
			productSku
		FROM 
			productserialnumber ps
		INNER JOIN
			stockinwarditeminformation sii
		ON
			ps.StockInwardItemInformationId = sii.Id 
		INNER JOIN 
			stockinwardbasicinformation sib
		ON
			sii.StockInwardBasicInformationId = sib.Id 
		INNER JOIN 
			vendor v 
		ON
			v.Id = sib.vendorId 
		WHERE 
			DATE(ps.ScanDate) = tempStartDate
		AND
			sii.ProductId = _productId
		GROUP BY sib.Id;

		INSERT INTO 
			tmp_tbl_tally(
				VoucherNumber,
				`Date`,
				Particulars,
				OutwardsQuantity,
				VoucherType,
				ProductSku)
		SELECT 
			sob.SalesOrderNumber VoucherNumber,
			tempStartDate Date,
			v.CompanyName Particulars,
			COUNT(sdn.Id) OutwardsQuantity,
			'Sale' VoucherType,
			productSku
		FROM 
			saleorderdispatchserialnumber sdn 
		INNER JOIN
			salesorderitemsinformation soi
		ON
			sdn.SalesOrderItemInformationId = soi.Id
		INNER JOIN 
			salesorderbasicinformation sob
		ON
			soi.SalesOrderBasicInformationId = sob.Id 
		INNER JOIN
			vendor v 
		ON
			sob.VendorId = v.Id
		WHERE 
			sdn.IsDispatched = 1 
		AND
			soi.ProductId = _productId
		AND 
			DATE(DispatchDate) = tempStartDate
		GROUP BY sob.Id;

		INSERT INTO 
			tmp_tbl_tally(
				VoucherNumber,
				`Date`,
				Particulars, 
				InwardsQuantity, 
				VoucherType, 
				ProductSku)
		SELECT 
			sob.SalesOrderNumber VoucherNumber,
			tempStartDate `Date`,
			v.CompanyName Particulars,
			COUNT(sdn.Id) InwardsQuantity,
			'Return' VoucherType,
			productSku
		FROM 
			saleorderdispatchserialnumber sdn 
		INNER JOIN
			salesorderitemsinformation soi
		ON
			sdn.SalesOrderItemInformationId = soi.Id
		INNER JOIN 
			salesorderbasicinformation sob
		ON
			soi.SalesOrderBasicInformationId = sob.Id 
		INNER JOIN
			vendor v 
		ON
			sob.VendorId = v.Id
		WHERE 
			IsReturn = 1 
		AND
			soi.ProductId = _productId
		AND 
			DATE(ReturnDate) = tempStartDate
		GROUP BY sob.Id;

		INSERT INTO 
			tmp_tbl_tally(
				VoucherNumber,
				`Date`,
				Particulars, 
				InwardsQuantity, 
				VoucherType, 
				ProductSku)
		SELECT 
			sob.SalesOrderNumber VoucherNumber,
			tempStartDate Date,
			v.CompanyName Particulars,
			COUNT(sdn.Id) InwardsQuantity,
			'Damage' VoucherType,
			productSku
		FROM 
			saleorderdispatchserialnumber sdn 
		INNER JOIN
			salesorderitemsinformation soi
		ON
			sdn.SalesOrderItemInformationId = soi.Id
		INNER JOIN 
			salesorderbasicinformation sob
		ON
			soi.SalesOrderBasicInformationId = sob.Id 
		INNER JOIN
			vendor v 
		ON
			sob.VendorId = v.Id
		WHERE 
			IsDamage = 1 
		AND
			soi.ProductId = _productId
		AND 
			DATE(DamageDate)= tempStartDate
		GROUP BY sob.Id;

		SET tempStartDate = tempStartDate + INTERVAL 1 DAY;
	END WHILE;
    
	SELECT 
		`Date`,
		Particulars,
		voucherType,
		VoucherNumber,
		InwardsQuantity,
		OutwardsQuantity,
		ProductSku 
	FROM 
		tmp_tbl_tally;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `TallyByDateRange3` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `TallyByDateRange3`(
    IN _startDate DATE,
    IN _endDate DATE,
    IN _productId INT
)
BEGIN
DECLARE varDate DATE DEFAULT _startDate;
DECLARE varInvoiceSaleNo VARCHAR(64) DEFAULT "";
DECLARE varType VARCHAR(64) DEFAULT "";
DECLARE varParti VARCHAR(128) DEFAULT "";
DECLARE varInQty INT DEFAULT 0;
DECLARE varOutQty INT DEFAULT 0;
DECLARE product_SKU VARCHAR(128) ;
SELECT ProductSKU INTO product_SKU FROM productsprofile
WHERE Id = _productId;
DROP TABLE IF EXISTS tmp_tbl_tally;
CREATE TABLE tmp_tbl_tally 
(
Id INT,
Date Date,
Particulars VARCHAR(128),
VchType VARCHAR(64),
VchNumber VARCHAR(64),
InQty INT,
OutQty INT,
ProductSKU VARCHAR(128)
);
WHILE varDate <=_endDate DO 
SELECT 
	DISTINCT(ip.InvoiceNo) VchNumber,
    vp.CompanyName Particulars,
    psp.Quantity InQty,
    'Purchase' VchType
INTO
	varInvoiceSaleNo,
	varParti,
	varInQty,
	varType
FROM
    invoiceprofile ip
        INNER JOIN
    productskuprofile psp ON psp.InvoiceNoId = ip.Id
		INNER JOIN
	warehouseprofile wp ON ip.WarehouseLocationId = wp.Id
        INNER JOIN
    serialnumberprofile sp ON psp.Id = sp.ProductSkuProfileId
        INNER JOIN
    vendorprofile vp ON ip.VendorCompanyNameId = vp.Id
WHERE
    DATE(sp.ScanDate) = varDate
        AND sp.IsScanned = 1
        AND psp.ProductSkuId = _productId
        LIMIT 1;
IF(!(ISNULL(varInvoiceSaleNo) AND ISNULL(varParti) AND ISNULL(varInQty)))
THEN
INSERT INTO tmp_tbl_tally(Id, VchNumber, Date, Particulars, InQty, VchType, ProductSKU)
SELECT 
	DISTINCT psp.Id Id,
    ip.InvoiceNo VchNumber,
    varDate,
    vp.CompanyName Particulars,
    psp.Quantity InQty,
    'Purchase' VchType,
    product_SKU
FROM
    invoiceprofile ip
        INNER JOIN
    productskuprofile psp ON psp.InvoiceNoId = ip.Id
		INNER JOIN
	warehouseprofile wp ON ip.WarehouseLocationId = wp.Id
        INNER JOIN
    serialnumberprofile sp ON psp.Id = sp.ProductSkuProfileId
        INNER JOIN
    vendorprofile vp ON ip.VendorCompanyNameId = vp.Id
WHERE
    DATE(sp.ScanDate) = varDate
        AND sp.IsScanned = 1
        AND psp.ProductSkuId = _productId;
END IF;
SET varParti = ""; 
SET varType = "";
SET varInvoiceSaleNo = "";
SELECT 
	DISTINCT(sob.SalesOrderNo) VchNumber,
    vp.CompanyName Particulars,
	soi.ItemQuantity OutQty,
	'Sale' VchType
INTO
varInvoiceSaleNo, varParti, varOutQty,varType
FROM
    salesorderbasicinformation sob
		INNER JOIN
	warehouseprofile wp ON sob.WarehouseId = wp.Id
        INNER JOIN
    salesorderitemsinformation soi ON sob.Id = soi.SaleOrderId
		INNER JOIN
    saleorderdispatchserialnumber sdn ON sdn.SaleOrderItemInformationId = soi.Id
        INNER JOIN
    vendorprofile vp ON vp.Id = sob.CustomerId
WHERE
    DATE(sdn.DispatchDate)=  varDate AND
    soi.ProductSKU = _productId
    AND sdn.IsDeleted = 0
	LIMIT 1;
IF(!(ISNULL(varInvoiceSaleNo) AND ISNULL(varParti) AND ISNULL(varOutQty)))THEN
		INSERT INTO tmp_tbl_tally(Id, VchNumber,Date,Particulars, OutQty, VchType, ProductSKU)
        SELECT 
	DISTINCT (soi.Id) Id,
	sob.SalesOrderNo VchNumber,
    varDate,
    vp.CompanyName Particulars,
	soi.ItemQuantity OutQty,
	'Sale' VchType,
    product_SKU
    FROM
    salesorderbasicinformation sob
		INNER JOIN
	warehouseprofile wp ON sob.WarehouseId = wp.Id
        INNER JOIN
    salesorderitemsinformation soi ON sob.Id = soi.SaleOrderId
		INNER JOIN
    saleorderdispatchserialnumber sdn ON sdn.SaleOrderItemInformationId = soi.Id
        INNER JOIN
    vendorprofile vp ON vp.Id = sob.CustomerId
WHERE
soi.ProductSKU = _productId 
AND DATE(sdn.DispatchDate)=  varDate
AND sdn.IsDeleted = 0
;
END IF;
SET varInvoiceSaleNo = "";
SET varParti = "";
SET varInQty = 0;
SET varType = "";
SET varOutQty = 0;
SELECT 
	DISTINCT(sob.SalesOrderNo) VchNumber,
    vp.CompanyName Particulars,
	soi.ItemQuantity OutQty,
	'Sale' VchType
INTO
varInvoiceSaleNo, varParti, varInQty,varType
FROM
    salesorderbasicinformation sob
		INNER JOIN
	warehouseprofile wp ON sob.WarehouseId = wp.Id
        INNER JOIN
    salesorderitemsinformation soi ON sob.Id = soi.SaleOrderId
		INNER JOIN
    saleorderdispatchserialnumber sdn ON sdn.SaleOrderItemInformationId = soi.Id
        INNER JOIN
    vendorprofile vp ON vp.Id = sob.CustomerId
WHERE
    DATE(sdn.ReturnDate)=  varDate AND
    soi.ProductSKU = _productId
    AND sdn.IsDeleted = 1
	LIMIT 1;
IF(!(ISNULL(varInvoiceSaleNo) AND ISNULL(varParti) AND ISNULL(varInQty)))THEN
		INSERT INTO tmp_tbl_tally(Id, VchNumber,Date,Particulars, InQty, VchType, ProductSKU)
        SELECT 
	DISTINCT (soi.Id) Id,
	sob.SalesOrderNo VchNumber,
    varDate,
    vp.CompanyName Particulars,
	soi.ItemQuantity OutQty,
	'Return' VchType,
    product_SKU
    FROM
    salesorderbasicinformation sob
		INNER JOIN
	warehouseprofile wp ON sob.WarehouseId = wp.Id
        INNER JOIN
    salesorderitemsinformation soi ON sob.Id = soi.SaleOrderId
		INNER JOIN
    saleorderdispatchserialnumber sdn ON sdn.SaleOrderItemInformationId = soi.Id
        INNER JOIN
    vendorprofile vp ON vp.Id = sob.CustomerId
WHERE
soi.ProductSKU = _productId 
AND DATE(sdn.ReturnDate)=  varDate
AND sdn.IsDeleted = 1 AND sdn.IsReturn=1;
END IF;
SET varDate =varDate + INTERVAL 1 DAY;
SET varInvoiceSaleNo = "";
SET varParti = "";
SET varInQty = 0;
SET varType = "";
SET varOutQty = 0;
END WHILE;
SELECT * FROM tmp_tbl_tally;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `testAddProductInInvoice` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `testAddProductInInvoice`(
IN _userId int,
IN _data json
)
BEGIN
	INSERT INTO productskuprofile
	(InvoiceNoId, ProductSkuId, Quantity, BarcodeGenerated, CreatedBy, CreatedOn)
	SELECT 
		tbl.InvoiceNoId,
		tbl.ProductSkuId,
		tbl.Quantity,
		0,
		_userId,
		NOW()
	FROM 
		JSON_TABLE(_data,'$[*]' COLUMNS(
			InvoiceNoId int PATH "$.InvoiceNoId",
			ProductSkuId int PATH "$.ProductSkuId",
			Quantity int PATH "$.Quantity"
		)) AS tbl;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `testGetStockInwardProductSkuFill` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `testGetStockInwardProductSkuFill`(
IN _id int
)
BEGIN
SELECT
    p.Id As Id,
	m.Name AS Manufacturer,
    c.Name AS Category,
    p.Name AS ProductName,
    AVG(psp.Price) Price
FROM 
	productsprofile p
INNER JOIN
	manufacturer m
ON
	p.ManufacturerId=m.Id
INNER JOIN
	category c
ON 
	p.CategoryId=c.Id
INNER JOIN
    productskuprofile psp
ON
	psp.ProductSkuId = p.Id
WHERE
	p.Id=_id
GROUP BY
        p.Id, m.`Name`, c.`Name`, p.`Name`;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UnscannedSerialNumbers` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `UnscannedSerialNumbers`(
    IN _productSkuProfileId int
    )
BEGIN
    SELECT 
        SerialNumber
    FROM 
        productserialnumber ps
    WHERE 
    	ps.StockInwardItemInformationId = _productSkuProfileId;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateCategory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `UpdateCategory`(
IN _id INT, 
IN _categorytype VARCHAR(32),
IN _userId INT
)
BEGIN
UPDATE categorytype
SET 
Categorytype=_categorytype,
ModifiedBy=_userId,
ModifiedOn=now()
WHERE Id=_id;
Select 1 IsSuccess, "Data Updated Successfully" Message ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateCategoryType` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `UpdateCategoryType`(
    IN _id int, 
    IN _categorytype varchar(32),
    IN _userId int
    )
BEGIN
    UPDATE 
        category
    SET 
        `Name`=_categorytype,
        ModifiedBy=_userId,
        ModifiedOn=NOW()
    WHERE 
        Id=_id;
    
    SELECT
        1 IsSuccess, 
        "Data Updated Successfully" Message ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateIsDamage` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `UpdateIsDamage`(
    IN _serialnumber varchar(16),
    IN _damageDate date,
    IN _userId int
)
BEGIN
    DECLARE id int;
    DECLARE serialId int;
    DECLARE serialNumberProfileId int;
    DECLARE dispatched int;
    DECLARE salesOrderId int;
    DECLARE locationId int;
    DECLARE customerId int;

    SELECT 
        Id
    INTO 
        serialNumberProfileId 
    FROM
        productserialnumber ps
    WHERE
        ps.SerialNumber = _serialNumber;

    SELECT 
        sob.VendorId
    INTO 
        customerId 
    FROM
        salesorderbasicinformation sob
    LEFT JOIN
        salesorderitemsinformation soi ON sob.Id = soi.SalesOrderBasicInformationId
    LEFT JOIN
        saleorderdispatchserialnumber sdn ON sdn.SalesOrderItemInformationId = soi.Id
    LEFT JOIN
        productserialnumber ps ON ps.Id = sdn.ProductSerialNumberId
    WHERE
        ps.Id = serialNumberProfileId
    ORDER BY 
        sdn.Id 
    DESC LIMIT 1;

    SELECT 
        sod.IsDispatched
    INTO 
        dispatched 
    FROM
        saleorderdispatchserialnumber sod
    INNER JOIN
        productserialnumber ps 
    ON 
        ps.Id = sod.ProductSerialNumberId
    WHERE
        ps.SerialNumber = _serialnumber
    ORDER BY sod.Id 
    DESC LIMIT 1;

    IF(serialNumberProfileId IS NOT NULL AND dispatched=1)
    THEN
        IF EXISTS( 
            SELECT 
                sodn.Id 
            FROM 
                saleorderdispatchserialnumber sodn
            INNER JOIN 
                productserialnumber ps 
            ON 
                sodn.ProductSerialNumberId = ps.Id
            WHERE 
                ps.SerialNumber = _serialnumber
            AND    
                sodn.IsDispatched = 1
            AND 
                sodn.IsDeleted = 0
            AND 
                sodn.IsReturn = 0
            AND 
                sodn.IsDamage = 0
            )
        THEN    
            SELECT 
                sodn.Id
            INTO
                id 
            FROM
                saleorderdispatchserialnumber sodn
            INNER JOIN 
                productserialnumber ps 
            ON
                sodn.ProductSerialNumberId = ps.Id
            WHERE 
                ps.SerialNumber = _serialnumber
            AND    
                sodn.IsDispatched = 1
            AND 
                sodn.IsDeleted = 0
            AND
                sodn.IsReturn = 0
            AND
                sodn.IsDamage = 0;

            UPDATE saleorderdispatchserialnumber 
            SET 
                IsDamage = 1,
                DamageDate = _damageDate,
                ModifiedBy = _userId,
                IsDeleted = 1,
                ModifiedOn = NOW()
            WHERE
                Id = id;

            UPDATE productserialnumber 
            SET 
                IsDamage = 1,
                DamageDate = _damageDate,
                ModifiedOn = NOW(),
                ModifiedBy = _userId
            WHERE
                Id = serialNumberProfileId;

            SELECT 
                sob.Id,
                sob.WarehouseId
            INTO 
                salesOrderId,
                locationId 
            FROM
                saleorderdispatchserialnumber sodn
            INNER JOIN
                productserialnumber ps 
            ON 
                ps.Id = sodn.ProductSerialNumberId
            INNER JOIN
                salesorderitemsinformation soi 
            ON 
                sodn.SalesOrderItemInformationId = soi.Id
            INNER JOIN
                salesorderbasicinformation sob 
            ON 
                sob.Id = soi.SalesOrderBasicInformationId
            WHERE
                sodn.ProductSerialNumberId = serialNumberProfileId; 
                        
            CALL SaveSerialNumberHistory(serialNumberProfileId, 7, locationId, salesOrderId,customerId, _userId);

            SELECT 
                1 IsSuccess, 
                'Updated Successfully' Message;
        ELSE
            IF EXISTS( 
                SELECT 
                    sodn.Id 
                FROM 
                    saleorderdispatchserialnumber sodn
                INNER JOIN 
                    productserialnumber ps 
                ON 
                    sodn.ProductSerialNumberId = ps.Id
                WHERE 
                    ps.SerialNumber = _serialnumber
                AND    
                    sodn.IsDispatched = 1
                AND
                    sodn.IsDeleted = 1
                AND
                    sodn.IsReturn = 1
                AND
                    sodn.IsDamage = 0
                ORDER BY sodn.Id DESC LIMIT 1       
                )
            THEN
                SELECT 
                    sodn Id
                INTO
                    id
                FROM
                    saleorderdispatchserialnumber sodn 
                INNER JOIN 
                    productserialnumber ps 
                ON
                    sodn.ProductSerialNumberId = ps.Id
                WHERE 
                    ps.SerialNumber = _serialnumber
                AND    
                    sodn.IsDispatched = 1
                AND
                    sodn.IsDeleted = 1
                AND
                    sodn.IsReturn = 1
                AND
                    sodn.IsDamage = 0
                ORDER BY sodn.Id 
                DESC LIMIT 1;
        
                UPDATE saleorderdispatchserialnumber 
                SET 
                    IsDamage = 1,
                    DamageDate = _damageDate,
                    ModifiedBy = _userId,
                    ModifiedOn = NOW()
                WHERE
                    Id = id;
                    
                UPDATE productserialnumber 
                SET 
                    IsDamage = 1,
                    DamageDate = _damageDate,
                    ModifiedOn = NOW(),
                    ModifiedBy = _userId
                WHERE
                    Id = serialNumberProfileId;
                    
                SELECT 
                    sob.Id, 
                    sob.WarehouseId
                INTO
                    salesOrderId,
                    locationId 
                FROM
                    saleorderdispatchserialnumber sodn
                INNER JOIN
                    productserialnumber ps ON ps.Id = sodn.ProductSerialNumberId
                INNER JOIN
                    salesorderitemsinformation soi ON sodn.SalesOrderItemInformationId = soi.Id
                INNER JOIN
                    salesorderbasicinformation sob ON sob.Id = soi.SalesOrderBasicInformationId
                WHERE
                    sodn.ProductSerialNumberId = serialNumberProfileId
                ORDER BY sodn.Id
                DESC LIMIT 1;

                CALL SaveSerialNumberHistory(serialNumberProfileId, 7, locationId, salesOrderId,customerId, _userId);

                SELECT 
                    1 IsSuccess, 
                    'Updated Successfully' Message;
            ELSE
                SELECT 
                    0 IsSuccess, 
                    "Id doesn't exist" Message; 
            END IF;  
        END IF;       
    ELSEIF(serialNumberProfileId IS NOT NULL AND dispatched=0)
    THEN
        IF EXISTS
        ( 
        SELECT 
            sodn.Id 
        FROM 
            saleorderdispatchserialnumber sodn
        INNER JOIN 
            productserialnumber ps 
        ON
            sodn.ProductSerialNumberId = ps.Id
        WHERE 
            ps.SerialNumber = _serialnumber
        AND    
            sodn.IsDispatched = 0
        AND
            sodn.IsDeleted = 0
        AND
            sodn.IsReturn = 0
        AND
            sodn.IsDamage = 0
        )
        THEN
            SELECT 
                sodn.Id
            INTO
                id
            FROM
                saleorderdispatchserialnumber sodn
            INNER JOIN 
                productserialnumber ps 
            ON
                sodn.ProductSerialNumberId = ps.Id
            WHERE 
                ps.SerialNumber = _serialnumber
            AND    
                sodn.IsDispatched = 0
            AND
                sodn.IsDeleted = 0
            AND
                sodn.IsReturn = 0
            AND
                sodn.IsDamage = 0;

            UPDATE saleorderdispatchserialnumber 
            SET 
                IsDamage = 1,
                DamageDate = _damageDate ,
                ModifiedBy = _userId,
                IsDeleted = 1,
                ModifiedOn = NOW()
            WHERE
                Id = id;
            
            UPDATE productserialnumber 
            SET 
                IsDamage = 1,
                DamageDate = _damageDate,
                ModifiedOn = NOW(),
                ModifiedBy = _userId
            WHERE
                Id = serialNumberProfileId;
                    
            SELECT 
                sob.Id,
                sob.WarehouseId
            INTO
                salesOrderId,
                locationId 
            FROM
                saleorderdispatchserialnumber sodn
            INNER JOIN
                productserialnumber ps ON ps.Id = sodn.ProductSerialNumberId
            INNER JOIN
                salesorderitemsinformation soi ON sodn.SalesOrderItemInformationId = soi.Id
            INNER JOIN
                salesorderbasicinformation sob ON sob.Id = soi.SalesOrderBasicInformationId
            WHERE
                sodn.ProductSerialNumberId = serialNumberProfileId; 
                        
            CALL SaveSerialNumberHistory(serialNumberProfileId, 5, locationId, salesOrderId,customerId, _userId);	
            SELECT 
                1 IsSuccess, 'Updated Successfully' Message;           
        ELSE
            SELECT 
                0 IsSuccess, "Id doesn't exist" Message; 
        END IF;    
    ELSE
        IF EXISTS
            (SELECT 
                ps.Id 
            FROM
                productserialnumber ps
            INNER JOIN
                stockinwarditeminformation sii
            ON
                sii.Id = ps.StockInwardItemInformationId
            INNER JOIN   
                stockinwardbasicinformation sib
            ON      
                sib.Id = sii.StockInwardBasicInformationId 
            WHERE
                ps.SerialNumber = _serialnumber
            AND 
                ps.IsDamage = 0
            )
        THEN
            SELECT 
                ps.Id 
            INTO 
                serialId
            FROM
                productserialnumber ps
            INNER JOIN
                stockinwarditeminformation sii
            ON
                sii.Id = ps.StockInwardItemInformationId
            INNER JOIN   
                stockinwardbasicinformation sib
            ON      
                sib.Id = sii.StockInwardBasicInformationId 
            WHERE
                ps.SerialNumber = _serialnumber
            AND 
                ps.IsDamage=0;

            UPDATE 
                productserialnumber 
            SET 
                IsDamage = 1,
                DamageDate = _damageDate,
                ModifiedBy = _userId,
                ModifiedOn = NOW()
            WHERE
                Id = serialId;

            SELECT 
                sib.Id,
                sib.WarehouseLocationId
            INTO
                salesOrderId,
                locationId 
            FROM
                productserialnumber ps
            INNER JOIN
                stockinwarditeminformation sii 
            ON 
                ps.StockInwardItemInformationId = sii.Id
            INNER JOIN
                stockinwardbasicinformation sib ON sib.Id = sii.StockInwardBasicInformationId
            WHERE
                ps.SerialNumber = _serialnumber;       

            CALL SaveSerialNumberHistory(serialNumberProfileId, 10, locationId, salesOrderId,customerId, _userId);
            SELECT 
                1 IsSuccess, 
                'Updated Successfully' Message;
        ELSE
            SELECT 
                0 IsSuccess, 
                "Id doesn't exist" Message; 
        END IF;
    END IF;  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateIsReturnSaleOrderDispatchSerialNumber` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `UpdateIsReturnSaleOrderDispatchSerialNumber`(
  IN _serialnumber varchar(16), 
  IN _userId int
)
BEGIN 
    DECLARE id int;
    DECLARE serialnumberprofileId int;
    DECLARE dispatched int;
    DECLARE actionTypeId int;
    DECLARE locationId int;
    DECLARE salesorderId int;
    DECLARE customerId int;

    SELECT 
        Id
    INTO 
        serialnumberprofileId 
    FROM 
        productserialnumber 
    WHERE 
        SerialNumber = _serialNumber;

    SELECT 
        sod.IsDispatched 
    INTO 
        dispatched 
    FROM 
        saleorderdispatchserialnumber sod 
    INNER JOIN 
        productserialnumber ps 
    ON
		ps.Id = sod.ProductSerialNumberId 
    WHERE 
        ps.SerialNumber = _serialnumber 
    AND 
        sod.IsDeleted = 0;

    SELECT
        Id 
    INTO 
        actionTypeId 
    FROM 
        actiontype 
    WHERE 
        Id = 4;

    IF( serialnumberprofileId IS NOT NULL AND dispatched = 1) 
    THEN 
        IF EXISTS (
                SELECT 
                    sodn.Id 
                FROM 
                    saleorderdispatchserialnumber sodn 
                INNER JOIN 
                    productserialnumber ps 
                ON 
                    sodn.ProductSerialNumberId = ps.Id 
                WHERE 
                    ps.SerialNumber = _serialnumber 
                AND 
                    sodn.IsDispatched = 1 
                AND 
                    sodn.IsDeleted = 0 
                AND 
                    sodn.IsReturn = 0 
                AND 
                    sodn.IsDamage = 0 
                LIMIT 1)
        THEN 
			SELECT 
				sodn.Id INTO id 
			FROM 
				saleorderdispatchserialnumber sodn 
			INNER JOIN 
				productserialnumber ps 
            ON
                sodn.ProductSerialNumberId = ps.Id 
			WHERE 
				ps.SerialNumber = _serialnumber 
			AND 
				sodn.IsDispatched = 1 
			AND 
				sodn.IsDeleted = 0 
			AND 
				sodn.IsReturn = 0 
			AND 
				sodn.IsDamage = 0 
			LIMIT 1;

			SELECT 
				sob.Id, 
				sob.WarehouseId, 
				sob.CustomerId INTO salesorderId, 
				locationId, 
				customerId 
			FROM 
				saleorderdispatchserialnumber sodn 
			INNER JOIN 
				productserialnumber ps ON ps.Id = sodn.ProductSerialNumberId 
			INNER JOIN
				salesorderitemsinformation soi ON sodn.SaleOrderItemInformationId = soi.Id 
			INNER JOIN 
				salesorderbasicinformation sob ON sob.Id = soi.SalesOrderBasicInformationId 
			WHERE 
				sodn.ProductSerialNumberId = serialnumberprofileId 
			AND 
				sodn.IsDispatched = 1 
			AND 
				sodn.IsDeleted = 0 
			AND 
				sodn.IsReturn = 0 
			AND 
				sodn.IsDamage = 0 
			LIMIT 1;

			UPDATE 
				saleorderdispatchserialnumber 
			SET 
				IsReturn = 1, 
				IsDeleted = 1, 
				ModifiedBy = _userId, 
				ModifiedOn = NOW() 
			WHERE 
				Id = id;
				
			CALL SaveSerialNumberHistory( serialnumberprofileId, actionTypeId, locationId, salesorderId, customerId,  _userId);

			SELECT 
				1 IsSuccess, 
				"Updated Successfully" Message;
        ELSE 
            SELECT 
				0 IsSuccess, 
				"Id doesn't exist" Message;
        END IF;
    ELSE 
        SELECT 
			0 IsSuccess, 
			"Id doesn't exist" Message;
    END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateManufacturerType` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `UpdateManufacturerType`(
	IN _id int, 
	IN _manufacturertype varchar(32),
	IN _userId int
)
BEGIN
	UPDATE 
		manufacturer
	SET 
		`Name` = _manufacturertype,
		ModifiedBy = _userId,
		ModifiedOn = now()
	WHERE 
		Id=_id;
        
	SELECT 
		1 IsSuccess, 
        "Data Updated Successfully" Message ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdatePrintCount` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `UpdatePrintCount`(
	IN _id int,
	IN _userId int
)
BEGIN
    DECLARE iteration int DEFAULT(1);
    DECLARE totalCount int DEFAULT(SELECT count(Id) FROM productserialnumber WHERE StockInwardItemInformationId = _id);
    DECLARE invoiceNo int;
    DECLARE serialNumberId int;
    DECLARE locationId int;
    DECLARE movementId int;
    DECLARE actionType int;
    declare buyerSellerId int;
    DECLARE `limit` int;

    SELECT 
        sib.Id, 
        sib.WarehouseId, 
        sib.MoveTypeId,
        sib.VendorId
    INTO 
        invoiceNo, 
        locationId, 
        movementId,
        buyerSellerId 
    FROM 
        stockinwarditeminformation sii
    INNER JOIN 
         stockinwardbasicinformation sib 
    ON 
         sib.Id = sii.StockInwardBasicInformationId 
    WHERE 
		 sii.Id = _id;
            
    UPDATE 
        stockinwarditeminformation 
    SET 
        Printed = Printed + 1
    WHERE
        Id = _id;
        
    IF (movementId = 2)
    THEN
        UPDATE 
            productserialnumber 
        SET 
            IsScanned = 1,
            ScanDate = NOW(),
            IsDamage = 1,
            DamageDate = NOW(),
            ModifiedOn = NOW(),
            ModifiedBy = _userId
        WHERE
           StockInwardItemInformationId = _id;
    ELSE
        UPDATE 
            productserialnumber
        SET 
            IsScanned=1, 
            ScanDate = NOW(),
            ModifiedOn=NOW(), 
            ModifiedBy=_userId
        WHERE
            StockInwardItemInformationId=_id;
    END IF;
                
    IF(movementId = 1)
    THEN
        SET actionType = 1;
    ELSEIF(movementId = 2)
    THEN
        SET actionType = 9;
    ELSE
        SET actionType = 8;
    END IF;
    
    WHILE iteration <= totalCount 
    DO
        SET `limit` = iteration - 1;
        SELECT 
            Id 
        INTO 
            serialNumberId 
        FROM 
            productserialnumber 
        WHERE 
            StockInwardItemInformationId = _id 
        LIMIT `limit`,1;
        
        IF (SELECT Id FROM productserialnumberhistory snh WHERE snh.ProductSerialNumberId = serialNumberId) IS NULL 
        THEN
            CALL SaveSerialNumberHistory(serialNumberId, actionType, locationId, invoiceNo,buyerSellerId, _userId);
        END IF;
            SET iteration = iteration + 1;
    END WHILE;
        select 1 IsSuccess, 'Print count updated successfully.' Message;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateSaleOderItemStatus` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `UpdateSaleOderItemStatus`(
    IN _id int,
    IN _statusId int,
    IN _userId int)
BEGIN
    UPDATE
         salesorderbasicinformation
    SET 
        SaleOrderStatusId = 3,
        ModifiedBy = _userId,
        ModifiedOn = NOW()
    WHERE 
        Id = _id;

    SELECT 
        1 IsSuccess, 
        "Update Successfully" Message;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateSaleOrderItemStatus` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `UpdateSaleOrderItemStatus`(
    IN _id int,
    IN _statusId int,
    IN _userId int
)
BEGIN
    UPDATE
         salesorderbasicinformation
    SET 
        SaleOrderStatusId = 3,
        ModifiedBy = _userId,
        ModifiedOn = NOW()
    WHERE 
        Id = _id;

    SELECT 
        1 IsSuccess, 
        "Update Successfully" Message;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateSalesOrderDirect` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `UpdateSalesOrderDirect`(
    IN _serialNo varchar(16),
    IN _id int,
    IN _userId int,
    IN _location varchar(64)
)
BEGIN
    DECLARE productId int;
    DECLARE quantity int;
    DECLARE salesOrderItemId int;
    DECLARE serialNoId int;

    SET serialNoId=(SELECT 
            Id 
        FROM 
            productserialnumber 
        WHERE 
            SerialNumber = _serialNo);
                        
    SET productId=(SELECT
            si.ProductId
        FROM 
            stockinwarditeminformation si
        INNER JOIN 
            productserialnumber sp
        ON
            sp.StockInwardItemInformationId=si.Id
        WHERE
            sp.SerialNumber=_serialNo
        );

    SET quantity=	(SELECT 
            SUM(psp.Quantity)
        FROM 
            stockinwarditeminformation psp
        INNER JOIN 
            productserialnumber snp 
        ON
            psp.Id = snp.StockInwardItemInformationId 
        INNER JOIN 
            stockinwardbasicinformation ip 
        ON 
            ip.Id = psp.StockInwardBasicInformationId 
        INNER JOIN 
            product pp 
        ON 
            psp.ProductId= pp.Id 
        INNER JOIN
            saleorderdispatchserialnumber sdn
        ON
            sdn.ProductSerialNumberId=snp.Id
        WHERE
            psp.ProductId= productId
        AND
            snp.IsScanned = 1
        AND
            ip.WarehouseId = (SELECT Id FROM warehouse WHERE LocationName=_location AND IsDeleted=0)
        AND 
            (sdn.Id IS NULL OR (sdn.IsDeleted=1 AND sdn.IsDispatched=0))
        );
                    
    IF(quantity >=1) 
    THEN
        SET salesOrderItemId = (SELECT Id FROM salesorderitemsinformation WHERE SalesOrderBasicInformationId = _id AND ProductId = productId);
        IF(salesOrderItemId IS NULL)
        THEN
            INSERT INTO salesorderitemsinformation
                (ProductId,
                SalesOrderBasicInformationId,
                Quantity,
                IsDeleted,
                CreatedBy,
                CreatedOn)
            VALUES
                (productId,
                _salesOrderId, 
                1, 
                0, 
                _userId, 
                NOW());
            SET salesOrderItemId = LAST_INSERT_ID(); 
        ELSE
            UPDATE 
                salesorderitemsinformation
            SET 
                Quantity = Quantity+1,
                ModifiedBy = _userId,
                ModifiedOn = NOW()
            WHERE 
                Id = salesOrderItemId;
        END IF;

        INSERT INTO saleorderdispatchserialnumber
            (SalesOrderItemInformationId,
            ProductSerialNumberId,
            IsDispatched,
            DispatchDate,
            CreatedOn,
            CreatedBy)
        VALUES
            (salesOrderItemId,
            serialNoId,
            1,
            NOW(),
            NOW(),
            _userId);

        SELECT 
            WarehouseId
        INTO 
            @locationId 
        FROM
            salesorderbasicinformation
        WHERE
            Id = _id;
        CALL SaveSerialNumberHistory(serialNoId, 3, @locationId, _id, _userId);
    END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateSerialNumberSalesOrder` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `UpdateSerialNumberSalesOrder`(
    IN _id int,
    IN _serialNumber varchar(16),
    IN _userId int
)
BEGIN
    DECLARE flag boolean;
    DECLARE serialNumberId int;
    DECLARE locationId int;
    DECLARE dispatchId int;
    DECLARE saleOrderId int;
    DECLARE customerId int;
    
    SET flag = (
        SELECT EXISTS(
            SELECT 
                ps.Id
            FROM 
                saleorderdispatchserialnumber sod
            INNER JOIN 
                salesorderitemsinformation soi ON sod.SalesOrderItemInformationId = soi.Id
            INNER JOIN 
                salesorderbasicinformation sob ON soi.SalesOrderBasicInformationId = sob.Id
            INNER JOIN 
                productserialnumber ps ON sod.ProductSerialNumberId = ps.Id
            WHERE 
                sob.Id = _id AND sod.IsDispatched = 0 AND ps.SerialNumber = _serialNumber
        )
    );
    
    IF flag = 1 
    THEN 
     SET serialNumberId = ( 
        SELECT 
			Id
		FROM 
			productserialnumber
		WHERE
			SerialNumber = _serialNumber
        );

		SELECT 
            sob.Id SaleOrderBasicId, 
            sob.VendorId, 
            sob.WarehouseId, 
            sod.Id SaleOrderDispatchId
        INTO
            saleOrderId, 
            customerId, 
            locationId, 
            dispatchId
        FROM 
			salesorderbasicinformation sob
		INNER JOIN 
			salesorderitemsinformation soi
		ON	
			sob.Id = soi.SalesOrderBasicInformationId
		INNER JOIN
			saleorderdispatchserialnumber sod
		ON 
			sod.SalesOrderItemInformationId = soi.Id
		INNER JOIN 
			productserialnumber ps
		ON 
			ps.Id = sod.ProductSerialNumberId
		WHERE
			ps.Id = serialNumberId
		ORDER BY
			sod.Id 
        DESC LIMIT 1;
            
        UPDATE saleorderdispatchserialnumber sod
        SET 
            IsDispatched = 1, 
            DispatchDate = NOW(), 
            ModifiedBy =_userId, 
            ModifiedOn = NOW()
        WHERE 
            Id = dispatchId;
       
        CALL SaveSerialNumberHistory(
            serialNumberId, 
            3, 
            locationId, 
            saleOrderId, 
            customerId, 
            _userId
        );
    END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateUser` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `UpdateUser`(
    IN _id int,
    IN _name varchar(64),
    IN _email varchar(64),
    IN _mobile varchar(64),
    IN _status int,
    IN _departmentId int,
    IN _warehouseId int,
    IN _password varchar(64),
    IN _userId int
    )
BEGIN
    DECLARE `_rollback` BOOL DEFAULT 0; 
    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET `_rollback` = 1;
    START TRANSACTION;

    UPDATE 
		`user`
    SET 
        `Name` = _name,
        Email = _email,
        Mobile = _mobile,
        `Status` = _status,
        UserRoleId = _departmentId,
        WareHouseId = _warehouseId,
        ModifiedBy = _userId,
        ModifiedOn = NOW()
    WHERE 
        Id = _id;    
        
    UPDATE 
		logindetail
    SET
        UserName = _name,
        Password = _password,
        IsActive = _status,
        ModifiedBy = _userId,
        ModifiedOn = NOW()
    WHERE 
        UserId =_id;
        
    IF `_rollback` 
    THEN 
        SELECT 
			'NOT UPDATED' Message; 
        ROLLBACK; 
    ELSE 
        SELECT 
			'UPDATED' Message; 
        COMMIT; 
    END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateUsernamePassword` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `UpdateUsernamePassword`(
    IN _id int,
    IN _username varchar(64),
    IN _password varchar(64)
)
BEGIN
    UPDATE 
		logindetail
    SET
        Username = _username,
        `Password` = _password,
        ModifiedBy = 1,
        ModifiedOn = NOW()
    WHERE 
        userId = _id;
	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UserDetail` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`backup`@`%` PROCEDURE `UserDetail`(IN _userId int)
BEGIN
	SELECT 
		u.Id, 
		u.Name, 
		w.LocationName,
        w.Id as LocationId,
		(SELECT COUNT(1) FROM stockinwardbasicinformation si WHERE si.WarehouseId = u.WarehouseId AND si.`Status` = 2  AND u.Id = _userId) StockInward,
		(SELECT COUNT(1) FROM salesorderbasicinformation sb WHERE sb.WarehouseId = u.WarehouseId AND sb.SaleOrderStatusId <> 1 AND u.Id = _userId ) StockOutWard,
		(SELECT COUNT(1) FROM stockauditinitiation sa WHERE sa.WarehouseId = u.WarehouseId AND sa.IsAuditDone = 0 AND u.Id = _userId) StockAudit  
	FROM 
		`user` u 
	INNER JOIN 
		warehouse w 
	ON 
		w.Id = u.WarehouseId
	WHERE 
		u.Id = _userId;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UserDetailsforWeb` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `UserDetailsforWeb`(
	IN _id int
	)
BEGIN
    SELECT 
        u.Id,
        l.UserName,
        u.Email,
        r.Name,
        u.Mobile,
        w.LocationName,
        u.CreatedOn
    FROM 
        user u  
    INNER JOIN 
        logindetail l 
    ON 
        l.UserId = u.Id 
    INNER JOIN
        userrole r 
    ON
        r.Id = u.UserRoleId
    INNER JOIN
        warehouse w
    ON 
        w.Id = u.WarehouseId
    WHERE
        u.Id = _id  ; 
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UserProfileDetail` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `UserProfileDetail`(IN _id int)
BEGIN
    SELECT 
        u.Id, 
        u.`Name` UserName, 
        u.Email Email  , 
        r.Name , 
        u.Mobile , 
        wp.LocationName, 
        wp.Id LocationId, 
        DATE_FORMAT(u.CreatedOn, '%d/%m/%Y') CreatedOn
    FROM 
        user u  
    INNER JOIN 
        logindetail l 
    ON 
        l.UserId = u.Id 
    INNER JOIN 
        userrole r 
    ON
        r.Id = u.UserRoleId
    INNER JOIN 
        warehouse wp 
    ON 
        wp.Id = u.WarehouseId
    WHERE 
        u.Id = _id  ;  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `VerifySerialNumber` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `VerifySerialNumber`(
	IN _list json,
    IN _productSkuProfileId int,
    IN _userId int
)
BEGIN
	 DECLARE iteration INT DEFAULT 0;
	 DECLARE totalItem INT DEFAULT 0;
	 DECLARE serialNum VARCHAR(16) DEFAULT '';
	 DECLARE comparer VARCHAR(16) DEFAULT '';
     
	DROP TEMPORARY TABLE IF EXISTS temp_tbl_verifysno;
	CREATE TEMPORARY TABLE temp_tbl_verifysno 
		AS 
		SELECT 
		Id,
		SerialNumber
		FROM JSON_TABLE(
		_list,
		"$[*]" COLUMNS (
			Id FOR ORDINALITY,
			SerialNumber VARCHAR(16) PATH "$"
		)
	) AS tbl1;
    
	SET iteration = 1;
	SET totalItem=(SELECT Quantity FROM stockinwarditeminformation WHERE Id = _productSkuProfileId);
        
	IF( (SELECT COUNT(SerialNumber) FROM productserialnumber WHERE SerialNumber = _productSkuProfileId) = totalItem)
	THEN
		SELECT 
			SerialNumber 
		FROM 
			productserialnumber 
		WHERE 
			SerialNumber = _productSkuProfileId;
                
		UPDATE 
			stockinwarditeminformation 
		SET 
			BarcodeGenerated = 1 
		WHERE 
			Id = _productSkuProfileId;
	ELSE
		WHILE iteration <= totalItem
		DO
			SET serialNum = ( SELECT SerialNumber FROM temp_tbl_verifysno WHERE Id=iteration );
			SET comparer = ( SELECT SerialNumber FROM productserialnumber WHERE SerialNumber COLLATE utf8mb4_general_ci = serialNum COLLATE utf8mb4_general_ci ); 
				
            IF comparer IS NOT NULL
			THEN
		    	DELETE FROM 
					temp_tbl_verifysno 
				WHERE 
					Id = iteration ;

				SET iteration = iteration - 1;
			ELSE
				IF serialNum IS NOT NULL 
                THEN 
					INSERT INTO productserialnumber (
                        SerialNumber,
                        SerialNumber, 
                        IsScanned, 
                        CreatedOn, 
                        CreatedBy)
					VALUES (
                        _productSkuProfileId,
                        serialNum,
                        0, 
                        NOW(), 
                        _userId);
				END IF;
			END IF;

			SET iteration = iteration+1;

		END WHILE;

		SELECT 
            SerialNumber 
        FROM 
            productserialnumber 
        WHERE 
            SerialNumber = _productSkuProfileId;

        UPDATE 
            stockinwarditeminformation 
        SET 
            BarcodeGenerated = 1 
        WHERE 
            Id = _productSkuProfileId;
	END IF;

	UPDATE 
        stockinwarditeminformation 
    SET 
        BarcodeGenerated = 1 
    WHERE 
        Id = _productSkuProfileId;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `WarehouseCalculation` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`inventorydev`@`%` PROCEDURE `WarehouseCalculation`()
BEGIN
	DECLARE total INT;
	DECLARE `active` INT;
	DECLARE `inactive` INT;
	DECLARE message VARCHAR(50);
	DECLARE isSuccess INT;
    
	SELECT 
		count(1) INTO total 
	FROM 
		warehouse w;

	SELECT 
		COUNT(1) INTO `active` 
	FROM 
        warehouse w 
	WHERE 
        isactive=1;

	SET `inactive` = total - active;

	SELECT 
		CASE 
			WHEN total >= 0 THEN 
				'Data Fetched Successfully' 
			ELSE 
				'Unable to fetch data' 
		END,
		CASE
			WHEN total >= 0 THEN 
				1 
			ELSE 
				0 
		END
	INTO 
		message,
		isSuccess;
        
	SELECT 
		total,
		active,
		inactive,
		isSuccess,
		message;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2023-08-29 10:18:07
